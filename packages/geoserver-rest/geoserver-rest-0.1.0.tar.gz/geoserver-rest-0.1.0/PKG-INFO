Metadata-Version: 2.1
Name: geoserver-rest
Version: 0.1.0
Summary: Package for GeoServer rest API
Home-page: https://github.com/iamtekson/geoserver-rest-python
Author: Tek Kshetri
Author-email: iamtekson@gmail.com
License: UNKNOWN
Description: # Documentation
        
        ### Installation
        ```bash
        pip install wheel
        pip install pipwin
        pipwin install gdal
        
        pip install geoserver-rest-python
        ```
        
        ### How to use
        This library is used for creating workspace, coveragestore, featurestore, styles. Some of the examples are shown below.
        
        ##### Initialize the library
        This step is used to initialize the library. It takes parameters as geoserver url, username, password.
        
        ```python
        from geo.Geoserver import Geoserver
        geo = Geoserver('http://localhost:8080/geoserver', username='admin', password='geoserver')
        ```
        
        ##### Create workspace
        ```python
        geo.create_workspace('demo')
        ```
        
        ##### Create coveragestore
        It is helpful for publishing the **raster data** to the geoserver
        
        ```python
        geo.create_coveragestore(path=r'path\to\raster\file.tif', workspace='demo')
        ```
        
        ##### Create featurestore and publish layer
        It is use for connecting the **PostGIS** with geoserver and publish this as a layer. It is only use for **vector data**
        
        ```python
        geo.create_featurestore(store='geo_data', workspace='demo', db='postgres', host='localhost', pg_user='postgres', pg_password='admin')
        geo.publish_featurestore(workspace='demo', store='geo_data', pg_table='geodata_table_name')
        ```
        
        ##### Upload style and publish it
        It is use for uploading **SLD** files and publish style
        ```python
        geo.upload_style(path=r'path\to\sld\file.sld', workspace='demo')
        geo.publish_style(layer_name='geoserver_layer_name', style_name='sld_file_name', workspace='demo')
        ```
        
        
        ##### Create Coverage Style based on the raster (Dynamic) and apply style
        It is use to create the style file for **raster data**. You can get the color_ramp name from [matplotlib colormaps](https://matplotlib.org/3.3.0/tutorials/colors/colormaps.html).
        
        ```python
        #Style name will be the same as the raster_file_name
        geo.create_coveragestyle(raster_path=r'path\to\raster\file.tiff', style_name='style_1', workspace='demo', color_ramp='RdYiGn')
        geo.publish_style(layer_name='geoserver_layer_name', style_name='raster_file_name', workspace='demo')
        ```
Keywords: geoserver,geoserver-rest,geoserver-rest-python
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.6
Description-Content-Type: text/markdown
