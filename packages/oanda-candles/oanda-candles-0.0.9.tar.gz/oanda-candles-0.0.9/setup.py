# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['oanda_candles']

package_data = \
{'': ['*']}

install_requires = \
['forex-types>=0.0.6,<0.0.7',
 'magic-kind>=0.2.2,<0.3.0',
 'oandapyV20>=0.6.3,<0.7.0',
 'requests>=2.23.0,<3.0.0',
 'time-int>=0.0.6,<0.0.7']

setup_kwargs = {
    'name': 'oanda-candles',
    'version': '0.0.9',
    'description': 'Oanda forex candle API built on top of oandapyV20',
    'long_description': '# oanda-candles\nOanda forex candle API built on top of oandapyV20\n\n#### CAVEAT:\nThis is still in rapid initial development and features might change drastically.\n\nnew in version 0.0.9:\n1. CandleMeister and CandleClient now have a method to get the collector they use\nfor a specific pair and granularity.\n1. Updated some dependencies to latest versions.\n\nnew in version 0.0.8:\n1. Added CandleClient to manage multiple CandleCollector objects from one object.\n1. Plus a CandleMeister that wraps a single CandleClient for easy global access\n1. Fixed a bug that was causing too many requests when they were not needed.\n1. Had idea for `tail` method as a variant on `grab` method, where it returns only\nthe newest candle information since the last call to eitehr `grab` or `tail`. Made\na place holder for it, but not implementing it yet.\n1. Still behind on unit tests, but still was able to do sand-box testing with market open.\n--which is how I found and fixed bug above. This package is still far from prime time ready.\n\n\nnew in version 0.0.7:\n1. The `CandleSequence` has been cleaned up and plans to add merging have been abandoned.\n1. The `Candle` class no longer has `__lt__` overloaded and `__eq__` is now based on all the values being equal rather than just the candle time.\n1. A new `CandleCollector` class is added which is like a higher level `CandleSequence` specifically designed for chart applications that always want a specific number of latest candles. \n1. No unit testing has been added for these changes, they have only been sand-boxed, so they may not work as advertised. Also the market was closed when I sand-boxed `CandleCollector`, so some of its heursitics have not even been sand-box tested yet.\n\n\n\n### Oanda Access Token\nUsing this package requires an access token to a user\'s\nOanda brokerage account. This module only uses the token to\nrequest candle data, but such tokens can be used to make\ntrades on the account. It is recommended that access\ntokens from a demo as opposed to a live accounts be used.\n \nDemo account tokens can be generated by a signed in user here:\n\nhttps://www.oanda.com/demo-account/tpa/personal_token\n\n**Warning**: Oanda sometimes takes their API down for maintenance.\nThis seems to mostly occur shortly after the market closes at the end of\nthe trading week (at 5pm New York time). During the maintenance you\nmay get a 401 http response that looks like your token is not valid\neven if it is.\n\n### Quick Example\nSupposing that token is in the env var `OANDA_TOKEN`, one could print\nthe opening bid price of the latest 100 trading hours for the Aussie like this: \n\n```python\nimport os\nfrom oanda_candles import Pair, Gran, CandleCollector\n\ntoken = os.getenv("OANDA_TOKEN")\n\ncollector = CandleCollector(token, Pair.AUD_USD, Gran.H1)\ncandles = collector.grab(100)\n\nfor candle in candles:\n    print(candle.bid.o)\n```\nNote the CandleCollector remembers the candles it downloads and also keeps track of how fresh they are and has\nsome heuristics about when it should download updates to them, such that you can spam run its `grab(count)` method\nin an event loop without worrying about spamming the Oanda API.\n\n### Using CandleMeister\nThe `CandleMeister` is a single globally available class that manages one `CandleCollector` for each\npair/granularity combination. While the `CandleClient` is the same idea but as an object where you\ncan have more than one...in those cases where you may want more than one...which I can\'t think of.\n\nTo use the CandleMeister to grab any candles, you must make sure it that it is initialized\nwith the Oanda token. For example if the env var `OANDA_TOKEN` has your token do the following\nright at the startup of your application before you create your widgets:\n```python\nimport os\nfrom oanda_candles import CandleMeister\n\ntoken = os.getenv("OANDA_TOKEN")\nCandleMeister.init_meister(token)\n```\nThen you can you can grab candles from any module you like (provided you don\'t do it at import time)\nlike so:\n```python\nfrom oanda_candles import CandleMeister, Pair, Gran\n\n...\ndef some_func(*args, **kwargs):\n    ...\n    euro_weekly_candles = CandleMeister.grab(Pair.EUR_USD, Gran.W, 100)\n    ...\n```\nNote that if the `CandleMeister.grab` method was used outside of the function in this\nexample, then it would probably end up called as your modules were imported before your\nwere able to initialize the CandleMeister with the token. It is thus recommended you\nkeep such calls inside callback methods and not try to make them at import time.\n\n### Summary of Basic Usage\n1. A `CandleCollector` object is initialized with a token, forex pair, and granularity.\n1. To get a list of the latest `count` `Candle` objects at any given time run the `grab(count)` method of collector.\n1. The `grab(count)` method is safe to spam call in an event loop without slowing down to poll as the collector handles throttling and caching.\n1. Each `Candle` has three `Ohlc` objects, one for Bid, Mid, and Ask prices, and a `time` attribute with the start of the candle time.\n1. The `Ohlc` objects have open, high, low, and close `Price` objects\n\n### Understanding Request Ranges.\n**Note**: This section is semi-deprecated by the `CandleCollector` which is new in 0.0.7, in\nthe sense that in most use cases in a candle application it seems to me the `CandleCollector`\nis just a better way to go than the lower level `CandleRequester`.\n\nThe `CandleRequester.request()` has `start`, `end`, and `count`\noptional parameters used to specify how many candles and from when.\n\n\n parameter | valid types | valid range | default\n --- | --- |---| ---\nstart | TimeInt, datetime, None | epoch to now | --\nend | TimeInt, datetime, None | epoch to now | now\ncount | int, None | 1 to 5000 | 500\n\nIt does not make sense to set all three of these parameters, but you can\nspecify any single one of them, or any two of them, or none of them.\nThe behavior for when they are set or unset is shown in this table:\n\nstart | end | count | behavior\n --- | --- | ---| ---\n-- | -- | -- | Get latest 500 candles\n-- | -- | set | Get latest count candles\n-- | set | -- | Get last 500 candles up until the end time\n-- | set | set | Get last count candles up until the end time\nset | -- | -- | Get the first 500 candles from start time\nset | -- | set | Get the first count candles from start time\nset | set | -- | Get candles from start to end times\nset | set | set | ValueError (there might be a different count in the range)\n',
    'author': 'Andrew Allaire',
    'author_email': 'andrew.allaire@gmail.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/aallaire/oanda-candles',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.5,<4.0',
}


setup(**setup_kwargs)
