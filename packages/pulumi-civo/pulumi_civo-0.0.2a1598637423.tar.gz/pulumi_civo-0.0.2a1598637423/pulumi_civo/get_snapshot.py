# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import _utilities, _tables


class GetSnapshotResult:
    """
    A collection of values returned by getSnapshot.
    """
    def __init__(__self__, completed_at=None, cron_timing=None, hostname=None, id=None, instance_id=None, name=None, next_execution=None, region=None, requested_at=None, safe=None, size_gb=None, state=None, template_id=None):
        if completed_at and not isinstance(completed_at, str):
            raise TypeError("Expected argument 'completed_at' to be a str")
        __self__.completed_at = completed_at
        """
        The date where the snapshot was completed.
        """
        if cron_timing and not isinstance(cron_timing, str):
            raise TypeError("Expected argument 'cron_timing' to be a str")
        __self__.cron_timing = cron_timing
        """
        A string with the cron format.
        """
        if hostname and not isinstance(hostname, str):
            raise TypeError("Expected argument 'hostname' to be a str")
        __self__.hostname = hostname
        """
        The hostname of the instance.
        """
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        __self__.instance_id = instance_id
        """
        The ID of the Instance from which the snapshot was be taken.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        The name of the snapshot.
        """
        if next_execution and not isinstance(next_execution, str):
            raise TypeError("Expected argument 'next_execution' to be a str")
        __self__.next_execution = next_execution
        """
        if cron was define this date will be the next execution date.
        """
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        __self__.region = region
        """
        The region where the snapshot was take.
        """
        if requested_at and not isinstance(requested_at, str):
            raise TypeError("Expected argument 'requested_at' to be a str")
        __self__.requested_at = requested_at
        """
        The date where the snapshot was requested.
        """
        if safe and not isinstance(safe, bool):
            raise TypeError("Expected argument 'safe' to be a bool")
        __self__.safe = safe
        """
        If is `true` the instance will be shut down during the snapshot if id `false` them not.
        """
        if size_gb and not isinstance(size_gb, float):
            raise TypeError("Expected argument 'size_gb' to be a float")
        __self__.size_gb = size_gb
        """
        The size of the snapshot in GB.
        """
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        __self__.state = state
        """
        The status of the snapshot.
        """
        if template_id and not isinstance(template_id, str):
            raise TypeError("Expected argument 'template_id' to be a str")
        __self__.template_id = template_id
        """
        The template id.
        """


class AwaitableGetSnapshotResult(GetSnapshotResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSnapshotResult(
            completed_at=self.completed_at,
            cron_timing=self.cron_timing,
            hostname=self.hostname,
            id=self.id,
            instance_id=self.instance_id,
            name=self.name,
            next_execution=self.next_execution,
            region=self.region,
            requested_at=self.requested_at,
            safe=self.safe,
            size_gb=self.size_gb,
            state=self.state,
            template_id=self.template_id)


def get_snapshot(id=None, name=None, opts=None):
    """
    Snapshots are saved instances of a block storage volume. Use this data
    source to retrieve the ID of a Civo snapshot for use in other
    resources.

    ## Example Usage

    Get the snapshot:

    ```python
    import pulumi
    import pulumi_civo as civo

    mysql_vm = civo.get_snapshot(name="mysql-vm")
    ```


    :param str id: The ID of the snapshot.
    :param str name: The name of the snapshot.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('civo:index/getSnapshot:getSnapshot', __args__, opts=opts).value

    return AwaitableGetSnapshotResult(
        completed_at=__ret__.get('completedAt'),
        cron_timing=__ret__.get('cronTiming'),
        hostname=__ret__.get('hostname'),
        id=__ret__.get('id'),
        instance_id=__ret__.get('instanceId'),
        name=__ret__.get('name'),
        next_execution=__ret__.get('nextExecution'),
        region=__ret__.get('region'),
        requested_at=__ret__.get('requestedAt'),
        safe=__ret__.get('safe'),
        size_gb=__ret__.get('sizeGb'),
        state=__ret__.get('state'),
        template_id=__ret__.get('templateId'))
