# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import _utilities, _tables


class GetLoadBalancerResult:
    """
    A collection of values returned by getLoadBalancer.
    """
    def __init__(__self__, backends=None, fail_timeout=None, health_check_path=None, hostname=None, id=None, ignore_invalid_backend_tls=None, max_conns=None, max_request_size=None, policy=None, port=None, protocol=None, tls_certificate=None, tls_key=None):
        if backends and not isinstance(backends, list):
            raise TypeError("Expected argument 'backends' to be a list")
        __self__.backends = backends
        """
        A list of backend instances
        """
        if fail_timeout and not isinstance(fail_timeout, float):
            raise TypeError("Expected argument 'fail_timeout' to be a float")
        __self__.fail_timeout = fail_timeout
        """
        The wait time until the backend is marked as a failure
        """
        if health_check_path and not isinstance(health_check_path, str):
            raise TypeError("Expected argument 'health_check_path' to be a str")
        __self__.health_check_path = health_check_path
        """
        The path to check the health of the backend
        """
        if hostname and not isinstance(hostname, str):
            raise TypeError("Expected argument 'hostname' to be a str")
        __self__.hostname = hostname
        """
        The hostname of the Load Balancer
        """
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        The ID of the Load Balancer
        """
        if ignore_invalid_backend_tls and not isinstance(ignore_invalid_backend_tls, bool):
            raise TypeError("Expected argument 'ignore_invalid_backend_tls' to be a bool")
        __self__.ignore_invalid_backend_tls = ignore_invalid_backend_tls
        """
        Should self-signed/invalid certificates be ignored from the backend servers
        """
        if max_conns and not isinstance(max_conns, float):
            raise TypeError("Expected argument 'max_conns' to be a float")
        __self__.max_conns = max_conns
        """
        How many concurrent connections can each backend handle
        """
        if max_request_size and not isinstance(max_request_size, float):
            raise TypeError("Expected argument 'max_request_size' to be a float")
        __self__.max_request_size = max_request_size
        """
        The max request size set in the configuration
        """
        if policy and not isinstance(policy, str):
            raise TypeError("Expected argument 'policy' to be a str")
        __self__.policy = policy
        """
        The policy set in the Load Balancer
        """
        if port and not isinstance(port, float):
            raise TypeError("Expected argument 'port' to be a float")
        __self__.port = port
        """
        The port set in the configuration.
        """
        if protocol and not isinstance(protocol, str):
            raise TypeError("Expected argument 'protocol' to be a str")
        __self__.protocol = protocol
        """
        The protocol used in the configuration.
        """
        if tls_certificate and not isinstance(tls_certificate, str):
            raise TypeError("Expected argument 'tls_certificate' to be a str")
        __self__.tls_certificate = tls_certificate
        """
        If is set will be returned
        """
        if tls_key and not isinstance(tls_key, str):
            raise TypeError("Expected argument 'tls_key' to be a str")
        __self__.tls_key = tls_key
        """
        If is set will be returned
        """


class AwaitableGetLoadBalancerResult(GetLoadBalancerResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetLoadBalancerResult(
            backends=self.backends,
            fail_timeout=self.fail_timeout,
            health_check_path=self.health_check_path,
            hostname=self.hostname,
            id=self.id,
            ignore_invalid_backend_tls=self.ignore_invalid_backend_tls,
            max_conns=self.max_conns,
            max_request_size=self.max_request_size,
            policy=self.policy,
            port=self.port,
            protocol=self.protocol,
            tls_certificate=self.tls_certificate,
            tls_key=self.tls_key)


def get_load_balancer(hostname=None, id=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str hostname: The hostname of the Load Balancer.
    :param str id: The ID of the Load Balancer.
    """
    __args__ = dict()
    __args__['hostname'] = hostname
    __args__['id'] = id
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('civo:index/getLoadBalancer:getLoadBalancer', __args__, opts=opts).value

    return AwaitableGetLoadBalancerResult(
        backends=__ret__.get('backends'),
        fail_timeout=__ret__.get('failTimeout'),
        health_check_path=__ret__.get('healthCheckPath'),
        hostname=__ret__.get('hostname'),
        id=__ret__.get('id'),
        ignore_invalid_backend_tls=__ret__.get('ignoreInvalidBackendTls'),
        max_conns=__ret__.get('maxConns'),
        max_request_size=__ret__.get('maxRequestSize'),
        policy=__ret__.get('policy'),
        port=__ret__.get('port'),
        protocol=__ret__.get('protocol'),
        tls_certificate=__ret__.get('tlsCertificate'),
        tls_key=__ret__.get('tlsKey'))
