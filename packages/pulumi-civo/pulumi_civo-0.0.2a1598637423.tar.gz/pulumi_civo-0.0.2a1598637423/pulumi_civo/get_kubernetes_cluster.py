# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import _utilities, _tables


class GetKubernetesClusterResult:
    """
    A collection of values returned by getKubernetesCluster.
    """
    def __init__(__self__, api_endpoint=None, applications=None, built_at=None, created_at=None, dns_entry=None, id=None, installed_applications=None, instances=None, kubeconfig=None, kubernetes_version=None, master_ip=None, name=None, num_target_nodes=None, ready=None, status=None, tags=None, target_nodes_size=None):
        if api_endpoint and not isinstance(api_endpoint, str):
            raise TypeError("Expected argument 'api_endpoint' to be a str")
        __self__.api_endpoint = api_endpoint
        """
        The base URL of the API server on the Kubernetes master node.
        """
        if applications and not isinstance(applications, str):
            raise TypeError("Expected argument 'applications' to be a str")
        __self__.applications = applications
        """
        A list of application installed.
        """
        if built_at and not isinstance(built_at, str):
            raise TypeError("Expected argument 'built_at' to be a str")
        __self__.built_at = built_at
        """
        The date where the Kubernetes cluster was build.
        """
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        __self__.created_at = created_at
        """
        The date where the Kubernetes cluster was create.
        """
        if dns_entry and not isinstance(dns_entry, str):
            raise TypeError("Expected argument 'dns_entry' to be a str")
        __self__.dns_entry = dns_entry
        """
        The unique dns entry for the cluster in this case point to the master.
        """
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        A unique ID that can be used to identify and reference a Kubernetes cluster.
        """
        if installed_applications and not isinstance(installed_applications, list):
            raise TypeError("Expected argument 'installed_applications' to be a list")
        __self__.installed_applications = installed_applications
        """
        A unique ID that can be used to identify and reference a Kubernetes cluster.
        """
        if instances and not isinstance(instances, list):
            raise TypeError("Expected argument 'instances' to be a list")
        __self__.instances = instances
        """
        In addition to the arguments provided, these additional attributes about the cluster's default node instance are exported.
        """
        if kubeconfig and not isinstance(kubeconfig, str):
            raise TypeError("Expected argument 'kubeconfig' to be a str")
        __self__.kubeconfig = kubeconfig
        """
        A representation of the Kubernetes cluster's kubeconfig in yaml format.
        """
        if kubernetes_version and not isinstance(kubernetes_version, str):
            raise TypeError("Expected argument 'kubernetes_version' to be a str")
        __self__.kubernetes_version = kubernetes_version
        """
        The version of Kubernetes.
        """
        if master_ip and not isinstance(master_ip, str):
            raise TypeError("Expected argument 'master_ip' to be a str")
        __self__.master_ip = master_ip
        """
        The Ip of the Kubernetes master node.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        The name of your cluster,.
        """
        if num_target_nodes and not isinstance(num_target_nodes, float):
            raise TypeError("Expected argument 'num_target_nodes' to be a float")
        __self__.num_target_nodes = num_target_nodes
        """
        The size of the Kubernetes cluster.
        """
        if ready and not isinstance(ready, bool):
            raise TypeError("Expected argument 'ready' to be a bool")
        __self__.ready = ready
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        __self__.status = status
        """
        The status of Kubernetes cluster.
        * `ready` -If the Kubernetes cluster is ready.
        """
        if tags and not isinstance(tags, str):
            raise TypeError("Expected argument 'tags' to be a str")
        __self__.tags = tags
        """
        The tag of the instances
        """
        if target_nodes_size and not isinstance(target_nodes_size, str):
            raise TypeError("Expected argument 'target_nodes_size' to be a str")
        __self__.target_nodes_size = target_nodes_size
        """
        The size of each node.
        """


class AwaitableGetKubernetesClusterResult(GetKubernetesClusterResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetKubernetesClusterResult(
            api_endpoint=self.api_endpoint,
            applications=self.applications,
            built_at=self.built_at,
            created_at=self.created_at,
            dns_entry=self.dns_entry,
            id=self.id,
            installed_applications=self.installed_applications,
            instances=self.instances,
            kubeconfig=self.kubeconfig,
            kubernetes_version=self.kubernetes_version,
            master_ip=self.master_ip,
            name=self.name,
            num_target_nodes=self.num_target_nodes,
            ready=self.ready,
            status=self.status,
            tags=self.tags,
            target_nodes_size=self.target_nodes_size)


def get_kubernetes_cluster(id=None, name=None, opts=None):
    """
    Provides a Civo Kubernetes cluster data source.

    **Note:** This data source returns a single kubernetes cluster. When specifying a `name`, an
    error is triggered if more than one kubernetes Cluster is found.

    ## Example Usage

    Get the Kubernetes Cluster by name:

    ```python
    import pulumi
    import pulumi_civo as civo

    my_cluster = civo.get_kubernetes_cluster(name="my-super-cluster")
    pulumi.export("kubernetesClusterOutput", my_cluster.master_ip)
    ```

    Get the Kubernetes Cluster by id:

    ```python
    import pulumi
    import pulumi_civo as civo

    my_cluster = civo.get_kubernetes_cluster(name="40ac97ee-b82b-4231-9b60-079c7e2e5d79")
    ```


    :param str id: The ID of the kubernetes Cluster
    :param str name: The name of the kubernetes Cluster.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('civo:index/getKubernetesCluster:getKubernetesCluster', __args__, opts=opts).value

    return AwaitableGetKubernetesClusterResult(
        api_endpoint=__ret__.get('apiEndpoint'),
        applications=__ret__.get('applications'),
        built_at=__ret__.get('builtAt'),
        created_at=__ret__.get('createdAt'),
        dns_entry=__ret__.get('dnsEntry'),
        id=__ret__.get('id'),
        installed_applications=__ret__.get('installedApplications'),
        instances=__ret__.get('instances'),
        kubeconfig=__ret__.get('kubeconfig'),
        kubernetes_version=__ret__.get('kubernetesVersion'),
        master_ip=__ret__.get('masterIp'),
        name=__ret__.get('name'),
        num_target_nodes=__ret__.get('numTargetNodes'),
        ready=__ret__.get('ready'),
        status=__ret__.get('status'),
        tags=__ret__.get('tags'),
        target_nodes_size=__ret__.get('targetNodesSize'))
