# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import _utilities, _tables


class GetKubernetesVersionResult:
    """
    A collection of values returned by getKubernetesVersion.
    """
    def __init__(__self__, filters=None, id=None, sorts=None, versions=None):
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        __self__.filters = filters
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        The provider-assigned unique ID for this managed resource.
        """
        if sorts and not isinstance(sorts, list):
            raise TypeError("Expected argument 'sorts' to be a list")
        __self__.sorts = sorts
        if versions and not isinstance(versions, list):
            raise TypeError("Expected argument 'versions' to be a list")
        __self__.versions = versions


class AwaitableGetKubernetesVersionResult(GetKubernetesVersionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetKubernetesVersionResult(
            filters=self.filters,
            id=self.id,
            sorts=self.sorts,
            versions=self.versions)


def get_kubernetes_version(filters=None, sorts=None, opts=None):
    """
    Provides access to the available Civo Kubernetes Service versions, with the ability to filter the results.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_civo as civo

    stable = civo.get_kubernetes_version(filters=[{
        "key": "type",
        "values": ["stable"],
    }])
    ```
    ### Pin a Kubernetes cluster to a specific minor version

    ```python
    import pulumi
    import pulumi_civo as civo

    minor_version = civo.get_kubernetes_version(filters=[{
        "key": "version",
        "values": ["0.9.1"],
    }])
    ```


    :param list filters: Filter the results.
           The `filter` block is documented below.
    :param list sorts: Sort the results.
           The `sort` block is documented below.

    The **filters** object supports the following:

      * `key` (`str`) - Filter the sizes by this key. This may be one of `version`,
        `label`, `type`, `default`.
      * `values` (`list`) - Only retrieves the version which keys has value that matches
        one of the values provided here.

    The **sorts** object supports the following:

      * `direction` (`str`) - The sort direction. This may be either `asc` or `desc`.
      * `key` (`str`) - Sort the sizes by this key. This may be one of `version`.
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['sorts'] = sorts
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('civo:index/getKubernetesVersion:getKubernetesVersion', __args__, opts=opts).value

    return AwaitableGetKubernetesVersionResult(
        filters=__ret__.get('filters'),
        id=__ret__.get('id'),
        sorts=__ret__.get('sorts'),
        versions=__ret__.get('versions'))
