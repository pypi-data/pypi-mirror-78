# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import _utilities, _tables


class GetInstanceResult:
    """
    A collection of values returned by getInstance.
    """
    def __init__(__self__, cpu_cores=None, created_at=None, disk_gb=None, firewall_id=None, hostname=None, id=None, initial_password=None, initial_user=None, network_id=None, notes=None, private_ip=None, pseudo_ip=None, public_ip=None, ram_mb=None, reverse_dns=None, script=None, size=None, sshkey_id=None, status=None, tags=None, template=None):
        if cpu_cores and not isinstance(cpu_cores, float):
            raise TypeError("Expected argument 'cpu_cores' to be a float")
        __self__.cpu_cores = cpu_cores
        """
        Total cpu of the inatance.
        """
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        __self__.created_at = created_at
        """
        The date of creation of the instance
        """
        if disk_gb and not isinstance(disk_gb, float):
            raise TypeError("Expected argument 'disk_gb' to be a float")
        __self__.disk_gb = disk_gb
        """
        The size of the disk.
        """
        if firewall_id and not isinstance(firewall_id, str):
            raise TypeError("Expected argument 'firewall_id' to be a str")
        __self__.firewall_id = firewall_id
        """
        The ID of the firewall used.
        """
        if hostname and not isinstance(hostname, str):
            raise TypeError("Expected argument 'hostname' to be a str")
        __self__.hostname = hostname
        """
        The Instance hostname.
        """
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        The ID of the Instance.
        """
        if initial_password and not isinstance(initial_password, str):
            raise TypeError("Expected argument 'initial_password' to be a str")
        __self__.initial_password = initial_password
        """
        Instance initial password
        """
        if initial_user and not isinstance(initial_user, str):
            raise TypeError("Expected argument 'initial_user' to be a str")
        __self__.initial_user = initial_user
        """
        The name of the initial user created on the server.
        """
        if network_id and not isinstance(network_id, str):
            raise TypeError("Expected argument 'network_id' to be a str")
        __self__.network_id = network_id
        """
        This will be the ID of the network.
        """
        if notes and not isinstance(notes, str):
            raise TypeError("Expected argument 'notes' to be a str")
        __self__.notes = notes
        """
        The notes of the instance.
        """
        if private_ip and not isinstance(private_ip, str):
            raise TypeError("Expected argument 'private_ip' to be a str")
        __self__.private_ip = private_ip
        """
        The private ip.
        """
        if pseudo_ip and not isinstance(pseudo_ip, str):
            raise TypeError("Expected argument 'pseudo_ip' to be a str")
        __self__.pseudo_ip = pseudo_ip
        """
        Is the ip that is used to route the public ip from the internet to the instance using NAT
        """
        if public_ip and not isinstance(public_ip, str):
            raise TypeError("Expected argument 'public_ip' to be a str")
        __self__.public_ip = public_ip
        """
        The public ip.
        """
        if ram_mb and not isinstance(ram_mb, float):
            raise TypeError("Expected argument 'ram_mb' to be a float")
        __self__.ram_mb = ram_mb
        """
        Total ram of the instance.
        """
        if reverse_dns and not isinstance(reverse_dns, str):
            raise TypeError("Expected argument 'reverse_dns' to be a str")
        __self__.reverse_dns = reverse_dns
        """
        A fully qualified domain name.
        """
        if script and not isinstance(script, str):
            raise TypeError("Expected argument 'script' to be a str")
        __self__.script = script
        """
        the contents of a script uploaded
        """
        if size and not isinstance(size, str):
            raise TypeError("Expected argument 'size' to be a str")
        __self__.size = size
        """
        The name of the size.
        """
        if sshkey_id and not isinstance(sshkey_id, str):
            raise TypeError("Expected argument 'sshkey_id' to be a str")
        __self__.sshkey_id = sshkey_id
        """
        The ID SSH.
        """
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        __self__.status = status
        """
        The status of the instance
        """
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        __self__.tags = tags
        """
        An optional list of tags
        """
        if template and not isinstance(template, str):
            raise TypeError("Expected argument 'template' to be a str")
        __self__.template = template
        """
        The ID for the template to used to build the instance.
        """


class AwaitableGetInstanceResult(GetInstanceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInstanceResult(
            cpu_cores=self.cpu_cores,
            created_at=self.created_at,
            disk_gb=self.disk_gb,
            firewall_id=self.firewall_id,
            hostname=self.hostname,
            id=self.id,
            initial_password=self.initial_password,
            initial_user=self.initial_user,
            network_id=self.network_id,
            notes=self.notes,
            private_ip=self.private_ip,
            pseudo_ip=self.pseudo_ip,
            public_ip=self.public_ip,
            ram_mb=self.ram_mb,
            reverse_dns=self.reverse_dns,
            script=self.script,
            size=self.size,
            sshkey_id=self.sshkey_id,
            status=self.status,
            tags=self.tags,
            template=self.template)


def get_instance(hostname=None, id=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str hostname: The hostname of the Instance.
    :param str id: The ID of the Instance
    """
    __args__ = dict()
    __args__['hostname'] = hostname
    __args__['id'] = id
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('civo:index/getInstance:getInstance', __args__, opts=opts).value

    return AwaitableGetInstanceResult(
        cpu_cores=__ret__.get('cpuCores'),
        created_at=__ret__.get('createdAt'),
        disk_gb=__ret__.get('diskGb'),
        firewall_id=__ret__.get('firewallId'),
        hostname=__ret__.get('hostname'),
        id=__ret__.get('id'),
        initial_password=__ret__.get('initialPassword'),
        initial_user=__ret__.get('initialUser'),
        network_id=__ret__.get('networkId'),
        notes=__ret__.get('notes'),
        private_ip=__ret__.get('privateIp'),
        pseudo_ip=__ret__.get('pseudoIp'),
        public_ip=__ret__.get('publicIp'),
        ram_mb=__ret__.get('ramMb'),
        reverse_dns=__ret__.get('reverseDns'),
        script=__ret__.get('script'),
        size=__ret__.get('size'),
        sshkey_id=__ret__.get('sshkeyId'),
        status=__ret__.get('status'),
        tags=__ret__.get('tags'),
        template=__ret__.get('template'))
