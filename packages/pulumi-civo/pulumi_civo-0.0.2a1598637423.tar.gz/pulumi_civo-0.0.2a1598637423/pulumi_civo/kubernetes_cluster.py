# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import _utilities, _tables


class KubernetesCluster(pulumi.CustomResource):
    api_endpoint: pulumi.Output[str]
    """
    The base URL of the API server on the Kubernetes master node.
    """
    applications: pulumi.Output[str]
    """
    A comma separated list of applications to install. Spaces within application names are fine, but shouldn't be either side of the comma. If you want to remove a default installed application, prefix it with a '-', e.g. -traefik
    """
    built_at: pulumi.Output[str]
    """
    The date where the Kubernetes cluster was build.
    """
    created_at: pulumi.Output[str]
    """
    The date where the Kubernetes cluster was create.
    """
    dns_entry: pulumi.Output[str]
    """
    The unique dns entry for the cluster in this case point to the master.
    """
    installed_applications: pulumi.Output[list]
    """
    A unique ID that can be used to identify and reference a Kubernetes cluster.

      * `application` (`str`) - The name of the application
      * `category` (`str`) - The category of the application
      * `installed` (`bool`) - if installed or not
      * `version` (`str`) - The version of the application
    """
    instances: pulumi.Output[list]
    """
    In addition to the arguments provided, these additional attributes about the cluster's default node instance are exported.

      * `cpu_cores` (`float`) - Total cpu of the inatance.
      * `created_at` (`str`) - The date where the Kubernetes cluster was create.
      * `disk_gb` (`float`) - The size of the disk.
      * `firewall_id` (`str`) - The firewall id assigned to the instance
      * `hostname` (`str`) - The hostname of the instance.
      * `public_ip` (`str`) - The public ip of the instances, only available if the instances is the master
      * `ram_mb` (`float`) - Total ram of the instance.
      * `region` (`str`) - The region where instance are.
      * `size` (`str`) - The size of the instance.
      * `status` (`str`) - The status of Kubernetes cluster.
        * `ready` -If the Kubernetes cluster is ready.
      * `tags` (`list`) - A space separated list of tags, to be used freely as required.
    """
    kubeconfig: pulumi.Output[str]
    """
    A representation of the Kubernetes cluster's kubeconfig in yaml format.
    """
    kubernetes_version: pulumi.Output[str]
    """
    The version of k3s to install (optional, the default is currently the latest available).
    """
    master_ip: pulumi.Output[str]
    """
    The Ip of the Kubernetes master node.
    """
    name: pulumi.Output[str]
    """
    A name for the Kubernetes cluster.
    """
    num_target_nodes: pulumi.Output[float]
    """
    The number of instances to create (optional, the default at the time of writing is 3).
    """
    ready: pulumi.Output[bool]
    status: pulumi.Output[str]
    """
    The status of Kubernetes cluster.
    * `ready` -If the Kubernetes cluster is ready.
    """
    tags: pulumi.Output[str]
    """
    A space separated list of tags, to be used freely as required.
    """
    target_nodes_size: pulumi.Output[str]
    """
    The size of each node (optional, the default is currently g2.small)
    """
    def __init__(__self__, resource_name, opts=None, applications=None, kubernetes_version=None, name=None, num_target_nodes=None, tags=None, target_nodes_size=None, __props__=None, __name__=None, __opts__=None):
        """
        Create a KubernetesCluster resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] applications: A comma separated list of applications to install. Spaces within application names are fine, but shouldn't be either side of the comma. If you want to remove a default installed application, prefix it with a '-', e.g. -traefik
        :param pulumi.Input[str] kubernetes_version: The version of k3s to install (optional, the default is currently the latest available).
        :param pulumi.Input[str] name: A name for the Kubernetes cluster.
        :param pulumi.Input[float] num_target_nodes: The number of instances to create (optional, the default at the time of writing is 3).
        :param pulumi.Input[str] tags: A space separated list of tags, to be used freely as required.
        :param pulumi.Input[str] target_nodes_size: The size of each node (optional, the default is currently g2.small)
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['applications'] = applications
            __props__['kubernetes_version'] = kubernetes_version
            __props__['name'] = name
            __props__['num_target_nodes'] = num_target_nodes
            __props__['tags'] = tags
            __props__['target_nodes_size'] = target_nodes_size
            __props__['api_endpoint'] = None
            __props__['built_at'] = None
            __props__['created_at'] = None
            __props__['dns_entry'] = None
            __props__['installed_applications'] = None
            __props__['instances'] = None
            __props__['kubeconfig'] = None
            __props__['master_ip'] = None
            __props__['ready'] = None
            __props__['status'] = None
        super(KubernetesCluster, __self__).__init__(
            'civo:index/kubernetesCluster:KubernetesCluster',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, api_endpoint=None, applications=None, built_at=None, created_at=None, dns_entry=None, installed_applications=None, instances=None, kubeconfig=None, kubernetes_version=None, master_ip=None, name=None, num_target_nodes=None, ready=None, status=None, tags=None, target_nodes_size=None):
        """
        Get an existing KubernetesCluster resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] api_endpoint: The base URL of the API server on the Kubernetes master node.
        :param pulumi.Input[str] applications: A comma separated list of applications to install. Spaces within application names are fine, but shouldn't be either side of the comma. If you want to remove a default installed application, prefix it with a '-', e.g. -traefik
        :param pulumi.Input[str] built_at: The date where the Kubernetes cluster was build.
        :param pulumi.Input[str] created_at: The date where the Kubernetes cluster was create.
        :param pulumi.Input[str] dns_entry: The unique dns entry for the cluster in this case point to the master.
        :param pulumi.Input[list] installed_applications: A unique ID that can be used to identify and reference a Kubernetes cluster.
        :param pulumi.Input[list] instances: In addition to the arguments provided, these additional attributes about the cluster's default node instance are exported.
        :param pulumi.Input[str] kubeconfig: A representation of the Kubernetes cluster's kubeconfig in yaml format.
        :param pulumi.Input[str] kubernetes_version: The version of k3s to install (optional, the default is currently the latest available).
        :param pulumi.Input[str] master_ip: The Ip of the Kubernetes master node.
        :param pulumi.Input[str] name: A name for the Kubernetes cluster.
        :param pulumi.Input[float] num_target_nodes: The number of instances to create (optional, the default at the time of writing is 3).
        :param pulumi.Input[str] status: The status of Kubernetes cluster.
               * `ready` -If the Kubernetes cluster is ready.
        :param pulumi.Input[str] tags: A space separated list of tags, to be used freely as required.
        :param pulumi.Input[str] target_nodes_size: The size of each node (optional, the default is currently g2.small)

        The **installed_applications** object supports the following:

          * `application` (`pulumi.Input[str]`) - The name of the application
          * `category` (`pulumi.Input[str]`) - The category of the application
          * `installed` (`pulumi.Input[bool]`) - if installed or not
          * `version` (`pulumi.Input[str]`) - The version of the application

        The **instances** object supports the following:

          * `cpu_cores` (`pulumi.Input[float]`) - Total cpu of the inatance.
          * `created_at` (`pulumi.Input[str]`) - The date where the Kubernetes cluster was create.
          * `disk_gb` (`pulumi.Input[float]`) - The size of the disk.
          * `firewall_id` (`pulumi.Input[str]`) - The firewall id assigned to the instance
          * `hostname` (`pulumi.Input[str]`) - The hostname of the instance.
          * `public_ip` (`pulumi.Input[str]`) - The public ip of the instances, only available if the instances is the master
          * `ram_mb` (`pulumi.Input[float]`) - Total ram of the instance.
          * `region` (`pulumi.Input[str]`) - The region where instance are.
          * `size` (`pulumi.Input[str]`) - The size of the instance.
          * `status` (`pulumi.Input[str]`) - The status of Kubernetes cluster.
            * `ready` -If the Kubernetes cluster is ready.
          * `tags` (`pulumi.Input[list]`) - A space separated list of tags, to be used freely as required.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["api_endpoint"] = api_endpoint
        __props__["applications"] = applications
        __props__["built_at"] = built_at
        __props__["created_at"] = created_at
        __props__["dns_entry"] = dns_entry
        __props__["installed_applications"] = installed_applications
        __props__["instances"] = instances
        __props__["kubeconfig"] = kubeconfig
        __props__["kubernetes_version"] = kubernetes_version
        __props__["master_ip"] = master_ip
        __props__["name"] = name
        __props__["num_target_nodes"] = num_target_nodes
        __props__["ready"] = ready
        __props__["status"] = status
        __props__["tags"] = tags
        __props__["target_nodes_size"] = target_nodes_size
        return KubernetesCluster(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
