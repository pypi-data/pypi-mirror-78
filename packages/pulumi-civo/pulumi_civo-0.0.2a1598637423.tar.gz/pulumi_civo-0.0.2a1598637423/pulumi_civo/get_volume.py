# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import _utilities, _tables


class GetVolumeResult:
    """
    A collection of values returned by getVolume.
    """
    def __init__(__self__, bootable=None, created_at=None, id=None, mount_point=None, name=None, size_gb=None):
        if bootable and not isinstance(bootable, bool):
            raise TypeError("Expected argument 'bootable' to be a bool")
        __self__.bootable = bootable
        """
        if is bootable or not.
        """
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        __self__.created_at = created_at
        """
        The date of the creation of the volume.
        """
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        The unique identifier for the volume.
        """
        if mount_point and not isinstance(mount_point, str):
            raise TypeError("Expected argument 'mount_point' to be a str")
        __self__.mount_point = mount_point
        """
        The mount point of the volume.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Name of the volume.
        """
        if size_gb and not isinstance(size_gb, float):
            raise TypeError("Expected argument 'size_gb' to be a float")
        __self__.size_gb = size_gb
        """
        The size of the volume.
        """


class AwaitableGetVolumeResult(GetVolumeResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVolumeResult(
            bootable=self.bootable,
            created_at=self.created_at,
            id=self.id,
            mount_point=self.mount_point,
            name=self.name,
            size_gb=self.size_gb)


def get_volume(id=None, name=None, opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str id: The unique identifier for the volume.
    :param str name: The name of the volume.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('civo:index/getVolume:getVolume', __args__, opts=opts).value

    return AwaitableGetVolumeResult(
        bootable=__ret__.get('bootable'),
        created_at=__ret__.get('createdAt'),
        id=__ret__.get('id'),
        mount_point=__ret__.get('mountPoint'),
        name=__ret__.get('name'),
        size_gb=__ret__.get('sizeGb'))
