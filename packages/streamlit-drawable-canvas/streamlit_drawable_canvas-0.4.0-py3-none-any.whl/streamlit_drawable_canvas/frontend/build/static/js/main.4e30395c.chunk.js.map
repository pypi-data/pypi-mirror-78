{"version":3,"sources":["lib/fabrictool.ts","lib/circle.ts","lib/freedraw.ts","lib/line.ts","lib/rect.ts","lib/transform.ts","DrawableCanvas.tsx","index.tsx"],"names":["FabricTool","canvas","_canvas","this","CircleTool","isMouseDown","fillColor","strokeWidth","strokeColor","currentCircle","fabric","Circle","currentStartX","currentStartY","linearDistance","point1","point2","xs","x","ys","y","Math","sqrt","args","isDrawingMode","selection","forEachObject","o","selectable","evented","on","e","onMouseDown","onMouseMove","onMouseUp","onMouseOut","off","pointer","getPointer","left","top","originX","originY","stroke","fill","radius","add","set","angle","atan2","PI","setCoords","renderAll","FreedrawTool","freeDrawingBrush","width","color","LineTool","currentLine","Line","points","x2","y2","RectTool","currentRect","Rect","height","transparentCorners","strokeUniform","noScaleCache","abs","TransformTool","handleDoubleClick","remove","getActiveObject","sendDataToStreamlit","imageData","getContext","getImageData","getWidth","getHeight","data","Array","from","Streamlit","setComponentValue","raw","toObject","withStreamlitConnection","canvasWidth","canvasHeight","backgroundColor","backgroundImage","updateStreamlit","drawingMode","useState","Canvas","setCanvas","StaticCanvas","backgroundCanvas","setBackgroundCanvas","useEffect","c","enableRetinaScaling","imgC","setFrameHeight","setBackgroundColor","createImageData","putImageData","cleanupToolEvents","circle","freedraw","line","rect","transform","configureCanvas","handleSendToStreamlit","eventsSendToStreamlit","forEach","event","style","position","zIndex","id","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4e30395c.chunk.js","sourcesContent":["import { PythonArgs } from \"../DrawableCanvas\"\r\nimport { fabric } from \"fabric\"\r\n\r\n/**\r\n * Base class for any fabric tool that configures and draws on canvas\r\n */\r\nabstract class FabricTool {\r\n  protected _canvas: fabric.Canvas\r\n\r\n  /**\r\n   * Pass Fabric canvas by reference so tools can configure it\r\n   */\r\n  constructor(canvas: fabric.Canvas) {\r\n    this._canvas = canvas\r\n  }\r\n\r\n  /**\r\n   * Configure canvas and return a callback to clean eventListeners\r\n   * @param args\r\n   */\r\n  abstract configureCanvas(args: PythonArgs): () => void\r\n}\r\n\r\nexport default FabricTool\r\n","import { fabric } from \"fabric\"\r\nimport { PythonArgs } from \"../DrawableCanvas\"\r\nimport FabricTool from \"./fabrictool\"\r\n\r\nclass CircleTool extends FabricTool {\r\n  isMouseDown: boolean = false\r\n  fillColor: string = \"#ffffff\"\r\n  strokeWidth: number = 10\r\n  strokeColor: string = \"#ffffff\"\r\n  currentCircle: fabric.Circle = new fabric.Circle()\r\n  currentStartX: number = 0\r\n  currentStartY: number = 0\r\n\r\n  configureCanvas(args: PythonArgs): () => void {\r\n    this._canvas.isDrawingMode = false\r\n    this._canvas.selection = false\r\n    this._canvas.forEachObject((o) => (o.selectable = o.evented = false))\r\n\r\n    const { strokeWidth, strokeColor, fillColor } = args\r\n    this.strokeWidth = strokeWidth\r\n    this.strokeColor = strokeColor\r\n    this.fillColor = fillColor\r\n\r\n    this._canvas.on(\"mouse:down\", (e: any) => this.onMouseDown(e))\r\n    this._canvas.on(\"mouse:move\", (e: any) => this.onMouseMove(e))\r\n    this._canvas.on(\"mouse:up\", (e: any) => this.onMouseUp(e))\r\n    this._canvas.on(\"mouse:out\", (e: any) => this.onMouseOut(e))\r\n    return () => {\r\n      this._canvas.off(\"mouse:down\")\r\n      this._canvas.off(\"mouse:move\")\r\n      this._canvas.off(\"mouse:up\")\r\n      this._canvas.off(\"mouse:out\")\r\n    }\r\n  }\r\n\r\n  onMouseDown(o: any) {\r\n    let canvas = this._canvas\r\n    this.isMouseDown = true\r\n    let pointer = canvas.getPointer(o.e)\r\n    this.currentStartX = pointer.x\r\n    this.currentStartY = pointer.y\r\n    this.currentCircle = new fabric.Circle({\r\n      left: this.currentStartX,\r\n      top: this.currentStartY,\r\n      originX: \"left\",\r\n      originY: \"center\",\r\n      strokeWidth: this.strokeWidth,\r\n      stroke: this.strokeColor,\r\n      fill: this.fillColor,\r\n      selectable: false,\r\n      evented: false,\r\n      radius: 1,\r\n    })\r\n    canvas.add(this.currentCircle)\r\n  }\r\n\r\n  onMouseMove(o: any) {\r\n    if (!this.isMouseDown) return\r\n    let canvas = this._canvas\r\n    let pointer = canvas.getPointer(o.e)\r\n    this.currentCircle.set({\r\n      radius:\r\n        this.linearDistance(\r\n          { x: this.currentStartX, y: this.currentStartY },\r\n          { x: pointer.x, y: pointer.y }\r\n        ) / 2,\r\n      angle:\r\n        (Math.atan2(\r\n          pointer.y - this.currentStartY,\r\n          pointer.x - this.currentStartX\r\n        ) *\r\n          180) /\r\n        Math.PI,\r\n    })\r\n    this.currentCircle.setCoords()\r\n    canvas.renderAll()\r\n  }\r\n\r\n  onMouseUp(o: any) {\r\n    this.isMouseDown = false\r\n  }\r\n\r\n  onMouseOut(o: any) {\r\n    this.isMouseDown = false\r\n  }\r\n\r\n  /**\r\n   * Calculate the distance of two x,y points\r\n   *\r\n   * @param point1 an object with x,y attributes representing the start point\r\n   * @param point2 an object with x,y attributes representing the end point\r\n   *\r\n   * @returns {number}\r\n   */\r\n  linearDistance = (point1: any, point2: any) => {\r\n    let xs = point2.x - point1.x\r\n    let ys = point2.y - point1.y\r\n    return Math.sqrt(xs * xs + ys * ys)\r\n  }\r\n}\r\n\r\nexport default CircleTool\r\n","import { PythonArgs } from \"../DrawableCanvas\"\r\nimport FabricTool from \"./fabrictool\"\r\n\r\nclass FreedrawTool extends FabricTool {\r\n  configureCanvas(args: PythonArgs): () => void {\r\n    const { strokeWidth, strokeColor } = args\r\n    this._canvas.isDrawingMode = true\r\n    this._canvas.freeDrawingBrush.width = strokeWidth\r\n    this._canvas.freeDrawingBrush.color = strokeColor\r\n    return () => {}\r\n  }\r\n}\r\n\r\nexport default FreedrawTool\r\n","import { fabric } from \"fabric\"\r\nimport { PythonArgs } from \"../DrawableCanvas\"\r\nimport FabricTool from \"./fabrictool\"\r\n\r\nclass LineTool extends FabricTool {\r\n  isMouseDown: boolean = false\r\n  strokeWidth: number = 10\r\n  strokeColor: string = \"#ffffff\"\r\n  currentLine: fabric.Line = new fabric.Line()\r\n\r\n  configureCanvas(args: PythonArgs): () => void {\r\n    this._canvas.isDrawingMode = false\r\n    this._canvas.selection = false\r\n    this._canvas.forEachObject((o) => (o.selectable = o.evented = false))\r\n\r\n    const { strokeWidth, strokeColor } = args\r\n    this.strokeWidth = strokeWidth\r\n    this.strokeColor = strokeColor\r\n\r\n    this._canvas.on(\"mouse:down\", (e: any) => this.onMouseDown(e))\r\n    this._canvas.on(\"mouse:move\", (e: any) => this.onMouseMove(e))\r\n    this._canvas.on(\"mouse:up\", (e: any) => this.onMouseUp(e))\r\n    this._canvas.on(\"mouse:out\", (e: any) => this.onMouseOut(e))\r\n    return () => {\r\n      this._canvas.off(\"mouse:down\")\r\n      this._canvas.off(\"mouse:move\")\r\n      this._canvas.off(\"mouse:up\")\r\n      this._canvas.off(\"mouse:out\")\r\n    }\r\n  }\r\n\r\n  onMouseDown(o: any) {\r\n    let canvas = this._canvas\r\n    this.isMouseDown = true\r\n    var pointer = canvas.getPointer(o.e)\r\n    var points = [pointer.x, pointer.y, pointer.x, pointer.y]\r\n    this.currentLine = new fabric.Line(points, {\r\n      strokeWidth: this.strokeWidth,\r\n      fill: this.strokeColor,\r\n      stroke: this.strokeColor,\r\n      originX: \"center\",\r\n      originY: \"center\",\r\n      selectable: false,\r\n      evented: false,\r\n    })\r\n    canvas.add(this.currentLine)\r\n  }\r\n\r\n  onMouseMove(o: any) {\r\n    if (!this.isMouseDown) return\r\n    let canvas = this._canvas\r\n    var pointer = canvas.getPointer(o.e)\r\n    this.currentLine.set({ x2: pointer.x, y2: pointer.y })\r\n    this.currentLine.setCoords()\r\n    canvas.renderAll()\r\n  }\r\n\r\n  onMouseUp(o: any) {\r\n    this.isMouseDown = false\r\n  }\r\n\r\n  onMouseOut(o: any) {\r\n    this.isMouseDown = false\r\n  }\r\n}\r\n\r\nexport default LineTool\r\n","import { fabric } from \"fabric\"\r\nimport { PythonArgs } from \"../DrawableCanvas\"\r\nimport FabricTool from \"./fabrictool\"\r\n\r\nclass RectTool extends FabricTool {\r\n  isMouseDown: boolean = false\r\n  fillColor: string = \"#ffffff\"\r\n  strokeWidth: number = 10\r\n  strokeColor: string = \"#ffffff\"\r\n  currentRect: fabric.Rect = new fabric.Rect()\r\n  currentStartX: number = 0\r\n  currentStartY: number = 0\r\n\r\n  configureCanvas(args: PythonArgs): () => void {\r\n    this._canvas.isDrawingMode = false\r\n    this._canvas.selection = false\r\n    this._canvas.forEachObject((o) => (o.selectable = o.evented = false))\r\n\r\n    const { strokeWidth, strokeColor, fillColor } = args\r\n    this.strokeWidth = strokeWidth\r\n    this.strokeColor = strokeColor\r\n    this.fillColor = fillColor\r\n\r\n    this._canvas.on(\"mouse:down\", (e: any) => this.onMouseDown(e))\r\n    this._canvas.on(\"mouse:move\", (e: any) => this.onMouseMove(e))\r\n    this._canvas.on(\"mouse:up\", (e: any) => this.onMouseUp(e))\r\n    this._canvas.on(\"mouse:out\", (e: any) => this.onMouseOut(e))\r\n    return () => {\r\n      this._canvas.off(\"mouse:down\")\r\n      this._canvas.off(\"mouse:move\")\r\n      this._canvas.off(\"mouse:up\")\r\n      this._canvas.off(\"mouse:out\")\r\n    }\r\n  }\r\n\r\n  onMouseDown(o: any) {\r\n    let canvas = this._canvas\r\n    this.isMouseDown = true\r\n    let pointer = canvas.getPointer(o.e)\r\n    this.currentStartX = pointer.x\r\n    this.currentStartY = pointer.y\r\n    this.currentRect = new fabric.Rect({\r\n      left: this.currentStartX,\r\n      top: this.currentStartY,\r\n      originX: \"left\",\r\n      originY: \"top\",\r\n      width: pointer.x - this.currentStartX,\r\n      height: pointer.y - this.currentStartY,\r\n      stroke: this.strokeColor,\r\n      strokeWidth: this.strokeWidth,\r\n      fill: this.fillColor,\r\n      transparentCorners: false,\r\n      selectable: false,\r\n      evented: false,\r\n      strokeUniform: true,\r\n      noScaleCache: false,\r\n      angle: 0,\r\n    })\r\n    canvas.add(this.currentRect)\r\n  }\r\n\r\n  onMouseMove(o: any) {\r\n    if (!this.isMouseDown) return\r\n    let canvas = this._canvas\r\n    let pointer = canvas.getPointer(o.e)\r\n    if (this.currentStartX > pointer.x) {\r\n      this.currentRect.set({ left: Math.abs(pointer.x) })\r\n    }\r\n    if (this.currentStartY > pointer.y) {\r\n      this.currentRect.set({ top: Math.abs(pointer.y) })\r\n    }\r\n    this.currentRect.set({ width: Math.abs(this.currentStartX - pointer.x) })\r\n    this.currentRect.set({ height: Math.abs(this.currentStartY - pointer.y) })\r\n    this.currentRect.setCoords()\r\n    canvas.renderAll()\r\n  }\r\n\r\n  onMouseUp(o: any) {\r\n    this.isMouseDown = false\r\n  }\r\n\r\n  onMouseOut(o: any) {\r\n    this.isMouseDown = false\r\n  }\r\n}\r\n\r\nexport default RectTool\r\n","import { PythonArgs } from \"../DrawableCanvas\"\r\nimport FabricTool from \"./fabrictool\"\r\n\r\nclass TransformTool extends FabricTool {\r\n  configureCanvas(args: PythonArgs): () => void {\r\n    let canvas = this._canvas\r\n    canvas.isDrawingMode = false\r\n    canvas.selection = true\r\n    canvas.forEachObject((o) => (o.selectable = o.evented = true))\r\n\r\n    // instead of looking for target of double click,\r\n    // assume double click on object clears the selected object\r\n    const handleDoubleClick = () => {\r\n      canvas.remove(canvas.getActiveObject())\r\n    }\r\n\r\n    canvas.on(\"mouse:dblclick\", handleDoubleClick)\r\n    return () => {\r\n      canvas.off(\"mouse:dblclick\", handleDoubleClick)\r\n    }\r\n  }\r\n}\r\n\r\nexport default TransformTool\r\n","import React, { useEffect, useState } from \"react\"\r\nimport {\r\n  ComponentProps,\r\n  Streamlit,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\"\r\nimport { fabric } from \"fabric\"\r\n\r\nimport CircleTool from \"./lib/circle\"\r\nimport FabricTool from \"./lib/fabrictool\"\r\nimport FreedrawTool from \"./lib/freedraw\"\r\nimport LineTool from \"./lib/line\"\r\nimport RectTool from \"./lib/rect\"\r\nimport TransformTool from \"./lib/transform\"\r\n\r\n/**\r\n * Arguments Streamlit receives from the Python side\r\n */\r\nexport interface PythonArgs {\r\n  fillColor: string\r\n  strokeWidth: number\r\n  strokeColor: string\r\n  backgroundColor: string\r\n  backgroundImage: Uint8ClampedArray\r\n  updateStreamlit: boolean\r\n  canvasWidth: number\r\n  canvasHeight: number\r\n  drawingMode: string\r\n}\r\n\r\ninterface Tools {\r\n  [key: string]: FabricTool\r\n}\r\n\r\n/**\r\n * Download image and JSON data from canvas to send back to Streamlit\r\n */\r\nexport function sendDataToStreamlit(canvas: fabric.Canvas): void {\r\n  canvas.renderAll()\r\n  const imageData = canvas\r\n    .getContext()\r\n    .getImageData(0, 0, canvas.getWidth(), canvas.getHeight())\r\n  const data = Array.from(imageData[\"data\"])\r\n  Streamlit.setComponentValue({\r\n    data: data,\r\n    width: imageData[\"width\"],\r\n    height: imageData[\"height\"],\r\n    raw: canvas.toObject(),\r\n  })\r\n}\r\n\r\n/**\r\n * Define logic for the canvas area\r\n */\r\nconst DrawableCanvas = ({ args }: ComponentProps) => {\r\n  const {\r\n    canvasWidth,\r\n    canvasHeight,\r\n    backgroundColor,\r\n    backgroundImage,\r\n    updateStreamlit,\r\n    drawingMode,\r\n  }: PythonArgs = args\r\n  const [canvas, setCanvas] = useState(new fabric.Canvas(\"\"))\r\n  const [backgroundCanvas, setBackgroundCanvas] = useState(\r\n    new fabric.StaticCanvas(\"\")\r\n  )\r\n\r\n  /**\r\n   * Initialize canvases on component mount\r\n   */\r\n  useEffect(() => {\r\n    const c = new fabric.Canvas(\"c\", {\r\n      enableRetinaScaling: false,\r\n    })\r\n    const imgC = new fabric.StaticCanvas(\"imgC\", {\r\n      enableRetinaScaling: false,\r\n    })\r\n    setCanvas(c)\r\n    setBackgroundCanvas(imgC)\r\n    Streamlit.setFrameHeight()\r\n  }, [canvasHeight, canvasWidth])\r\n\r\n  /**\r\n   * Update canvas with background and selected tool\r\n   * Then send back data to Streamlit\r\n   */\r\n  useEffect(() => {\r\n    if (!canvas) {\r\n      return\r\n    }\r\n\r\n    canvas.setBackgroundColor(backgroundColor, () => {\r\n      if (backgroundImage) {\r\n        const imageData = backgroundCanvas\r\n          .getContext()\r\n          .createImageData(canvasWidth, canvasHeight)\r\n        imageData.data.set(backgroundImage)\r\n        backgroundCanvas.getContext().putImageData(imageData, 0, 0)\r\n      }\r\n      sendDataToStreamlit(canvas) // send back in case update prop reran the effect\r\n    })\r\n    Streamlit.setFrameHeight()\r\n\r\n    // Update canvas events with selected tool\r\n    const tools: Tools = {\r\n      circle: new CircleTool(canvas),\r\n      freedraw: new FreedrawTool(canvas),\r\n      line: new LineTool(canvas),\r\n      rect: new RectTool(canvas),\r\n      transform: new TransformTool(canvas),\r\n    }\r\n    const selectedTool = tools[drawingMode]\r\n    const cleanupToolEvents = selectedTool.configureCanvas(args)\r\n\r\n    // Define events to send data back to Streamlit\r\n    const handleSendToStreamlit = () => {\r\n      sendDataToStreamlit(canvas)\r\n    }\r\n    const eventsSendToStreamlit = updateStreamlit\r\n      ? [\r\n          \"mouse:up\",\r\n          \"selection:cleared\",\r\n          \"selection:updated\",\r\n          \"object:removed\",\r\n          \"object:modified\",\r\n        ]\r\n      : []\r\n    eventsSendToStreamlit.forEach((event) =>\r\n      canvas.on(event, handleSendToStreamlit)\r\n    )\r\n\r\n    // Cleanup tool + send data to Streamlit events\r\n    return () => {\r\n      cleanupToolEvents()\r\n      eventsSendToStreamlit.forEach((event) =>\r\n        canvas.off(event, handleSendToStreamlit)\r\n      )\r\n    }\r\n  })\r\n\r\n  return (\r\n    <div style={{ position: \"relative\" }}>\r\n      <div\r\n        style={{\r\n          position: \"absolute\",\r\n          top: 0,\r\n          left: 0,\r\n          zIndex: 0,\r\n        }}\r\n      >\r\n        <canvas id=\"imgC\" width={canvasWidth} height={canvasHeight} />\r\n      </div>\r\n      <div\r\n        style={{\r\n          position: \"absolute\",\r\n          top: 0,\r\n          left: 0,\r\n          zIndex: 10,\r\n        }}\r\n      >\r\n        <canvas id=\"c\" width={canvasWidth} height={canvasHeight} />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default withStreamlitConnection(DrawableCanvas)\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport DrawableCanvas from \"./DrawableCanvas\"\r\n\r\nimport \"./index.css\"\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <DrawableCanvas />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)\r\n"],"sourceRoot":""}