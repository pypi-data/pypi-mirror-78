"""Autogenerated API"""
import logging
from argus_cli.plugin import register_command
from argus_plugins import argus_cli_module

log = logging.getLogger(__name__)


@register_command(
    extending=("componentadmin", "v1", "invoke"),
    module=argus_cli_module
)
def call(
    arguments: dict = None,
    method: str = None,
    pattern: dict = None,
    type: str = None,
    json: bool = True,
    verify: bool = True,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
  ) -> dict:
    """Invoke operation (INTERNAL)
    
    :param list arguments: 
    :param str method: 
    :param dict pattern: 
    :param str type: 
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises RemoteInvocationFailedException: on 409
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """
    from os import getenv
    from requests import put
    from argus_api._validators import validate_http_response
    
    from argus_cli.settings import settings
    
    url = "{}/componentadmin/v1/invoke".format(
        server_url or settings["api"]["api_url"],
        
    )
    headers = {
        'User-Agent': 'ArgusToolbelt/',
        'content': 'application/json'
    }

    if not apiKey and "api_key" in settings["api"]:
        apiKey = settings["api"]["api_key"]

    if apiKey:
        headers["Argus-API-Key"] = apiKey
    elif authentication and isinstance(authentication, dict):
        headers.update(authentication)
    elif callable(authentication):
        headers.update(authentication(url))

    body = {}
    # Only send arguments if the argument was provided, dont send null values
    if arguments is not None:
        body.update({"arguments": arguments})
    # Only send method if the argument was provided, dont send null values
    if method is not None:
        body.update({"method": method})
    # Only send pattern if the argument was provided, dont send null values
    if pattern is not None:
        body.update({"pattern": pattern})
    # Only send type if the argument was provided, dont send null values
    if type is not None:
        body.update({"type": type})

    query_parameters = {}

    log.debug("PUT %s (headers: %s, body: %s)" % (url, str(headers), str(body) or ""))

    response = put(
        url,
        params=query_parameters or None,
        json=body,
        verify=getenv('REQUESTS_CA_BUNDLE', verify),
        headers=headers
    )

    validate_http_response(response)
    return response.json()

