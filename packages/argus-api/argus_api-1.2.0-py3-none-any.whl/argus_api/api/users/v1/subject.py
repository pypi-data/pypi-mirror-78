"""Autogenerated API"""
import logging
from argus_cli.plugin import register_command
from argus_plugins import argus_cli_module

log = logging.getLogger(__name__)


@register_command(
    extending=("users", "v1", "subject"),
    module=argus_cli_module
)
def find_subjects(
    domain: str = None,
    type: str = None,
    subjectID: int = None,
    excludeSubjectID: int = None,
    parentID: int = None,
    ancestorID: int = None,
    get_aclAncestorID: int = None,
    get_aclCustomerID: int = None,
    excludeAncestorID: int = None,
    userName: str = None,
    email: str = None,
    mobile: str = None,
    searchString: str = None,
    requiredFunctionID: int = None,
    requiredFunctionCustomerID: int = None,
    requireAllFunctions: bool = None,
    limit: int = None,
    offset: int = None,
    includeDeleted: bool = None,
    includeFlags: int = None,
    excludeFlags: int = None,
    subCriteria: dict = None,
    exclude: bool = None,
    required: bool = None,
    customerID: int = None,
    json: bool = True,
    verify: bool = True,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
  ) -> dict:
    """Search user or group profiles (PUBLIC)
    
    :param list domain: 
    :param str type: 
    :param list subjectID: 
    :param list excludeSubjectID: 
    :param list parentID: 
    :param list ancestorID: 
    :param list get_aclAncestorID: 
    :param list get_aclCustomerID: 
    :param list excludeAncestorID: 
    :param list userName: 
    :param list email: 
    :param list mobile: 
    :param str searchString: 
    :param list requiredFunctionID: 
    :param int requiredFunctionCustomerID: 
    :param bool requireAllFunctions: 
    :param int limit: Set this value to set max number of results. By default, no restriction on result set size. 
    :param int offset: Set this value to skip the first (offset) objects. By default, return result from first object. 
    :param bool includeDeleted: Set to true to include deleted objects. By default, exclude deleted objects. 
    :param int includeFlags: Only include objects which have includeFlags set. 
    :param int excludeFlags: Exclude objects which have excludeFlags set. 
    :param list subCriteria: Set additional criterias which are applied using a logical OR. 
    :param bool exclude: Only relevant for subcriteria. If set to true, objects matching this subcriteria object will be excluded. 
    :param bool required: Only relevant for subcriteria. If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria). 
    :param list customerID: Restrict search to data belonging to specified customers. 
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """
    from os import getenv
    from requests import post
    from argus_api._validators import validate_http_response
    
    from argus_cli.settings import settings
    
    url = "{}/users/v1/subject/search".format(
        server_url or settings["api"]["api_url"],
        
    )
    headers = {
        'User-Agent': 'ArgusToolbelt/',
        'content': 'application/json'
    }

    if not apiKey and "api_key" in settings["api"]:
        apiKey = settings["api"]["api_key"]

    if apiKey:
        headers["Argus-API-Key"] = apiKey
    elif authentication and isinstance(authentication, dict):
        headers.update(authentication)
    elif callable(authentication):
        headers.update(authentication(url))

    body = {}
    # Only send domain if the argument was provided, dont send null values
    if domain is not None:
        body.update({"domain": domain})
    # Only send type if the argument was provided, dont send null values
    if type is not None:
        body.update({"type": type})
    # Only send subjectID if the argument was provided, dont send null values
    if subjectID is not None:
        body.update({"subjectID": subjectID})
    # Only send excludeSubjectID if the argument was provided, dont send null values
    if excludeSubjectID is not None:
        body.update({"excludeSubjectID": excludeSubjectID})
    # Only send parentID if the argument was provided, dont send null values
    if parentID is not None:
        body.update({"parentID": parentID})
    # Only send ancestorID if the argument was provided, dont send null values
    if ancestorID is not None:
        body.update({"ancestorID": ancestorID})
    # Only send get_aclAncestorID if the argument was provided, dont send null values
    if get_aclAncestorID is not None:
        body.update({"get_aclAncestorID": get_aclAncestorID})
    # Only send get_aclCustomerID if the argument was provided, dont send null values
    if get_aclCustomerID is not None:
        body.update({"get_aclCustomerID": get_aclCustomerID})
    # Only send excludeAncestorID if the argument was provided, dont send null values
    if excludeAncestorID is not None:
        body.update({"excludeAncestorID": excludeAncestorID})
    # Only send userName if the argument was provided, dont send null values
    if userName is not None:
        body.update({"userName": userName})
    # Only send email if the argument was provided, dont send null values
    if email is not None:
        body.update({"email": email})
    # Only send mobile if the argument was provided, dont send null values
    if mobile is not None:
        body.update({"mobile": mobile})
    # Only send searchString if the argument was provided, dont send null values
    if searchString is not None:
        body.update({"searchString": searchString})
    # Only send requiredFunctionID if the argument was provided, dont send null values
    if requiredFunctionID is not None:
        body.update({"requiredFunctionID": requiredFunctionID})
    # Only send requiredFunctionCustomerID if the argument was provided, dont send null values
    if requiredFunctionCustomerID is not None:
        body.update({"requiredFunctionCustomerID": requiredFunctionCustomerID})
    # Only send requireAllFunctions if the argument was provided, dont send null values
    if requireAllFunctions is not None:
        body.update({"requireAllFunctions": requireAllFunctions})
    # Only send limit if the argument was provided, dont send null values
    if limit is not None:
        body.update({"limit": limit})
    # Only send offset if the argument was provided, dont send null values
    if offset is not None:
        body.update({"offset": offset})
    # Only send includeDeleted if the argument was provided, dont send null values
    if includeDeleted is not None:
        body.update({"includeDeleted": includeDeleted})
    # Only send includeFlags if the argument was provided, dont send null values
    if includeFlags is not None:
        body.update({"includeFlags": includeFlags})
    # Only send excludeFlags if the argument was provided, dont send null values
    if excludeFlags is not None:
        body.update({"excludeFlags": excludeFlags})
    # Only send subCriteria if the argument was provided, dont send null values
    if subCriteria is not None:
        body.update({"subCriteria": subCriteria})
    # Only send exclude if the argument was provided, dont send null values
    if exclude is not None:
        body.update({"exclude": exclude})
    # Only send required if the argument was provided, dont send null values
    if required is not None:
        body.update({"required": required})
    # Only send customerID if the argument was provided, dont send null values
    if customerID is not None:
        body.update({"customerID": customerID})

    query_parameters = {}

    log.debug("POST %s (headers: %s, body: %s)" % (url, str(headers), str(body) or ""))

    response = post(
        url,
        params=query_parameters or None,
        json=body,
        verify=getenv('REQUESTS_CA_BUNDLE', verify),
        headers=headers
    )

    validate_http_response(response)
    return response.json()


@register_command(
    extending=("users", "v1", "subject"),
    module=argus_cli_module
)
def get_subject_by_id(
    subjectID: int,
    json: bool = True,
    verify: bool = True,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
  ) -> dict:
    """Get user or group profile by ID (PUBLIC)
    
    :param int subjectID: ID of subject
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """
    from os import getenv
    from requests import get
    from argus_api._validators import validate_http_response
    
    from argus_cli.settings import settings
    
    url = "{}/users/v1/subject/{subjectID}".format(
        server_url or settings["api"]["api_url"],
        subjectID=subjectID
    )
    headers = {
        'User-Agent': 'ArgusToolbelt/',
        'content': 'application/json'
    }

    if not apiKey and "api_key" in settings["api"]:
        apiKey = settings["api"]["api_key"]

    if apiKey:
        headers["Argus-API-Key"] = apiKey
    elif authentication and isinstance(authentication, dict):
        headers.update(authentication)
    elif callable(authentication):
        headers.update(authentication(url))

    body = {}

    query_parameters = {}

    log.debug("GET %s (headers: %s, body: %s)" % (url, str(headers), str(body) or ""))

    response = get(
        url,
        params=query_parameters or None,
        verify=getenv('REQUESTS_CA_BUNDLE', verify),
        headers=headers
    )

    validate_http_response(response)
    return response.json()


@register_command(
    extending=("users", "v1", "subject"),
    module=argus_cli_module
)
def get_subject_by_name(
    subjectName: str,
    json: bool = True,
    verify: bool = True,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
  ) -> dict:
    """Get user or group profile by name (PUBLIC)
    
    :param str subjectName: Username or group shortname
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """
    from os import getenv
    from requests import get
    from argus_api._validators import validate_http_response
    
    from argus_cli.settings import settings
    
    url = "{}/users/v1/subject/{subjectName}".format(
        server_url or settings["api"]["api_url"],
        subjectName=subjectName
    )
    headers = {
        'User-Agent': 'ArgusToolbelt/',
        'content': 'application/json'
    }

    if not apiKey and "api_key" in settings["api"]:
        apiKey = settings["api"]["api_key"]

    if apiKey:
        headers["Argus-API-Key"] = apiKey
    elif authentication and isinstance(authentication, dict):
        headers.update(authentication)
    elif callable(authentication):
        headers.update(authentication(url))

    body = {}

    query_parameters = {}

    log.debug("GET %s (headers: %s, body: %s)" % (url, str(headers), str(body) or ""))

    response = get(
        url,
        params=query_parameters or None,
        verify=getenv('REQUESTS_CA_BUNDLE', verify),
        headers=headers
    )

    validate_http_response(response)
    return response.json()


@register_command(
    extending=("users", "v1", "subject"),
    module=argus_cli_module
)
def list_subjects(
    subjectID: int = None,
    offset: int = None,
    limit: int = 25,
    json: bool = True,
    verify: bool = True,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
  ) -> dict:
    """Get user or group profiles (PUBLIC)
    
    :param list subjectID: IDs of subjects
    :param int offset: Offset results
    :param int limit: Limit results
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """
    from os import getenv
    from requests import get
    from argus_api._validators import validate_http_response
    
    from argus_cli.settings import settings
    
    url = "{}/users/v1/subject".format(
        server_url or settings["api"]["api_url"],
        limit=limit,
        subjectID=subjectID,
        offset=offset
    )
    headers = {
        'User-Agent': 'ArgusToolbelt/',
        'content': 'application/json'
    }

    if not apiKey and "api_key" in settings["api"]:
        apiKey = settings["api"]["api_key"]

    if apiKey:
        headers["Argus-API-Key"] = apiKey
    elif authentication and isinstance(authentication, dict):
        headers.update(authentication)
    elif callable(authentication):
        headers.update(authentication(url))

    body = {}

    query_parameters = {}
    # Only send limit if the argument was provided, dont send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    # Only send subjectID if the argument was provided, dont send null values
    if subjectID is not None:
        query_parameters.update({"subjectID": subjectID})
    # Only send offset if the argument was provided, dont send null values
    if offset is not None:
        query_parameters.update({"offset": offset})

    log.debug("GET %s (headers: %s, body: %s)" % (url, str(headers), str(body) or ""))

    response = get(
        url,
        params=query_parameters or None,
        verify=getenv('REQUESTS_CA_BUNDLE', verify),
        headers=headers
    )

    validate_http_response(response)
    return response.json()

