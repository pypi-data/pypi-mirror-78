"""Autogenerated API"""
import logging
from argus_cli.plugin import register_command
from argus_plugins import argus_cli_module
from requests import Response

log = logging.getLogger(__name__)


@register_command(
    extending=("currentuser", "v1", "picture"),
    module=argus_cli_module
)
def get_profile_picture(
    default: bool = None,
    json: bool = True,
    verify: bool = True,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
  ) -> Response:
    """Get current user's profile picture (PUBLIC)
    
    :param bool default: If true, return default avatar image if user picture not set. Default is false.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ProfilePictureNotFoundException: on 404
    :raises ArgusException: on other status codes
    
    :returns: requests.Response object
    
    """
    from os import getenv
    from requests import get
    from argus_api._validators import validate_http_response
    
    from argus_cli.settings import settings
    
    url = "{}/currentuser/v1/picture".format(
        server_url or settings["api"]["api_url"],
        default=default
    )
    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    if not apiKey and "api_key" in settings["api"]:
        apiKey = settings["api"]["api_key"]

    if apiKey:
        headers["Argus-API-Key"] = apiKey
    elif authentication and isinstance(authentication, dict):
        headers.update(authentication)
    elif callable(authentication):
        headers.update(authentication(url))

    body = {}

    query_parameters = {}
    # Only send default if the argument was provided, dont send null values
    if default is not None:
        query_parameters.update({"default": default})

    log.debug("GET %s (headers: %s, body: %s)" % (url, str(headers), str(body) or ""))

    response = get(
        url,
        params=query_parameters or None,
        verify=getenv('REQUESTS_CA_BUNDLE', verify),
        headers=headers
    )

    validate_http_response(response)
    return response
    


@register_command(
    extending=("currentuser", "v1", "picture"),
    module=argus_cli_module
)
def update_profile_picture_json(
    image: str = None,
    mimeType: str = None,
    json: bool = True,
    verify: bool = True,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
  ) -> dict:
    """Set current user's profile picture (PUBLIC) (PUBLIC)
    
    :param str image: Image bytes 
    :param str mimeType: Image MIME type  => Sanitize by regex .+/.+
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """
    from os import getenv
    from requests import put
    from argus_api._validators import validate_http_response
    
    from argus_cli.settings import settings
    
    url = "{}/currentuser/v1/picture".format(
        server_url or settings["api"]["api_url"],
        
    )
    headers = {
        'User-Agent': 'ArgusToolbelt/',
        'content': 'application/json'
    }

    if not apiKey and "api_key" in settings["api"]:
        apiKey = settings["api"]["api_key"]

    if apiKey:
        headers["Argus-API-Key"] = apiKey
    elif authentication and isinstance(authentication, dict):
        headers.update(authentication)
    elif callable(authentication):
        headers.update(authentication(url))

    body = {}
    # Only send image if the argument was provided, dont send null values
    if image is not None:
        body.update({"image": image})
    # Only send mimeType if the argument was provided, dont send null values
    if mimeType is not None:
        body.update({"mimeType": mimeType})

    query_parameters = {}

    log.debug("PUT %s (headers: %s, body: %s)" % (url, str(headers), str(body) or ""))

    response = put(
        url,
        params=query_parameters or None,
        json=body,
        verify=getenv('REQUESTS_CA_BUNDLE', verify),
        headers=headers
    )

    validate_http_response(response)
    return response.json()

