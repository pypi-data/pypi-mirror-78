"""Autogenerated API"""
import logging
from argus_cli.plugin import register_command
from argus_plugins import argus_cli_module

log = logging.getLogger(__name__)


@register_command(
    extending=("pdns", "v3", "cof"),
    module=argus_cli_module
)
def search_records_simplified_c_o_f(
    query: str,
    rrClass: str = None,
    rrType: str = None,
    customerID: int = None,
    tlp: str = None,
    aggregate: bool = True,
    includeAnonymous: bool = True,
    limit: int = 25,
    offset: int = None,
    json: bool = True,
    verify: bool = True,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
  ) -> dict:
    """Search against PassiveDNS and return matching records in PDNS COF format (DEV)
    
    :param str query: Search by query
    :param list rrClass: Search by recordClass (rrclass)
    :param list rrType: Search by type (rrtype)
    :param list customerID: Search by customerID
    :param list tlp: Search by TLP
    :param bool aggregate: Whether aggregate records
    :param bool includeAnonymous: Whether include anonymous records
    :param int limit: Max number of records to be returned
    :param int offset: Skip a number of records
    :raises AuthenticationFailedException: on 401
    :raises ResourceLimitExceededException: on 402
    :raises AccessDeniedException: on 403
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """
    from os import getenv
    from requests import get
    from argus_api._validators import validate_http_response
    
    from argus_cli.settings import settings
    
    url = "{}/pdns/v3/cof/{query}".format(
        server_url or settings["api"]["api_url"],
        aggregate=aggregate,
        includeAnonymous=includeAnonymous,
        limit=limit,
        query=query,
        rrClass=rrClass,
        rrType=rrType,
        customerID=customerID,
        tlp=tlp,
        offset=offset
    )
    headers = {
        'User-Agent': 'ArgusToolbelt/',
        'content': 'application/json'
    }

    if not apiKey and "api_key" in settings["api"]:
        apiKey = settings["api"]["api_key"]

    if apiKey:
        headers["Argus-API-Key"] = apiKey
    elif authentication and isinstance(authentication, dict):
        headers.update(authentication)
    elif callable(authentication):
        headers.update(authentication(url))

    body = {}

    query_parameters = {}
    # Only send aggregate if the argument was provided, dont send null values
    if aggregate is not None:
        query_parameters.update({"aggregate": aggregate})
    # Only send includeAnonymous if the argument was provided, dont send null values
    if includeAnonymous is not None:
        query_parameters.update({"includeAnonymous": includeAnonymous})
    # Only send limit if the argument was provided, dont send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    # Only send rrClass if the argument was provided, dont send null values
    if rrClass is not None:
        query_parameters.update({"rrClass": rrClass})
    # Only send rrType if the argument was provided, dont send null values
    if rrType is not None:
        query_parameters.update({"rrType": rrType})
    # Only send customerID if the argument was provided, dont send null values
    if customerID is not None:
        query_parameters.update({"customerID": customerID})
    # Only send tlp if the argument was provided, dont send null values
    if tlp is not None:
        query_parameters.update({"tlp": tlp})
    # Only send offset if the argument was provided, dont send null values
    if offset is not None:
        query_parameters.update({"offset": offset})

    log.debug("GET %s (headers: %s, body: %s)" % (url, str(headers), str(body) or ""))

    response = get(
        url,
        params=query_parameters or None,
        verify=getenv('REQUESTS_CA_BUNDLE', verify),
        headers=headers
    )

    validate_http_response(response)
    return response.json()

