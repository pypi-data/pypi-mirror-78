"""Autogenerated API"""
import logging
from argus_cli.plugin import register_command
from argus_plugins import argus_cli_module

log = logging.getLogger(__name__)


@register_command(
    extending=("authentication", "v1", "radius", "authenticate"),
    module=argus_cli_module
)
def authenticate_2(
    userName: str = None,
    domain: str = None,
    mode: str = None,
    password: str = None,
    tokenCode: str = None,
    state: str = None,
    json: bool = True,
    verify: bool = True,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
  ) -> dict:
    """Initiate a new user session using RADIUS authentication (PUBLIC)
    
    :param str userName: Username to authenticate 
    :param str domain: User domain 
    :param str mode: Authentication mode. Use AUTHENTICATION for normal authentication, or CHALLENGE to respond to a challenge request 
    :param str password: RADIUS static password 
    :param str tokenCode: RADIUS token code 
    :param str state: When responding to a challenge, include the encoded state returned by the challenge. 
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises NotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """
    from os import getenv
    from requests import post
    from argus_api._validators import validate_http_response
    
    from argus_cli.settings import settings
    
    url = "{}/authentication/v1/radius/authenticate".format(
        server_url or settings["api"]["api_url"],
        
    )
    headers = {
        'User-Agent': 'ArgusToolbelt/',
        'content': 'application/json'
    }

    if not apiKey and "api_key" in settings["api"]:
        apiKey = settings["api"]["api_key"]

    if apiKey:
        headers["Argus-API-Key"] = apiKey
    elif authentication and isinstance(authentication, dict):
        headers.update(authentication)
    elif callable(authentication):
        headers.update(authentication(url))

    body = {}
    # Only send userName if the argument was provided, dont send null values
    if userName is not None:
        body.update({"userName": userName})
    # Only send domain if the argument was provided, dont send null values
    if domain is not None:
        body.update({"domain": domain})
    # Only send mode if the argument was provided, dont send null values
    if mode is not None:
        body.update({"mode": mode})
    # Only send password if the argument was provided, dont send null values
    if password is not None:
        body.update({"password": password})
    # Only send tokenCode if the argument was provided, dont send null values
    if tokenCode is not None:
        body.update({"tokenCode": tokenCode})
    # Only send state if the argument was provided, dont send null values
    if state is not None:
        body.update({"state": state})

    query_parameters = {}

    log.debug("POST %s (headers: %s, body: %s)" % (url, str(headers), str(body) or ""))

    response = post(
        url,
        params=query_parameters or None,
        json=body,
        verify=getenv('REQUESTS_CA_BUNDLE', verify),
        headers=headers
    )

    validate_http_response(response)
    return response.json()

