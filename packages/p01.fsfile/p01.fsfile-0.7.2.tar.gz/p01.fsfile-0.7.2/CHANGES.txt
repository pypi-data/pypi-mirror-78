=======
CHANGES
=======

0.7.2 (2020-09-05)
------------------

- Bugfix: Fix fsID and use the correct os separator. After migrate a system
  windows to linux the fsID contains windows separator and this fails for
  build the correct file storage path. We check if the fsID contains windows
  separator and if on a non windows system, we replace the os path separator
  with forward slash.


0.7.1 (2013-08-28)
------------------

- fix ``removeGhostFiles``: remove the ghostFile from ``_ghostFiles`` also
  if it does not exist. No need to keep the reference around.

- added ``timeLimit`` to ``removeGhostFiles``, useful for automated cleanup


0.7.0 (2012-11-16)
------------------

- fix typos and pyflakes warnings

- remove storage base path from fsID. Storing the full path just causes problems.
  Added IFSFile.path which has the full path then.
  That causes some API changes.
  And make sure you provide the right utility with the right name.
  (utility name == IFSStorage.storageName)
  Generation REQUIRED!

- renamed private methods to start with `_`


0.6.0 (2011-01-04)
------------------

- changed p01.fsfile config argument fsStorage to storage since camel
  case seems to be broken. Also note that the WSGI to product config chain
  seems to be broken too. This means you have to apply the WSGI arguments to
  the zope product config after the WSGI application factory will setup the
  product config otherwise previsous applied product config get overwritten.
  Even better use a real product config directive in your zope.conf file and
  prevent all this problems.

- move transaction support from IFSStorage to IFSStorageTransationSupport
  interface. This let us implement storages with a different transaction
  support concept. Inherited all other storage interfaces from
  IFSStorageTransationSupport for BBB.

- improve IConnection lokup, implement base implementation which could be used
  for non peristent storages. Also implement lookup for persistent storages
  classes.

- move persistent and contained from the base class to the core implementation.
  This allows us to use the base classes for non persistent utilities.

- added ghost file support classes based on local utility lookup. This allows
  to use a global non persistent storage setup with a local ghost file utility.


0.5.0 (2009-05-12)
------------------

- initial release
