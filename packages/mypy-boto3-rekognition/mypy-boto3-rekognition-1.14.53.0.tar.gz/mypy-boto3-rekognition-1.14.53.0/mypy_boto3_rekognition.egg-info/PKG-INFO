Metadata-Version: 2.1
Name: mypy-boto3-rekognition
Version: 1.14.53.0
Summary: Type annotations for boto3.Rekognition 1.14.53 service, generated by mypy-boto3-buider 2.4.0
Home-page: https://github.com/vemel/mypy_boto3_builder
Author: Vlad Emelianov
Author-email: vlad.emelianov.nz@gmail.com
License: MIT License
Project-URL: Documentation, https://mypy-boto3-builder.readthedocs.io/en/latest/
Project-URL: Source, https://github.com/vemel/mypy_boto3_builder
Project-URL: Tracker, https://github.com/vemel/mypy_boto3_builder/issues
Description: # mypy-boto3-rekognition
        
        [![PyPI - mypy-boto3-rekognition](https://img.shields.io/pypi/v/mypy-boto3-rekognition.svg?color=blue)](https://pypi.org/project/mypy-boto3-rekognition)
        [![PyPI - Python Version](https://img.shields.io/pypi/pyversions/mypy-boto3-rekognition.svg?color=blue)](https://pypi.org/project/mypy-boto3-rekognition)
        [![Docs](https://img.shields.io/readthedocs/mypy-boto3-builder.svg?color=blue)](https://mypy-boto3-builder.readthedocs.io/)
        
        Type annotations for
        [boto3.Rekognition 1.14.53](https://boto3.amazonaws.com/v1/documentation/api/1.14.53/reference/services/rekognition.html#Rekognition) service
        compatible with [mypy](https://github.com/python/mypy), [VSCode](https://code.visualstudio.com/),
        [PyCharm](https://www.jetbrains.com/pycharm/) and other tools.
        
        Generated by [mypy-boto3-buider 2.4.0](https://github.com/vemel/mypy_boto3_builder).
        
        More information can be found on [boto3-stubs](https://pypi.org/project/boto3-stubs/) page.
        
        ## How to install
        
        Make sure you have [mypy](https://github.com/python/mypy) installed and activated in your IDE.
        
        Install `boto3-stubs` for `Rekognition` service.
        
        ```bash
        python -m pip install boto3-stubs[rekognition]
        ```
        
        ## How to use
        
        ### Client annotations
        
        `RekognitionClient` provides annotations for `boto3.client("rekognition")`.
        
        ```python
        import boto3
        
        from mypy_boto3_rekognition import RekognitionClient
        from mypy_boto3_rekognition.paginator import (
            DescribeProjectsPaginator,
            DescribeProjectVersionsPaginator,
            ListCollectionsPaginator,
            ListFacesPaginator,
            ListStreamProcessorsPaginator,
        )
        from mypy_boto3_rekognition.type_defs import AgeRangeTypeDef, ...
        from mypy_boto3_rekognition.waiter import (
            ProjectVersionRunningWaiter,
            ProjectVersionTrainingCompletedWaiter,
        )
        
        client: RekognitionClient = boto3.client("rekognition")
        
        # now client usage is checked by mypy and IDE should provide code auto-complete
        
        # works for session as well
        session = boto3.session.Session(region="us-west-1")
        session_client: RekognitionClient = session.client("rekognition")
        ```
        
        ### Paginators annotations
        
        `mypy_boto3_rekognition.paginator` module contains type annotations for all paginators.
        
        ```python
        
        client: RekognitionClient = boto3.client("rekognition")
        
        # Explicit type annotations are optional here
        # Type should be correctly discovered by mypy and IDEs
        # VSCode requires explicit type annotations
        describe_project_versions_paginator: DescribeProjectVersionsPaginator = client.get_paginator("describe_project_versions")
        describe_projects_paginator: DescribeProjectsPaginator = client.get_paginator("describe_projects")
        list_collections_paginator: ListCollectionsPaginator = client.get_paginator("list_collections")
        list_faces_paginator: ListFacesPaginator = client.get_paginator("list_faces")
        list_stream_processors_paginator: ListStreamProcessorsPaginator = client.get_paginator("list_stream_processors")
        ```
        
        
        ### Waiters annotations
        
        `mypy_boto3_rekognition.waiter` module contains type annotations for all waiters.
        
        ```python
        
        client: RekognitionClient = boto3.client("rekognition")
        
        # Explicit type annotations are optional here
        # Type should be correctly discovered by mypy and IDEs
        # VSCode requires explicit type annotations
        project_version_running_waiter: ProjectVersionRunningWaiter = client.get_waiter("project_version_running")
        project_version_training_completed_waiter: ProjectVersionTrainingCompletedWaiter = client.get_waiter("project_version_training_completed")
        ```
        
        
        
        
        
        ### Typed dictionations
        
        `mypy_boto3_rekognition.type_defs` module contains structures and shapes assembled
        to typed dictionaries for additional type checking.
        
        ```python
        
        def get_structure() -> AgeRangeTypeDef:
            return {
              ...
            }
        ```
        
        
        ## Dynamic type annotations
        
        `mypy_boto3` command generates `boto3.client/resource` type annotations for
        `mypy_boto3_rekognition` and other installed services.
        
        ```bash
        # Run this command after you add or remove service packages
        python -m mypy_boto3
        ```
        
        Generated type annotations provide overloads for `boto3.client` and `boto3.resource`,
        `boto3.Session.client` and `boto3.Session.resource` functions,
        so explicit type annotations are not needed.
        
        - `mypy` supports function overloads as expected
        - `PyCharm` also supports function overloads, but consumes a lot of RAM, use carefully if you have many services installed
        - `VSCode` does not currently support function overloads, use explicit type annotations
        
        ```python
        
        # Type is discovered correctly by mypy and PyCharm
        # VSCode still needs explicit type annotations
        client = boto3.client("rekognition")
        
        session_client = boto3.Session().client("rekognition")
        ```
        
Keywords: boto3 rekognition type-annotations boto3-stubs mypy typeshed autocomplete auto-generated
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Environment :: Console
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Typing :: Typed
Requires-Python: >=3.6
Description-Content-Type: text/markdown
