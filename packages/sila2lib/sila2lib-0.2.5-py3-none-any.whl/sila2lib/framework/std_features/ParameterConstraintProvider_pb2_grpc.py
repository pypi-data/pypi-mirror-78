# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import ParameterConstraintProvider_pb2 as ParameterConstraintProvider__pb2


class ParameterConstraintsProviderStub(object):
  """Feature: Parameter Constraint Provider

  Allows a server to apply constraints on specific command parameters after design time. It is recommended to
  specify
  the constraints in the Feature Definitions whenever possible.

  The constraints given by this Feature act as a logical AND to any constraints already defined in the Feature
  Definition.
  As an example: A constrained type has a Pattern Constraint, then the ParameterConstraintProvider specifies an
  additional
  Pattern Constraint - in this case the underlying SiLA Type has to follow BOTH Patterns defined.

  The constrained can be retrieved by reading and subscribing to its dynamic property.

  Example use-case: Loading and setting the positions a mobile robot can move to at runtime.

  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Subscribe_ParametersConstraints = channel.unary_stream(
        '/sila2.org.silastandard.core.parameterconstraintsprovider.v1.ParameterConstraintsProvider/Subscribe_ParametersConstraints',
        request_serializer=ParameterConstraintProvider__pb2.Subscribe_ParametersConstraints_Parameters.SerializeToString,
        response_deserializer=ParameterConstraintProvider__pb2.Subscribe_ParametersConstraints_Responses.FromString,
        )


class ParameterConstraintsProviderServicer(object):
  """Feature: Parameter Constraint Provider

  Allows a server to apply constraints on specific command parameters after design time. It is recommended to
  specify
  the constraints in the Feature Definitions whenever possible.

  The constraints given by this Feature act as a logical AND to any constraints already defined in the Feature
  Definition.
  As an example: A constrained type has a Pattern Constraint, then the ParameterConstraintProvider specifies an
  additional
  Pattern Constraint - in this case the underlying SiLA Type has to follow BOTH Patterns defined.

  The constrained can be retrieved by reading and subscribing to its dynamic property.

  Example use-case: Loading and setting the positions a mobile robot can move to at runtime.

  """

  def Subscribe_ParametersConstraints(self, request, context):
    """Parameters Constraints
    Parameter Constraints that constrain any specified parameters within this structure
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ParameterConstraintsProviderServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Subscribe_ParametersConstraints': grpc.unary_stream_rpc_method_handler(
          servicer.Subscribe_ParametersConstraints,
          request_deserializer=ParameterConstraintProvider__pb2.Subscribe_ParametersConstraints_Parameters.FromString,
          response_serializer=ParameterConstraintProvider__pb2.Subscribe_ParametersConstraints_Responses.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'sila2.org.silastandard.core.parameterconstraintsprovider.v1.ParameterConstraintsProvider', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
