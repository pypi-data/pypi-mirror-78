# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import SimulationController_pb2 as SimulationController__pb2


class SimulationControllerStub(object):
  """Feature: Simulation Controller

  This Feature provides control over the simulation behaviour of a SiLA Server.

  A SiLA Server can run in two modes:
  (a) a real mode - with real activities, e.g. addressing or controlling real hardware,
  writing to real databases, moving real plates etc.
  (b) a simulation mode - where every command is only simulated and responses are just example returns.

  Note that certain commands and properties might not be affected by this feature if they
  do not interact with the real world.

  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.StartSimulationMode = channel.unary_unary(
        '/sila2.org.silastandard.core.simulationcontroller.v1.SimulationController/StartSimulationMode',
        request_serializer=SimulationController__pb2.StartSimulationMode_Parameters.SerializeToString,
        response_deserializer=SimulationController__pb2.StartSimulationMode_Responses.FromString,
        )
    self.StartRealMode = channel.unary_unary(
        '/sila2.org.silastandard.core.simulationcontroller.v1.SimulationController/StartRealMode',
        request_serializer=SimulationController__pb2.StartRealMode_Parameters.SerializeToString,
        response_deserializer=SimulationController__pb2.StartRealMode_Responses.FromString,
        )
    self.Get_SimulationMode = channel.unary_unary(
        '/sila2.org.silastandard.core.simulationcontroller.v1.SimulationController/Get_SimulationMode',
        request_serializer=SimulationController__pb2.Get_SimulationMode_Parameters.SerializeToString,
        response_deserializer=SimulationController__pb2.Get_SimulationMode_Responses.FromString,
        )


class SimulationControllerServicer(object):
  """Feature: Simulation Controller

  This Feature provides control over the simulation behaviour of a SiLA Server.

  A SiLA Server can run in two modes:
  (a) a real mode - with real activities, e.g. addressing or controlling real hardware,
  writing to real databases, moving real plates etc.
  (b) a simulation mode - where every command is only simulated and responses are just example returns.

  Note that certain commands and properties might not be affected by this feature if they
  do not interact with the real world.

  """

  def StartSimulationMode(self, request, context):
    """Start Simulation Mode 

    Starting server into simulation mode with the following procedure.

    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def StartRealMode(self, request, context):
    """Start Real Mode

    Starting server into real mode with the following procedure.

    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Get_SimulationMode(self, request, context):
    """SimulationMode
    Indication whether SiLA Server is in Simulation Mode or not.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_SimulationControllerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'StartSimulationMode': grpc.unary_unary_rpc_method_handler(
          servicer.StartSimulationMode,
          request_deserializer=SimulationController__pb2.StartSimulationMode_Parameters.FromString,
          response_serializer=SimulationController__pb2.StartSimulationMode_Responses.SerializeToString,
      ),
      'StartRealMode': grpc.unary_unary_rpc_method_handler(
          servicer.StartRealMode,
          request_deserializer=SimulationController__pb2.StartRealMode_Parameters.FromString,
          response_serializer=SimulationController__pb2.StartRealMode_Responses.SerializeToString,
      ),
      'Get_SimulationMode': grpc.unary_unary_rpc_method_handler(
          servicer.Get_SimulationMode,
          request_deserializer=SimulationController__pb2.Get_SimulationMode_Parameters.FromString,
          response_serializer=SimulationController__pb2.Get_SimulationMode_Responses.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'sila2.org.silastandard.core.simulationcontroller.v1.SimulationController', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
