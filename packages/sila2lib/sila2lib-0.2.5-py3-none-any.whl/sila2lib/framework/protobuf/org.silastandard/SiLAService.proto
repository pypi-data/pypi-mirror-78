// This file is automatically generated by sila2lib.proto_builder.proto_builder version 0.2.0
// :generation date: 2019-09-17 16:59:38
//
// ---- PLEASE DO NOT MODIFY MANUALLY !! ---

syntax = "proto3";
import "SiLAFramework.proto";
package sila2.org.silastandard.core.silaservice.v1;

// Feature: SiLA Service
//
//           The Feature each SiLA Server MUST implement. It is the entry point to a SiLA Server and helps to discover the
//   Features it implements.
//
service SiLAService {
    // Get Feature Definition
    //   Get all details on one Feature through the qualified Feature id.
    rpc GetFeatureDefinition(sila2.org.silastandard.core.silaservice.v1.GetFeatureDefinition_Parameters) returns (sila2.org.silastandard.core.silaservice.v1.GetFeatureDefinition_Responses) {}
    // Set Server Name
    //   Sets a human readable name to the Server Name property
    rpc SetServerName(sila2.org.silastandard.core.silaservice.v1.SetServerName_Parameters) returns (sila2.org.silastandard.core.silaservice.v1.SetServerName_Responses) {}
    // Server Name
    //   Human readable name of the SiLA Server.
    rpc Get_ServerName(sila2.org.silastandard.core.silaservice.v1.Get_ServerName_Parameters) returns (sila2.org.silastandard.core.silaservice.v1.Get_ServerName_Responses) {}
    // Server Type
    //   The type of Server this is. Is specified by the implementer of the server and not unique.
    rpc Get_ServerType(sila2.org.silastandard.core.silaservice.v1.Get_ServerType_Parameters) returns (sila2.org.silastandard.core.silaservice.v1.Get_ServerType_Responses) {}
    // Server UUID
    //   Globally unique identifier that identifies a SiLA Server. The Server UUID MUST
    //               be generated once and always remain the same.
    //
    rpc Get_ServerUUID(sila2.org.silastandard.core.silaservice.v1.Get_ServerUUID_Parameters) returns (sila2.org.silastandard.core.silaservice.v1.Get_ServerUUID_Responses) {}
    // Server Description
    //   Description of the SiLA Server.
    rpc Get_ServerDescription(sila2.org.silastandard.core.silaservice.v1.Get_ServerDescription_Parameters) returns (sila2.org.silastandard.core.silaservice.v1.Get_ServerDescription_Responses) {}
    // Server Version
    //
    //               Returns the version of the SiLA Server. A "Major" and a "Minor" version number (e.g. 1.0) MUST be provided,
    //               a Patch version number MAY be provided. Optionally, an arbitrary text, separated by an underscore MAY be
    //   appended,
    //               e.g. “3.19.373_mighty_lab_devices”
    //
    rpc Get_ServerVersion(sila2.org.silastandard.core.silaservice.v1.Get_ServerVersion_Parameters) returns (sila2.org.silastandard.core.silaservice.v1.Get_ServerVersion_Responses) {}
    // Server Vendor URL
    //
    //               Returns the URL to the website of the vendor or the website
    //               of the product of this SiLA Server.
    //
    rpc Get_ServerVendorURL(sila2.org.silastandard.core.silaservice.v1.Get_ServerVendorURL_Parameters) returns (sila2.org.silastandard.core.silaservice.v1.Get_ServerVendorURL_Responses) {}
    // Implemented Features
    //
    //               Returns a list of qualified Feature identifiers of all
    //               implemented Features of this SiLA Server.
    //
    rpc Get_ImplementedFeatures(sila2.org.silastandard.core.silaservice.v1.Get_ImplementedFeatures_Parameters) returns (sila2.org.silastandard.core.silaservice.v1.Get_ImplementedFeatures_Responses) {}

}

// ----------------- Data Type definitions -----------------

// ------ Command Parameter and Response definitions -------
message GetFeatureDefinition_Parameters {
    sila2.org.silastandard.String QualifiedFeatureIdentifier = 1;
}

message GetFeatureDefinition_Responses {
    sila2.org.silastandard.String FeatureDefinition = 1;
}

message SetServerName_Parameters {
    sila2.org.silastandard.String ServerName = 1;
}

message SetServerName_Responses {

}
message Get_ServerName_Parameters {
    // Empty message
}

message Get_ServerName_Responses {
    sila2.org.silastandard.String ServerName = 1;
}

message Get_ServerType_Parameters {
    // Empty message
}

message Get_ServerType_Responses {
    sila2.org.silastandard.String ServerType = 1;
}

message Get_ServerUUID_Parameters {
    // Empty message
}

message Get_ServerUUID_Responses {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.String ServerUUID = 1;
}

message Get_ServerDescription_Parameters {
    // Empty message
}

message Get_ServerDescription_Responses {
    sila2.org.silastandard.String ServerDescription = 1;
}

message Get_ServerVersion_Parameters {
    // Empty message
}

message Get_ServerVersion_Responses {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.String ServerVersion = 1;
}

message Get_ServerVendorURL_Parameters {
    // Empty message
}

message Get_ServerVendorURL_Responses {
    sila2.org.silastandard.String ServerVendorURL = 1;
}

message Get_ImplementedFeatures_Parameters {
    // Empty message
}

message Get_ImplementedFeatures_Responses {
    repeated sila2.org.silastandard.String ImplementedFeatures = 1;
}

// ----------------- Metadata Definitions ------------------
