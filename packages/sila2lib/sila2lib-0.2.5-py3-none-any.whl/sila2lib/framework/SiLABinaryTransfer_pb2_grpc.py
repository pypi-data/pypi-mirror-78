# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import SiLABinaryTransfer_pb2 as SiLABinaryTransfer__pb2


class BinaryUploadStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.CreateBinary = channel.unary_unary(
        '/sila2.org.silastandard.BinaryUpload/CreateBinary',
        request_serializer=SiLABinaryTransfer__pb2.CreateBinaryRequest.SerializeToString,
        response_deserializer=SiLABinaryTransfer__pb2.CreateBinaryResponse.FromString,
        )
    self.UploadChunk = channel.stream_stream(
        '/sila2.org.silastandard.BinaryUpload/UploadChunk',
        request_serializer=SiLABinaryTransfer__pb2.UploadChunkRequest.SerializeToString,
        response_deserializer=SiLABinaryTransfer__pb2.UploadChunkResponse.FromString,
        )
    self.DeleteBinary = channel.unary_unary(
        '/sila2.org.silastandard.BinaryUpload/DeleteBinary',
        request_serializer=SiLABinaryTransfer__pb2.DeleteBinaryRequest.SerializeToString,
        response_deserializer=SiLABinaryTransfer__pb2.DeleteBinaryResponse.FromString,
        )


class BinaryUploadServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def CreateBinary(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def UploadChunk(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def DeleteBinary(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_BinaryUploadServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'CreateBinary': grpc.unary_unary_rpc_method_handler(
          servicer.CreateBinary,
          request_deserializer=SiLABinaryTransfer__pb2.CreateBinaryRequest.FromString,
          response_serializer=SiLABinaryTransfer__pb2.CreateBinaryResponse.SerializeToString,
      ),
      'UploadChunk': grpc.stream_stream_rpc_method_handler(
          servicer.UploadChunk,
          request_deserializer=SiLABinaryTransfer__pb2.UploadChunkRequest.FromString,
          response_serializer=SiLABinaryTransfer__pb2.UploadChunkResponse.SerializeToString,
      ),
      'DeleteBinary': grpc.unary_unary_rpc_method_handler(
          servicer.DeleteBinary,
          request_deserializer=SiLABinaryTransfer__pb2.DeleteBinaryRequest.FromString,
          response_serializer=SiLABinaryTransfer__pb2.DeleteBinaryResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'sila2.org.silastandard.BinaryUpload', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class BinaryDownloadStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetBinaryInfo = channel.unary_unary(
        '/sila2.org.silastandard.BinaryDownload/GetBinaryInfo',
        request_serializer=SiLABinaryTransfer__pb2.GetBinaryInfoRequest.SerializeToString,
        response_deserializer=SiLABinaryTransfer__pb2.GetBinaryInfoResponse.FromString,
        )
    self.GetChunk = channel.stream_stream(
        '/sila2.org.silastandard.BinaryDownload/GetChunk',
        request_serializer=SiLABinaryTransfer__pb2.GetChunkRequest.SerializeToString,
        response_deserializer=SiLABinaryTransfer__pb2.GetChunkResponse.FromString,
        )
    self.DeleteBinary = channel.unary_unary(
        '/sila2.org.silastandard.BinaryDownload/DeleteBinary',
        request_serializer=SiLABinaryTransfer__pb2.DeleteBinaryRequest.SerializeToString,
        response_deserializer=SiLABinaryTransfer__pb2.DeleteBinaryResponse.FromString,
        )


class BinaryDownloadServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def GetBinaryInfo(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetChunk(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def DeleteBinary(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_BinaryDownloadServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetBinaryInfo': grpc.unary_unary_rpc_method_handler(
          servicer.GetBinaryInfo,
          request_deserializer=SiLABinaryTransfer__pb2.GetBinaryInfoRequest.FromString,
          response_serializer=SiLABinaryTransfer__pb2.GetBinaryInfoResponse.SerializeToString,
      ),
      'GetChunk': grpc.stream_stream_rpc_method_handler(
          servicer.GetChunk,
          request_deserializer=SiLABinaryTransfer__pb2.GetChunkRequest.FromString,
          response_serializer=SiLABinaryTransfer__pb2.GetChunkResponse.SerializeToString,
      ),
      'DeleteBinary': grpc.unary_unary_rpc_method_handler(
          servicer.DeleteBinary,
          request_deserializer=SiLABinaryTransfer__pb2.DeleteBinaryRequest.FromString,
          response_serializer=SiLABinaryTransfer__pb2.DeleteBinaryResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'sila2.org.silastandard.BinaryDownload', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
