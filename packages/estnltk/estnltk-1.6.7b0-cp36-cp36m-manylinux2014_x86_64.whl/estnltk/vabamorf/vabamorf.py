# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_vabamorf', [dirname(__file__)])
        except ImportError:
            import _vabamorf
            return _vabamorf
        if fp is not None:
            try:
                _mod = imp.load_module('_vabamorf', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _vabamorf = swig_import_helper()
    del swig_import_helper
else:
    import _vabamorf
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vabamorf.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self) -> "PyObject *" : return _vabamorf.SwigPyIterator_value(self)
    def incr(self, n : 'size_t'=1) -> "swig::SwigPyIterator *" : return _vabamorf.SwigPyIterator_incr(self, n)
    def decr(self, n : 'size_t'=1) -> "swig::SwigPyIterator *" : return _vabamorf.SwigPyIterator_decr(self, n)
    def distance(self, *args) -> "ptrdiff_t" : return _vabamorf.SwigPyIterator_distance(self, *args)
    def equal(self, *args) -> "bool" : return _vabamorf.SwigPyIterator_equal(self, *args)
    def copy(self) -> "swig::SwigPyIterator *" : return _vabamorf.SwigPyIterator_copy(self)
    def next(self) -> "PyObject *" : return _vabamorf.SwigPyIterator_next(self)
    def __next__(self) -> "PyObject *" : return _vabamorf.SwigPyIterator___next__(self)
    def previous(self) -> "PyObject *" : return _vabamorf.SwigPyIterator_previous(self)
    def advance(self, *args) -> "swig::SwigPyIterator *" : return _vabamorf.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args) -> "bool" : return _vabamorf.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args) -> "bool" : return _vabamorf.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args) -> "swig::SwigPyIterator &" : return _vabamorf.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args) -> "swig::SwigPyIterator &" : return _vabamorf.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args) -> "swig::SwigPyIterator *" : return _vabamorf.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args) -> "ptrdiff_t" : return _vabamorf.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _vabamorf.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def cdata(*args) -> "SWIGCDATA" :
  return _vabamorf.cdata(*args)
cdata = _vabamorf.cdata

def memmove(*args) -> "void" :
  return _vabamorf.memmove(*args)
memmove = _vabamorf.memmove
class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vabamorf.StringVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vabamorf.StringVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vabamorf.StringVector___bool__(self)
    def __len__(self) -> "std::vector< std::string >::size_type" : return _vabamorf.StringVector___len__(self)
    def pop(self) -> "std::vector< std::string >::value_type" : return _vabamorf.StringVector_pop(self)
    def __getslice__(self, *args) -> "std::vector< std::string,std::allocator< std::string > > *" : return _vabamorf.StringVector___getslice__(self, *args)
    def __setslice__(self, *args) -> "void" : return _vabamorf.StringVector___setslice__(self, *args)
    def __delslice__(self, *args) -> "void" : return _vabamorf.StringVector___delslice__(self, *args)
    def __delitem__(self, *args) -> "void" : return _vabamorf.StringVector___delitem__(self, *args)
    def __getitem__(self, *args) -> "std::vector< std::string >::value_type const &" : return _vabamorf.StringVector___getitem__(self, *args)
    def __setitem__(self, *args) -> "void" : return _vabamorf.StringVector___setitem__(self, *args)
    def append(self, *args) -> "void" : return _vabamorf.StringVector_append(self, *args)
    def empty(self) -> "bool" : return _vabamorf.StringVector_empty(self)
    def size(self) -> "std::vector< std::string >::size_type" : return _vabamorf.StringVector_size(self)
    def clear(self) -> "void" : return _vabamorf.StringVector_clear(self)
    def swap(self, *args) -> "void" : return _vabamorf.StringVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< std::string >::allocator_type" : return _vabamorf.StringVector_get_allocator(self)
    def begin(self) -> "std::vector< std::string >::iterator" : return _vabamorf.StringVector_begin(self)
    def end(self) -> "std::vector< std::string >::iterator" : return _vabamorf.StringVector_end(self)
    def rbegin(self) -> "std::vector< std::string >::reverse_iterator" : return _vabamorf.StringVector_rbegin(self)
    def rend(self) -> "std::vector< std::string >::reverse_iterator" : return _vabamorf.StringVector_rend(self)
    def pop_back(self) -> "void" : return _vabamorf.StringVector_pop_back(self)
    def erase(self, *args) -> "std::vector< std::string >::iterator" : return _vabamorf.StringVector_erase(self, *args)
    def __init__(self, *args): 
        this = _vabamorf.new_StringVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args) -> "void" : return _vabamorf.StringVector_push_back(self, *args)
    def front(self) -> "std::vector< std::string >::value_type const &" : return _vabamorf.StringVector_front(self)
    def back(self) -> "std::vector< std::string >::value_type const &" : return _vabamorf.StringVector_back(self)
    def assign(self, *args) -> "void" : return _vabamorf.StringVector_assign(self, *args)
    def resize(self, *args) -> "void" : return _vabamorf.StringVector_resize(self, *args)
    def insert(self, *args) -> "void" : return _vabamorf.StringVector_insert(self, *args)
    def reserve(self, *args) -> "void" : return _vabamorf.StringVector_reserve(self, *args)
    def capacity(self) -> "std::vector< std::string >::size_type" : return _vabamorf.StringVector_capacity(self)
    __swig_destroy__ = _vabamorf.delete_StringVector
    __del__ = lambda self : None;
StringVector_swigregister = _vabamorf.StringVector_swigregister
StringVector_swigregister(StringVector)

class AnalysisVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnalysisVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnalysisVector, name)
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vabamorf.AnalysisVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vabamorf.AnalysisVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vabamorf.AnalysisVector___bool__(self)
    def __len__(self) -> "std::vector< Analysis >::size_type" : return _vabamorf.AnalysisVector___len__(self)
    def pop(self) -> "std::vector< Analysis >::value_type" : return _vabamorf.AnalysisVector_pop(self)
    def __getslice__(self, *args) -> "std::vector< Analysis,std::allocator< Analysis > > *" : return _vabamorf.AnalysisVector___getslice__(self, *args)
    def __setslice__(self, *args) -> "void" : return _vabamorf.AnalysisVector___setslice__(self, *args)
    def __delslice__(self, *args) -> "void" : return _vabamorf.AnalysisVector___delslice__(self, *args)
    def __delitem__(self, *args) -> "void" : return _vabamorf.AnalysisVector___delitem__(self, *args)
    def __getitem__(self, *args) -> "std::vector< Analysis >::value_type const &" : return _vabamorf.AnalysisVector___getitem__(self, *args)
    def __setitem__(self, *args) -> "void" : return _vabamorf.AnalysisVector___setitem__(self, *args)
    def append(self, *args) -> "void" : return _vabamorf.AnalysisVector_append(self, *args)
    def empty(self) -> "bool" : return _vabamorf.AnalysisVector_empty(self)
    def size(self) -> "std::vector< Analysis >::size_type" : return _vabamorf.AnalysisVector_size(self)
    def clear(self) -> "void" : return _vabamorf.AnalysisVector_clear(self)
    def swap(self, *args) -> "void" : return _vabamorf.AnalysisVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< Analysis >::allocator_type" : return _vabamorf.AnalysisVector_get_allocator(self)
    def begin(self) -> "std::vector< Analysis >::iterator" : return _vabamorf.AnalysisVector_begin(self)
    def end(self) -> "std::vector< Analysis >::iterator" : return _vabamorf.AnalysisVector_end(self)
    def rbegin(self) -> "std::vector< Analysis >::reverse_iterator" : return _vabamorf.AnalysisVector_rbegin(self)
    def rend(self) -> "std::vector< Analysis >::reverse_iterator" : return _vabamorf.AnalysisVector_rend(self)
    def pop_back(self) -> "void" : return _vabamorf.AnalysisVector_pop_back(self)
    def erase(self, *args) -> "std::vector< Analysis >::iterator" : return _vabamorf.AnalysisVector_erase(self, *args)
    def __init__(self, *args): 
        this = _vabamorf.new_AnalysisVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args) -> "void" : return _vabamorf.AnalysisVector_push_back(self, *args)
    def front(self) -> "std::vector< Analysis >::value_type const &" : return _vabamorf.AnalysisVector_front(self)
    def back(self) -> "std::vector< Analysis >::value_type const &" : return _vabamorf.AnalysisVector_back(self)
    def assign(self, *args) -> "void" : return _vabamorf.AnalysisVector_assign(self, *args)
    def resize(self, *args) -> "void" : return _vabamorf.AnalysisVector_resize(self, *args)
    def insert(self, *args) -> "void" : return _vabamorf.AnalysisVector_insert(self, *args)
    def reserve(self, *args) -> "void" : return _vabamorf.AnalysisVector_reserve(self, *args)
    def capacity(self) -> "std::vector< Analysis >::size_type" : return _vabamorf.AnalysisVector_capacity(self)
    __swig_destroy__ = _vabamorf.delete_AnalysisVector
    __del__ = lambda self : None;
AnalysisVector_swigregister = _vabamorf.AnalysisVector_swigregister
AnalysisVector_swigregister(AnalysisVector)

class WordAnalysis(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WordAnalysis, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WordAnalysis, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vabamorf.new_WordAnalysis(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _vabamorf.WordAnalysis_first_set
    __swig_getmethods__["first"] = _vabamorf.WordAnalysis_first_get
    if _newclass:first = _swig_property(_vabamorf.WordAnalysis_first_get, _vabamorf.WordAnalysis_first_set)
    __swig_setmethods__["second"] = _vabamorf.WordAnalysis_second_set
    __swig_getmethods__["second"] = _vabamorf.WordAnalysis_second_get
    if _newclass:second = _swig_property(_vabamorf.WordAnalysis_second_get, _vabamorf.WordAnalysis_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _vabamorf.delete_WordAnalysis
    __del__ = lambda self : None;
WordAnalysis_swigregister = _vabamorf.WordAnalysis_swigregister
WordAnalysis_swigregister(WordAnalysis)

class SentenceAnalysis(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SentenceAnalysis, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SentenceAnalysis, name)
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vabamorf.SentenceAnalysis_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vabamorf.SentenceAnalysis___nonzero__(self)
    def __bool__(self) -> "bool" : return _vabamorf.SentenceAnalysis___bool__(self)
    def __len__(self) -> "std::vector< std::pair< std::string,std::vector< Analysis > > >::size_type" : return _vabamorf.SentenceAnalysis___len__(self)
    def pop(self) -> "std::vector< std::pair< std::string,std::vector< Analysis > > >::value_type" : return _vabamorf.SentenceAnalysis_pop(self)
    def __getslice__(self, *args) -> "std::vector< std::pair< std::string,std::vector< Analysis,std::allocator< Analysis > > >,std::allocator< std::pair< std::string,std::vector< Analysis,std::allocator< Analysis > > > > > *" : return _vabamorf.SentenceAnalysis___getslice__(self, *args)
    def __setslice__(self, *args) -> "void" : return _vabamorf.SentenceAnalysis___setslice__(self, *args)
    def __delslice__(self, *args) -> "void" : return _vabamorf.SentenceAnalysis___delslice__(self, *args)
    def __delitem__(self, *args) -> "void" : return _vabamorf.SentenceAnalysis___delitem__(self, *args)
    def __getitem__(self, *args) -> "std::vector< std::pair< std::string,std::vector< Analysis > > >::value_type const &" : return _vabamorf.SentenceAnalysis___getitem__(self, *args)
    def __setitem__(self, *args) -> "void" : return _vabamorf.SentenceAnalysis___setitem__(self, *args)
    def append(self, *args) -> "void" : return _vabamorf.SentenceAnalysis_append(self, *args)
    def empty(self) -> "bool" : return _vabamorf.SentenceAnalysis_empty(self)
    def size(self) -> "std::vector< std::pair< std::string,std::vector< Analysis > > >::size_type" : return _vabamorf.SentenceAnalysis_size(self)
    def clear(self) -> "void" : return _vabamorf.SentenceAnalysis_clear(self)
    def swap(self, *args) -> "void" : return _vabamorf.SentenceAnalysis_swap(self, *args)
    def get_allocator(self) -> "std::vector< std::pair< std::string,std::vector< Analysis > > >::allocator_type" : return _vabamorf.SentenceAnalysis_get_allocator(self)
    def begin(self) -> "std::vector< std::pair< std::string,std::vector< Analysis > > >::iterator" : return _vabamorf.SentenceAnalysis_begin(self)
    def end(self) -> "std::vector< std::pair< std::string,std::vector< Analysis > > >::iterator" : return _vabamorf.SentenceAnalysis_end(self)
    def rbegin(self) -> "std::vector< std::pair< std::string,std::vector< Analysis > > >::reverse_iterator" : return _vabamorf.SentenceAnalysis_rbegin(self)
    def rend(self) -> "std::vector< std::pair< std::string,std::vector< Analysis > > >::reverse_iterator" : return _vabamorf.SentenceAnalysis_rend(self)
    def pop_back(self) -> "void" : return _vabamorf.SentenceAnalysis_pop_back(self)
    def erase(self, *args) -> "std::vector< std::pair< std::string,std::vector< Analysis > > >::iterator" : return _vabamorf.SentenceAnalysis_erase(self, *args)
    def __init__(self, *args): 
        this = _vabamorf.new_SentenceAnalysis(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args) -> "void" : return _vabamorf.SentenceAnalysis_push_back(self, *args)
    def front(self) -> "std::vector< std::pair< std::string,std::vector< Analysis > > >::value_type const &" : return _vabamorf.SentenceAnalysis_front(self)
    def back(self) -> "std::vector< std::pair< std::string,std::vector< Analysis > > >::value_type const &" : return _vabamorf.SentenceAnalysis_back(self)
    def assign(self, *args) -> "void" : return _vabamorf.SentenceAnalysis_assign(self, *args)
    def resize(self, *args) -> "void" : return _vabamorf.SentenceAnalysis_resize(self, *args)
    def insert(self, *args) -> "void" : return _vabamorf.SentenceAnalysis_insert(self, *args)
    def reserve(self, *args) -> "void" : return _vabamorf.SentenceAnalysis_reserve(self, *args)
    def capacity(self) -> "std::vector< std::pair< std::string,std::vector< Analysis > > >::size_type" : return _vabamorf.SentenceAnalysis_capacity(self)
    __swig_destroy__ = _vabamorf.delete_SentenceAnalysis
    __del__ = lambda self : None;
SentenceAnalysis_swigregister = _vabamorf.SentenceAnalysis_swigregister
SentenceAnalysis_swigregister(SentenceAnalysis)

class SpellingSuggestions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpellingSuggestions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SpellingSuggestions, name)
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vabamorf.SpellingSuggestions_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vabamorf.SpellingSuggestions___nonzero__(self)
    def __bool__(self) -> "bool" : return _vabamorf.SpellingSuggestions___bool__(self)
    def __len__(self) -> "std::vector< SpellingResults >::size_type" : return _vabamorf.SpellingSuggestions___len__(self)
    def pop(self) -> "std::vector< SpellingResults >::value_type" : return _vabamorf.SpellingSuggestions_pop(self)
    def __getslice__(self, *args) -> "std::vector< SpellingResults,std::allocator< SpellingResults > > *" : return _vabamorf.SpellingSuggestions___getslice__(self, *args)
    def __setslice__(self, *args) -> "void" : return _vabamorf.SpellingSuggestions___setslice__(self, *args)
    def __delslice__(self, *args) -> "void" : return _vabamorf.SpellingSuggestions___delslice__(self, *args)
    def __delitem__(self, *args) -> "void" : return _vabamorf.SpellingSuggestions___delitem__(self, *args)
    def __getitem__(self, *args) -> "std::vector< SpellingResults >::value_type const &" : return _vabamorf.SpellingSuggestions___getitem__(self, *args)
    def __setitem__(self, *args) -> "void" : return _vabamorf.SpellingSuggestions___setitem__(self, *args)
    def append(self, *args) -> "void" : return _vabamorf.SpellingSuggestions_append(self, *args)
    def empty(self) -> "bool" : return _vabamorf.SpellingSuggestions_empty(self)
    def size(self) -> "std::vector< SpellingResults >::size_type" : return _vabamorf.SpellingSuggestions_size(self)
    def clear(self) -> "void" : return _vabamorf.SpellingSuggestions_clear(self)
    def swap(self, *args) -> "void" : return _vabamorf.SpellingSuggestions_swap(self, *args)
    def get_allocator(self) -> "std::vector< SpellingResults >::allocator_type" : return _vabamorf.SpellingSuggestions_get_allocator(self)
    def begin(self) -> "std::vector< SpellingResults >::iterator" : return _vabamorf.SpellingSuggestions_begin(self)
    def end(self) -> "std::vector< SpellingResults >::iterator" : return _vabamorf.SpellingSuggestions_end(self)
    def rbegin(self) -> "std::vector< SpellingResults >::reverse_iterator" : return _vabamorf.SpellingSuggestions_rbegin(self)
    def rend(self) -> "std::vector< SpellingResults >::reverse_iterator" : return _vabamorf.SpellingSuggestions_rend(self)
    def pop_back(self) -> "void" : return _vabamorf.SpellingSuggestions_pop_back(self)
    def erase(self, *args) -> "std::vector< SpellingResults >::iterator" : return _vabamorf.SpellingSuggestions_erase(self, *args)
    def __init__(self, *args): 
        this = _vabamorf.new_SpellingSuggestions(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args) -> "void" : return _vabamorf.SpellingSuggestions_push_back(self, *args)
    def front(self) -> "std::vector< SpellingResults >::value_type const &" : return _vabamorf.SpellingSuggestions_front(self)
    def back(self) -> "std::vector< SpellingResults >::value_type const &" : return _vabamorf.SpellingSuggestions_back(self)
    def assign(self, *args) -> "void" : return _vabamorf.SpellingSuggestions_assign(self, *args)
    def resize(self, *args) -> "void" : return _vabamorf.SpellingSuggestions_resize(self, *args)
    def insert(self, *args) -> "void" : return _vabamorf.SpellingSuggestions_insert(self, *args)
    def reserve(self, *args) -> "void" : return _vabamorf.SpellingSuggestions_reserve(self, *args)
    def capacity(self) -> "std::vector< SpellingResults >::size_type" : return _vabamorf.SpellingSuggestions_capacity(self)
    __swig_destroy__ = _vabamorf.delete_SpellingSuggestions
    __del__ = lambda self : None;
SpellingSuggestions_swigregister = _vabamorf.SpellingSuggestions_swigregister
SpellingSuggestions_swigregister(SpellingSuggestions)

class Syllables(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Syllables, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Syllables, name)
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vabamorf.Syllables_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vabamorf.Syllables___nonzero__(self)
    def __bool__(self) -> "bool" : return _vabamorf.Syllables___bool__(self)
    def __len__(self) -> "std::vector< Syllable >::size_type" : return _vabamorf.Syllables___len__(self)
    def pop(self) -> "std::vector< Syllable >::value_type" : return _vabamorf.Syllables_pop(self)
    def __getslice__(self, *args) -> "std::vector< Syllable,std::allocator< Syllable > > *" : return _vabamorf.Syllables___getslice__(self, *args)
    def __setslice__(self, *args) -> "void" : return _vabamorf.Syllables___setslice__(self, *args)
    def __delslice__(self, *args) -> "void" : return _vabamorf.Syllables___delslice__(self, *args)
    def __delitem__(self, *args) -> "void" : return _vabamorf.Syllables___delitem__(self, *args)
    def __getitem__(self, *args) -> "std::vector< Syllable >::value_type const &" : return _vabamorf.Syllables___getitem__(self, *args)
    def __setitem__(self, *args) -> "void" : return _vabamorf.Syllables___setitem__(self, *args)
    def append(self, *args) -> "void" : return _vabamorf.Syllables_append(self, *args)
    def empty(self) -> "bool" : return _vabamorf.Syllables_empty(self)
    def size(self) -> "std::vector< Syllable >::size_type" : return _vabamorf.Syllables_size(self)
    def clear(self) -> "void" : return _vabamorf.Syllables_clear(self)
    def swap(self, *args) -> "void" : return _vabamorf.Syllables_swap(self, *args)
    def get_allocator(self) -> "std::vector< Syllable >::allocator_type" : return _vabamorf.Syllables_get_allocator(self)
    def begin(self) -> "std::vector< Syllable >::iterator" : return _vabamorf.Syllables_begin(self)
    def end(self) -> "std::vector< Syllable >::iterator" : return _vabamorf.Syllables_end(self)
    def rbegin(self) -> "std::vector< Syllable >::reverse_iterator" : return _vabamorf.Syllables_rbegin(self)
    def rend(self) -> "std::vector< Syllable >::reverse_iterator" : return _vabamorf.Syllables_rend(self)
    def pop_back(self) -> "void" : return _vabamorf.Syllables_pop_back(self)
    def erase(self, *args) -> "std::vector< Syllable >::iterator" : return _vabamorf.Syllables_erase(self, *args)
    def __init__(self, *args): 
        this = _vabamorf.new_Syllables(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args) -> "void" : return _vabamorf.Syllables_push_back(self, *args)
    def front(self) -> "std::vector< Syllable >::value_type const &" : return _vabamorf.Syllables_front(self)
    def back(self) -> "std::vector< Syllable >::value_type const &" : return _vabamorf.Syllables_back(self)
    def assign(self, *args) -> "void" : return _vabamorf.Syllables_assign(self, *args)
    def resize(self, *args) -> "void" : return _vabamorf.Syllables_resize(self, *args)
    def insert(self, *args) -> "void" : return _vabamorf.Syllables_insert(self, *args)
    def reserve(self, *args) -> "void" : return _vabamorf.Syllables_reserve(self, *args)
    def capacity(self) -> "std::vector< Syllable >::size_type" : return _vabamorf.Syllables_capacity(self)
    __swig_destroy__ = _vabamorf.delete_Syllables
    __del__ = lambda self : None;
Syllables_swigregister = _vabamorf.Syllables_swigregister
Syllables_swigregister(Syllables)

class SentenceSyllables(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SentenceSyllables, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SentenceSyllables, name)
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vabamorf.SentenceSyllables_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vabamorf.SentenceSyllables___nonzero__(self)
    def __bool__(self) -> "bool" : return _vabamorf.SentenceSyllables___bool__(self)
    def __len__(self) -> "std::vector< std::vector< Syllable > >::size_type" : return _vabamorf.SentenceSyllables___len__(self)
    def pop(self) -> "std::vector< std::vector< Syllable > >::value_type" : return _vabamorf.SentenceSyllables_pop(self)
    def __getslice__(self, *args) -> "std::vector< std::vector< Syllable,std::allocator< Syllable > >,std::allocator< std::vector< Syllable,std::allocator< Syllable > > > > *" : return _vabamorf.SentenceSyllables___getslice__(self, *args)
    def __setslice__(self, *args) -> "void" : return _vabamorf.SentenceSyllables___setslice__(self, *args)
    def __delslice__(self, *args) -> "void" : return _vabamorf.SentenceSyllables___delslice__(self, *args)
    def __delitem__(self, *args) -> "void" : return _vabamorf.SentenceSyllables___delitem__(self, *args)
    def __getitem__(self, *args) -> "std::vector< std::vector< Syllable > >::value_type const &" : return _vabamorf.SentenceSyllables___getitem__(self, *args)
    def __setitem__(self, *args) -> "void" : return _vabamorf.SentenceSyllables___setitem__(self, *args)
    def append(self, *args) -> "void" : return _vabamorf.SentenceSyllables_append(self, *args)
    def empty(self) -> "bool" : return _vabamorf.SentenceSyllables_empty(self)
    def size(self) -> "std::vector< std::vector< Syllable > >::size_type" : return _vabamorf.SentenceSyllables_size(self)
    def clear(self) -> "void" : return _vabamorf.SentenceSyllables_clear(self)
    def swap(self, *args) -> "void" : return _vabamorf.SentenceSyllables_swap(self, *args)
    def get_allocator(self) -> "std::vector< std::vector< Syllable > >::allocator_type" : return _vabamorf.SentenceSyllables_get_allocator(self)
    def begin(self) -> "std::vector< std::vector< Syllable > >::iterator" : return _vabamorf.SentenceSyllables_begin(self)
    def end(self) -> "std::vector< std::vector< Syllable > >::iterator" : return _vabamorf.SentenceSyllables_end(self)
    def rbegin(self) -> "std::vector< std::vector< Syllable > >::reverse_iterator" : return _vabamorf.SentenceSyllables_rbegin(self)
    def rend(self) -> "std::vector< std::vector< Syllable > >::reverse_iterator" : return _vabamorf.SentenceSyllables_rend(self)
    def pop_back(self) -> "void" : return _vabamorf.SentenceSyllables_pop_back(self)
    def erase(self, *args) -> "std::vector< std::vector< Syllable > >::iterator" : return _vabamorf.SentenceSyllables_erase(self, *args)
    def __init__(self, *args): 
        this = _vabamorf.new_SentenceSyllables(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args) -> "void" : return _vabamorf.SentenceSyllables_push_back(self, *args)
    def front(self) -> "std::vector< std::vector< Syllable > >::value_type const &" : return _vabamorf.SentenceSyllables_front(self)
    def back(self) -> "std::vector< std::vector< Syllable > >::value_type const &" : return _vabamorf.SentenceSyllables_back(self)
    def assign(self, *args) -> "void" : return _vabamorf.SentenceSyllables_assign(self, *args)
    def resize(self, *args) -> "void" : return _vabamorf.SentenceSyllables_resize(self, *args)
    def insert(self, *args) -> "void" : return _vabamorf.SentenceSyllables_insert(self, *args)
    def reserve(self, *args) -> "void" : return _vabamorf.SentenceSyllables_reserve(self, *args)
    def capacity(self) -> "std::vector< std::vector< Syllable > >::size_type" : return _vabamorf.SentenceSyllables_capacity(self)
    __swig_destroy__ = _vabamorf.delete_SentenceSyllables
    __del__ = lambda self : None;
SentenceSyllables_swigregister = _vabamorf.SentenceSyllables_swigregister
SentenceSyllables_swigregister(SentenceSyllables)


def FSCInit() -> "bool" :
  return _vabamorf.FSCInit()
FSCInit = _vabamorf.FSCInit

def FSCTerminate() -> "void" :
  return _vabamorf.FSCTerminate()
FSCTerminate = _vabamorf.FSCTerminate
class Analysis(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Analysis, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Analysis, name)
    __repr__ = _swig_repr
    __swig_setmethods__["root"] = _vabamorf.Analysis_root_set
    __swig_getmethods__["root"] = _vabamorf.Analysis_root_get
    if _newclass:root = _swig_property(_vabamorf.Analysis_root_get, _vabamorf.Analysis_root_set)
    __swig_setmethods__["ending"] = _vabamorf.Analysis_ending_set
    __swig_getmethods__["ending"] = _vabamorf.Analysis_ending_get
    if _newclass:ending = _swig_property(_vabamorf.Analysis_ending_get, _vabamorf.Analysis_ending_set)
    __swig_setmethods__["clitic"] = _vabamorf.Analysis_clitic_set
    __swig_getmethods__["clitic"] = _vabamorf.Analysis_clitic_get
    if _newclass:clitic = _swig_property(_vabamorf.Analysis_clitic_get, _vabamorf.Analysis_clitic_set)
    __swig_setmethods__["partofspeech"] = _vabamorf.Analysis_partofspeech_set
    __swig_getmethods__["partofspeech"] = _vabamorf.Analysis_partofspeech_get
    if _newclass:partofspeech = _swig_property(_vabamorf.Analysis_partofspeech_get, _vabamorf.Analysis_partofspeech_set)
    __swig_setmethods__["form"] = _vabamorf.Analysis_form_set
    __swig_getmethods__["form"] = _vabamorf.Analysis_form_get
    if _newclass:form = _swig_property(_vabamorf.Analysis_form_get, _vabamorf.Analysis_form_set)
    def __init__(self, *args): 
        this = _vabamorf.new_Analysis(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vabamorf.delete_Analysis
    __del__ = lambda self : None;
Analysis_swigregister = _vabamorf.Analysis_swigregister
Analysis_swigregister(Analysis)

class Syllable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Syllable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Syllable, name)
    __repr__ = _swig_repr
    __swig_setmethods__["syllable"] = _vabamorf.Syllable_syllable_set
    __swig_getmethods__["syllable"] = _vabamorf.Syllable_syllable_get
    if _newclass:syllable = _swig_property(_vabamorf.Syllable_syllable_get, _vabamorf.Syllable_syllable_set)
    __swig_setmethods__["quantity"] = _vabamorf.Syllable_quantity_set
    __swig_getmethods__["quantity"] = _vabamorf.Syllable_quantity_get
    if _newclass:quantity = _swig_property(_vabamorf.Syllable_quantity_get, _vabamorf.Syllable_quantity_set)
    __swig_setmethods__["accent"] = _vabamorf.Syllable_accent_set
    __swig_getmethods__["accent"] = _vabamorf.Syllable_accent_get
    if _newclass:accent = _swig_property(_vabamorf.Syllable_accent_get, _vabamorf.Syllable_accent_set)
    def __init__(self, *args): 
        this = _vabamorf.new_Syllable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vabamorf.delete_Syllable
    __del__ = lambda self : None;
Syllable_swigregister = _vabamorf.Syllable_swigregister
Syllable_swigregister(Syllable)

class SpellingResults(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpellingResults, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SpellingResults, name)
    __repr__ = _swig_repr
    __swig_setmethods__["word"] = _vabamorf.SpellingResults_word_set
    __swig_getmethods__["word"] = _vabamorf.SpellingResults_word_get
    if _newclass:word = _swig_property(_vabamorf.SpellingResults_word_get, _vabamorf.SpellingResults_word_set)
    __swig_setmethods__["spelling"] = _vabamorf.SpellingResults_spelling_set
    __swig_getmethods__["spelling"] = _vabamorf.SpellingResults_spelling_get
    if _newclass:spelling = _swig_property(_vabamorf.SpellingResults_spelling_get, _vabamorf.SpellingResults_spelling_set)
    __swig_setmethods__["suggestions"] = _vabamorf.SpellingResults_suggestions_set
    __swig_getmethods__["suggestions"] = _vabamorf.SpellingResults_suggestions_get
    if _newclass:suggestions = _swig_property(_vabamorf.SpellingResults_suggestions_get, _vabamorf.SpellingResults_suggestions_set)
    def __init__(self, *args): 
        this = _vabamorf.new_SpellingResults(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vabamorf.delete_SpellingResults
    __del__ = lambda self : None;
SpellingResults_swigregister = _vabamorf.SpellingResults_swigregister
SpellingResults_swigregister(SpellingResults)

class Vabamorf(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vabamorf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vabamorf, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vabamorf.new_Vabamorf(*args)
        try: self.this.append(this)
        except: self.this = this
    def analyze(self, *args) -> "std::vector< WordAnalysis,std::allocator< WordAnalysis > >" : return _vabamorf.Vabamorf_analyze(self, *args)
    def disambiguate(self, *args) -> "std::vector< WordAnalysis,std::allocator< WordAnalysis > >" : return _vabamorf.Vabamorf_disambiguate(self, *args)
    def spellcheck(self, *args) -> "SpellingSuggestions" : return _vabamorf.Vabamorf_spellcheck(self, *args)
    def synthesize(self, *args) -> "StringVector" : return _vabamorf.Vabamorf_synthesize(self, *args)
    __swig_destroy__ = _vabamorf.delete_Vabamorf
    __del__ = lambda self : None;
Vabamorf_swigregister = _vabamorf.Vabamorf_swigregister
Vabamorf_swigregister(Vabamorf)


def syllabify(*args) -> "Syllables" :
  return _vabamorf.syllabify(*args)
syllabify = _vabamorf.syllabify

def syllabifySentence(*args) -> "SentenceSyllables" :
  return _vabamorf.syllabifySentence(*args)
syllabifySentence = _vabamorf.syllabifySentence
# This file is compatible with both classic and new-style classes.


