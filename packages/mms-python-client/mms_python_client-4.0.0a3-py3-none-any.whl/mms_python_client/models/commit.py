# coding: utf-8

"""
    MMS Example API

    Documentation for MMS API  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from mms_python_client.configuration import Configuration


class Commit(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'deleted': 'list[ElementVersion]',
        'added': 'list[ElementVersion]',
        'updated': 'list[ElementVersion]',
        'comment': 'str',
        'source': 'str',
        'id': 'str',
        'project_id': 'str',
        'ref_id': 'str',
        'creator': 'str',
        'doc_id': 'str',
        'created': 'str',
        'commit_id': 'str'
    }

    attribute_map = {
        'deleted': 'deleted',
        'added': 'added',
        'updated': 'updated',
        'comment': 'comment',
        'source': 'source',
        'id': 'id',
        'project_id': '_projectId',
        'ref_id': '_refId',
        'creator': '_creator',
        'doc_id': '_docId',
        'created': '_created',
        'commit_id': '_commitId'
    }

    def __init__(self, deleted=None, added=None, updated=None, comment=None, source=None, id=None, project_id=None, ref_id=None, creator=None, doc_id=None, created=None, commit_id=None, local_vars_configuration=None):  # noqa: E501
        """Commit - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._deleted = None
        self._added = None
        self._updated = None
        self._comment = None
        self._source = None
        self._id = None
        self._project_id = None
        self._ref_id = None
        self._creator = None
        self._doc_id = None
        self._created = None
        self._commit_id = None
        self.discriminator = None

        if deleted is not None:
            self.deleted = deleted
        if added is not None:
            self.added = added
        if updated is not None:
            self.updated = updated
        if comment is not None:
            self.comment = comment
        if source is not None:
            self.source = source
        self.id = id
        if project_id is not None:
            self.project_id = project_id
        if ref_id is not None:
            self.ref_id = ref_id
        if creator is not None:
            self.creator = creator
        if doc_id is not None:
            self.doc_id = doc_id
        if created is not None:
            self.created = created
        if commit_id is not None:
            self.commit_id = commit_id

    @property
    def deleted(self):
        """Gets the deleted of this Commit.  # noqa: E501


        :return: The deleted of this Commit.  # noqa: E501
        :rtype: list[ElementVersion]
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Commit.


        :param deleted: The deleted of this Commit.  # noqa: E501
        :type: list[ElementVersion]
        """

        self._deleted = deleted

    @property
    def added(self):
        """Gets the added of this Commit.  # noqa: E501


        :return: The added of this Commit.  # noqa: E501
        :rtype: list[ElementVersion]
        """
        return self._added

    @added.setter
    def added(self, added):
        """Sets the added of this Commit.


        :param added: The added of this Commit.  # noqa: E501
        :type: list[ElementVersion]
        """

        self._added = added

    @property
    def updated(self):
        """Gets the updated of this Commit.  # noqa: E501


        :return: The updated of this Commit.  # noqa: E501
        :rtype: list[ElementVersion]
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Commit.


        :param updated: The updated of this Commit.  # noqa: E501
        :type: list[ElementVersion]
        """

        self._updated = updated

    @property
    def comment(self):
        """Gets the comment of this Commit.  # noqa: E501


        :return: The comment of this Commit.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this Commit.


        :param comment: The comment of this Commit.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def source(self):
        """Gets the source of this Commit.  # noqa: E501


        :return: The source of this Commit.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Commit.


        :param source: The source of this Commit.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def id(self):
        """Gets the id of this Commit.  # noqa: E501


        :return: The id of this Commit.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Commit.


        :param id: The id of this Commit.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def project_id(self):
        """Gets the project_id of this Commit.  # noqa: E501


        :return: The project_id of this Commit.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this Commit.


        :param project_id: The project_id of this Commit.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def ref_id(self):
        """Gets the ref_id of this Commit.  # noqa: E501


        :return: The ref_id of this Commit.  # noqa: E501
        :rtype: str
        """
        return self._ref_id

    @ref_id.setter
    def ref_id(self, ref_id):
        """Sets the ref_id of this Commit.


        :param ref_id: The ref_id of this Commit.  # noqa: E501
        :type: str
        """

        self._ref_id = ref_id

    @property
    def creator(self):
        """Gets the creator of this Commit.  # noqa: E501


        :return: The creator of this Commit.  # noqa: E501
        :rtype: str
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this Commit.


        :param creator: The creator of this Commit.  # noqa: E501
        :type: str
        """

        self._creator = creator

    @property
    def doc_id(self):
        """Gets the doc_id of this Commit.  # noqa: E501


        :return: The doc_id of this Commit.  # noqa: E501
        :rtype: str
        """
        return self._doc_id

    @doc_id.setter
    def doc_id(self, doc_id):
        """Sets the doc_id of this Commit.


        :param doc_id: The doc_id of this Commit.  # noqa: E501
        :type: str
        """

        self._doc_id = doc_id

    @property
    def created(self):
        """Gets the created of this Commit.  # noqa: E501


        :return: The created of this Commit.  # noqa: E501
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Commit.


        :param created: The created of this Commit.  # noqa: E501
        :type: str
        """

        self._created = created

    @property
    def commit_id(self):
        """Gets the commit_id of this Commit.  # noqa: E501


        :return: The commit_id of this Commit.  # noqa: E501
        :rtype: str
        """
        return self._commit_id

    @commit_id.setter
    def commit_id(self, commit_id):
        """Sets the commit_id of this Commit.


        :param commit_id: The commit_id of this Commit.  # noqa: E501
        :type: str
        """

        self._commit_id = commit_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Commit):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Commit):
            return True

        return self.to_dict() != other.to_dict()
