# coding: utf-8

"""
    MMS Example API

    Documentation for MMS API  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from mms_python_client.configuration import Configuration


class PermissionLookupResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'messages': 'list[str]',
        'rejected': 'list[Rejection]',
        'lookups': 'list[PermissionLookup]',
        'all_passed': 'bool'
    }

    attribute_map = {
        'messages': 'messages',
        'rejected': 'rejected',
        'lookups': 'lookups',
        'all_passed': 'allPassed'
    }

    def __init__(self, messages=None, rejected=None, lookups=None, all_passed=None, local_vars_configuration=None):  # noqa: E501
        """PermissionLookupResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._messages = None
        self._rejected = None
        self._lookups = None
        self._all_passed = None
        self.discriminator = None

        self.messages = messages
        self.rejected = rejected
        if lookups is not None:
            self.lookups = lookups
        if all_passed is not None:
            self.all_passed = all_passed

    @property
    def messages(self):
        """Gets the messages of this PermissionLookupResponse.  # noqa: E501


        :return: The messages of this PermissionLookupResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this PermissionLookupResponse.


        :param messages: The messages of this PermissionLookupResponse.  # noqa: E501
        :type: list[str]
        """

        self._messages = messages

    @property
    def rejected(self):
        """Gets the rejected of this PermissionLookupResponse.  # noqa: E501


        :return: The rejected of this PermissionLookupResponse.  # noqa: E501
        :rtype: list[Rejection]
        """
        return self._rejected

    @rejected.setter
    def rejected(self, rejected):
        """Sets the rejected of this PermissionLookupResponse.


        :param rejected: The rejected of this PermissionLookupResponse.  # noqa: E501
        :type: list[Rejection]
        """

        self._rejected = rejected

    @property
    def lookups(self):
        """Gets the lookups of this PermissionLookupResponse.  # noqa: E501


        :return: The lookups of this PermissionLookupResponse.  # noqa: E501
        :rtype: list[PermissionLookup]
        """
        return self._lookups

    @lookups.setter
    def lookups(self, lookups):
        """Sets the lookups of this PermissionLookupResponse.


        :param lookups: The lookups of this PermissionLookupResponse.  # noqa: E501
        :type: list[PermissionLookup]
        """

        self._lookups = lookups

    @property
    def all_passed(self):
        """Gets the all_passed of this PermissionLookupResponse.  # noqa: E501


        :return: The all_passed of this PermissionLookupResponse.  # noqa: E501
        :rtype: bool
        """
        return self._all_passed

    @all_passed.setter
    def all_passed(self, all_passed):
        """Sets the all_passed of this PermissionLookupResponse.


        :param all_passed: The all_passed of this PermissionLookupResponse.  # noqa: E501
        :type: bool
        """

        self._all_passed = all_passed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PermissionLookupResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PermissionLookupResponse):
            return True

        return self.to_dict() != other.to_dict()
