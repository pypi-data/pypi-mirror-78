# coding: utf-8

"""
    MMS Example API

    Documentation for MMS API  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from mms_python_client.configuration import Configuration


class PermissionUpdate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'action': 'str',
        'name': 'str',
        'role': 'str',
        'org_id': 'str',
        'org_name': 'str',
        'project_id': 'str',
        'project_name': 'str',
        'branch_id': 'str',
        'inherited': 'bool'
    }

    attribute_map = {
        'action': 'action',
        'name': 'name',
        'role': 'role',
        'org_id': 'orgId',
        'org_name': 'orgName',
        'project_id': 'projectId',
        'project_name': 'projectName',
        'branch_id': 'branchId',
        'inherited': 'inherited'
    }

    def __init__(self, action=None, name=None, role=None, org_id=None, org_name=None, project_id=None, project_name=None, branch_id=None, inherited=None, local_vars_configuration=None):  # noqa: E501
        """PermissionUpdate - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._action = None
        self._name = None
        self._role = None
        self._org_id = None
        self._org_name = None
        self._project_id = None
        self._project_name = None
        self._branch_id = None
        self._inherited = None
        self.discriminator = None

        if action is not None:
            self.action = action
        if name is not None:
            self.name = name
        if role is not None:
            self.role = role
        if org_id is not None:
            self.org_id = org_id
        if org_name is not None:
            self.org_name = org_name
        if project_id is not None:
            self.project_id = project_id
        if project_name is not None:
            self.project_name = project_name
        if branch_id is not None:
            self.branch_id = branch_id
        if inherited is not None:
            self.inherited = inherited

    @property
    def action(self):
        """Gets the action of this PermissionUpdate.  # noqa: E501


        :return: The action of this PermissionUpdate.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this PermissionUpdate.


        :param action: The action of this PermissionUpdate.  # noqa: E501
        :type: str
        """
        allowed_values = ["ADD", "REMOVE"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and action not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"  # noqa: E501
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def name(self):
        """Gets the name of this PermissionUpdate.  # noqa: E501


        :return: The name of this PermissionUpdate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PermissionUpdate.


        :param name: The name of this PermissionUpdate.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def role(self):
        """Gets the role of this PermissionUpdate.  # noqa: E501


        :return: The role of this PermissionUpdate.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this PermissionUpdate.


        :param role: The role of this PermissionUpdate.  # noqa: E501
        :type: str
        """

        self._role = role

    @property
    def org_id(self):
        """Gets the org_id of this PermissionUpdate.  # noqa: E501


        :return: The org_id of this PermissionUpdate.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this PermissionUpdate.


        :param org_id: The org_id of this PermissionUpdate.  # noqa: E501
        :type: str
        """

        self._org_id = org_id

    @property
    def org_name(self):
        """Gets the org_name of this PermissionUpdate.  # noqa: E501


        :return: The org_name of this PermissionUpdate.  # noqa: E501
        :rtype: str
        """
        return self._org_name

    @org_name.setter
    def org_name(self, org_name):
        """Sets the org_name of this PermissionUpdate.


        :param org_name: The org_name of this PermissionUpdate.  # noqa: E501
        :type: str
        """

        self._org_name = org_name

    @property
    def project_id(self):
        """Gets the project_id of this PermissionUpdate.  # noqa: E501


        :return: The project_id of this PermissionUpdate.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this PermissionUpdate.


        :param project_id: The project_id of this PermissionUpdate.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def project_name(self):
        """Gets the project_name of this PermissionUpdate.  # noqa: E501


        :return: The project_name of this PermissionUpdate.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this PermissionUpdate.


        :param project_name: The project_name of this PermissionUpdate.  # noqa: E501
        :type: str
        """

        self._project_name = project_name

    @property
    def branch_id(self):
        """Gets the branch_id of this PermissionUpdate.  # noqa: E501


        :return: The branch_id of this PermissionUpdate.  # noqa: E501
        :rtype: str
        """
        return self._branch_id

    @branch_id.setter
    def branch_id(self, branch_id):
        """Sets the branch_id of this PermissionUpdate.


        :param branch_id: The branch_id of this PermissionUpdate.  # noqa: E501
        :type: str
        """

        self._branch_id = branch_id

    @property
    def inherited(self):
        """Gets the inherited of this PermissionUpdate.  # noqa: E501


        :return: The inherited of this PermissionUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._inherited

    @inherited.setter
    def inherited(self, inherited):
        """Sets the inherited of this PermissionUpdate.


        :param inherited: The inherited of this PermissionUpdate.  # noqa: E501
        :type: bool
        """

        self._inherited = inherited

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PermissionUpdate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PermissionUpdate):
            return True

        return self.to_dict() != other.to_dict()
