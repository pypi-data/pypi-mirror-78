# coding: utf-8

"""
    MMS Example API

    Documentation for MMS API  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from mms_python_client.configuration import Configuration


class PermissionLookup(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'org_id': 'str',
        'project_id': 'str',
        'ref_id': 'str',
        'privilege': 'str',
        'allow_anon_if_public': 'bool',
        'has_privilege': 'bool'
    }

    attribute_map = {
        'type': 'type',
        'org_id': 'orgId',
        'project_id': 'projectId',
        'ref_id': 'refId',
        'privilege': 'privilege',
        'allow_anon_if_public': 'allowAnonIfPublic',
        'has_privilege': 'hasPrivilege'
    }

    def __init__(self, type=None, org_id=None, project_id=None, ref_id=None, privilege=None, allow_anon_if_public=None, has_privilege=None, local_vars_configuration=None):  # noqa: E501
        """PermissionLookup - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._org_id = None
        self._project_id = None
        self._ref_id = None
        self._privilege = None
        self._allow_anon_if_public = None
        self._has_privilege = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if org_id is not None:
            self.org_id = org_id
        if project_id is not None:
            self.project_id = project_id
        if ref_id is not None:
            self.ref_id = ref_id
        if privilege is not None:
            self.privilege = privilege
        if allow_anon_if_public is not None:
            self.allow_anon_if_public = allow_anon_if_public
        if has_privilege is not None:
            self.has_privilege = has_privilege

    @property
    def type(self):
        """Gets the type of this PermissionLookup.  # noqa: E501


        :return: The type of this PermissionLookup.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PermissionLookup.


        :param type: The type of this PermissionLookup.  # noqa: E501
        :type: str
        """
        allowed_values = ["ORG", "PROJECT", "BRANCH"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def org_id(self):
        """Gets the org_id of this PermissionLookup.  # noqa: E501


        :return: The org_id of this PermissionLookup.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this PermissionLookup.


        :param org_id: The org_id of this PermissionLookup.  # noqa: E501
        :type: str
        """

        self._org_id = org_id

    @property
    def project_id(self):
        """Gets the project_id of this PermissionLookup.  # noqa: E501


        :return: The project_id of this PermissionLookup.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this PermissionLookup.


        :param project_id: The project_id of this PermissionLookup.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def ref_id(self):
        """Gets the ref_id of this PermissionLookup.  # noqa: E501


        :return: The ref_id of this PermissionLookup.  # noqa: E501
        :rtype: str
        """
        return self._ref_id

    @ref_id.setter
    def ref_id(self, ref_id):
        """Sets the ref_id of this PermissionLookup.


        :param ref_id: The ref_id of this PermissionLookup.  # noqa: E501
        :type: str
        """

        self._ref_id = ref_id

    @property
    def privilege(self):
        """Gets the privilege of this PermissionLookup.  # noqa: E501


        :return: The privilege of this PermissionLookup.  # noqa: E501
        :rtype: str
        """
        return self._privilege

    @privilege.setter
    def privilege(self, privilege):
        """Sets the privilege of this PermissionLookup.


        :param privilege: The privilege of this PermissionLookup.  # noqa: E501
        :type: str
        """
        allowed_values = ["ORG_READ", "ORG_EDIT", "ORG_UPDATE_PERMISSIONS", "ORG_READ_PERMISSIONS", "ORG_CREATE_PROJECT", "ORG_DELETE", "PROJECT_READ", "PROJECT_EDIT", "PROJECT_READ_COMMITS", "PROJECT_CREATE_BRANCH", "PROJECT_DELETE", "PROJECT_UPDATE_PERMISSIONS", "PROJECT_READ_PERMISSIONS", "PROJECT_CREATE_WEBHOOKS", "BRANCH_READ", "BRANCH_EDIT_CONTENT", "BRANCH_DELETE", "BRANCH_UPDATE_PERMISSIONS", "BRANCH_READ_PERMISSIONS"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and privilege not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `privilege` ({0}), must be one of {1}"  # noqa: E501
                .format(privilege, allowed_values)
            )

        self._privilege = privilege

    @property
    def allow_anon_if_public(self):
        """Gets the allow_anon_if_public of this PermissionLookup.  # noqa: E501


        :return: The allow_anon_if_public of this PermissionLookup.  # noqa: E501
        :rtype: bool
        """
        return self._allow_anon_if_public

    @allow_anon_if_public.setter
    def allow_anon_if_public(self, allow_anon_if_public):
        """Sets the allow_anon_if_public of this PermissionLookup.


        :param allow_anon_if_public: The allow_anon_if_public of this PermissionLookup.  # noqa: E501
        :type: bool
        """

        self._allow_anon_if_public = allow_anon_if_public

    @property
    def has_privilege(self):
        """Gets the has_privilege of this PermissionLookup.  # noqa: E501


        :return: The has_privilege of this PermissionLookup.  # noqa: E501
        :rtype: bool
        """
        return self._has_privilege

    @has_privilege.setter
    def has_privilege(self, has_privilege):
        """Sets the has_privilege of this PermissionLookup.


        :param has_privilege: The has_privilege of this PermissionLookup.  # noqa: E501
        :type: bool
        """

        self._has_privilege = has_privilege

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PermissionLookup):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PermissionLookup):
            return True

        return self.to_dict() != other.to_dict()
