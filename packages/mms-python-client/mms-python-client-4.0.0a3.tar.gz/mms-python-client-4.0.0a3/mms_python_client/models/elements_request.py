# coding: utf-8

"""
    MMS Example API

    Documentation for MMS API  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from mms_python_client.configuration import Configuration


class ElementsRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'source': 'str',
        'comment': 'str',
        'elements': 'list[object]'
    }

    attribute_map = {
        'source': 'source',
        'comment': 'comment',
        'elements': 'elements'
    }

    def __init__(self, source=None, comment=None, elements=None, local_vars_configuration=None):  # noqa: E501
        """ElementsRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._source = None
        self._comment = None
        self._elements = None
        self.discriminator = None

        self.source = source
        self.comment = comment
        self.elements = elements

    @property
    def source(self):
        """Gets the source of this ElementsRequest.  # noqa: E501


        :return: The source of this ElementsRequest.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ElementsRequest.


        :param source: The source of this ElementsRequest.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def comment(self):
        """Gets the comment of this ElementsRequest.  # noqa: E501


        :return: The comment of this ElementsRequest.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this ElementsRequest.


        :param comment: The comment of this ElementsRequest.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def elements(self):
        """Gets the elements of this ElementsRequest.  # noqa: E501


        :return: The elements of this ElementsRequest.  # noqa: E501
        :rtype: list[object]
        """
        return self._elements

    @elements.setter
    def elements(self, elements):
        """Sets the elements of this ElementsRequest.


        :param elements: The elements of this ElementsRequest.  # noqa: E501
        :type: list[object]
        """
        if self.local_vars_configuration.client_side_validation and elements is None:  # noqa: E501
            raise ValueError("Invalid value for `elements`, must not be `None`")  # noqa: E501

        self._elements = elements

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ElementsRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ElementsRequest):
            return True

        return self.to_dict() != other.to_dict()
