# boto3-stubs

[![PyPI - {{ package.pypi_name }}](https://img.shields.io/pypi/v/{{ package.pypi_name }}.svg?color=blue)](https://pypi.org/project/{{ package.pypi_name }})
[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/{{ package.pypi_name }}.svg?color=blue)](https://pypi.org/project/{{ package.pypi_name }})
[![Docs](https://img.shields.io/readthedocs/mypy-boto3-builder.svg?color=blue)](https://mypy-boto3-builder.readthedocs.io/)

Type annotations for
[boto3 {{ boto3_version }}](https://boto3.amazonaws.com/v1/documentation/api/{{ boto3_version }}/index.html)
compatible with [mypy](https://github.com/python/mypy), [VSCode](https://code.visualstudio.com/),
[PyCharm](https://www.jetbrains.com/pycharm/) and other tools.

Generated by [mypy-boto3-buider {{ builder_version }}](https://github.com/vemel/mypy_boto3_builder).

- [boto3-stubs](#boto3-stubs)
  - [How to install](#how-to-install)
    - [Basic](#basic)
    - [Dynamic type annotations](#dynamic-type-annotations)
  - [How to uninstall](#how-to-uninstall)
  - [Usage](#usage)
    - [Basic](#basic-1)
    - [Setup your IDE](#setup-your-ide)
    - [VSCode](#vscode)
    - [PyCharm](#pycharm)
    - [Other IDEs](#other-ides)
    - [Explicit type annotations](#explicit-type-annotations)
    - [Pylint compatibility](#pylint-compatibility)
  - [How it works](#how-it-works)
  - [What's new](#whats-new)
    - [Implemented features](#implemented-features)
    - [Latest changes](#latest-changes)
    - [Versioning](#versioning)
  - [Thank you](#thank-you)
  - [Submodules](#submodules)

## How to install

### Basic

Make sure you have [mypy](https://github.com/python/mypy) installed and activated in your IDE.

Install `boto3-stubs`, to add type annotations for `boto3` package.

```bash
# install type annotations just for boto3
python -m pip install boto3-stubs

# install `boto3` type annotations
# for ec2, s3, rds, lambda, sqs, dynamo and cloudformation
# Consumes ~7 MB of space
python -m pip install 'boto3-stubs[essential]'

# or install annotations for services you use
python -m pip install 'boto3-stubs[acm,apigateway]'
```

Use `boto3` with `{{ master_module_name }}` in your project and enjoy type checking.

```python
import boto3

import {{ master_module_name }}_dynamodb as dynamodb

# Enjoy auto-complete from now
client: dynamodb.DynamoDBClient = boto3.client("dynamodb")

# argument hints and correct return type is provided by boto3-stubs
client.query("my_table")
```

### Dynamic type annotations

`mypy_boto3` command generates `boto3.client/resource` type annotations for
all installed services.

```bash
# Run this command after you add or remove service packages
python -m mypy_boto3
```

Generated type annotations provide overloads for `boto3.client` and `boto3.resource`,
`boto3.Session.client` and `boto3.Session.resource` functions,
so explicit type annotations are not needed.

- `mypy` supports function overloads as expected
- `PyCharm` also supports function overloads, but consumes a lot of RAM, use carefully if you have many services installed
- `VSCode` does not currently support function overloads, use explicit type annotations

```python
import boto3

# Type is discovered correctly by mypy and PyCharm
# VSCode still needs explicit type annotations
client = boto3.client("s3")
resource = boto3.resource("s3")

session_client = boto3.Session().client("s3")
session_resource = boto3.Session().resource("s3")
```

## How to uninstall

```bash
# delete dynamic type annotations if you use them
python -m mypy_boto3 --clean

# uninstall boto3-stubs
python -m pip uninstall -y boto3-stubs

# uninstall mypy-boto3 and submodules
python -m pip freeze | grep mypy-boto3 | xargs python -m pip uninstall -y
```

## Usage

### Basic

- Install [mypy](https://github.com/python/mypy) and optionally enable it in your IDE
- Install [boto3](https://github.com/boto/boto3)
- VSCode: Use explicit types for `boto3.client`, `boto3.session.client`,
  `client.get_waiter` and `client.get_paginator` calls to enjoy code auto-complete and
  correct type hints

```python
import boto3

import mypy_boto3_s3 as s3

# you need explicit type annotatins only if your IDE do not support
# function overloads (e.g. VSCode). For PyCharm anf mypy you do not need
# to set types explicitly
client: s3.S3Client = boto3.client("s3")

# IDE autocomplete suggests function name and arguments here
client.create_bucket(Bucket="bucket")

# (mypy) error: Missing positional argument "Key" in call to "get_object" of "S3Client"
client.get_object(Bucket="bucket")

# (mypy) error: Argument "Key" to "get_object" of "S3Client" has incompatible type "None"; expected "str"
client.get_object(Bucket="bucket", Key=None)

resource: s3.S3ServiceResource = boto3.Session(region_name="us-west-1").resource("s3")

# IDE autocomplete suggests function name and arguments here
bucket = resource.Bucket("bucket")

# (mypy) error: Unexpected keyword argument "key" for "upload_file" of "Bucket"; did you mean "Key"?
bucket.upload_file(Filename="my.txt", key="my-txt")

# waiters and paginators are annotated as well
waiter: s3.BucketExistsWaiter = client.get_waiter("bucket_exists")
paginator: s3.ListMultipartUploadsPaginator = client.get_paginator(
    "list_multipart_uploads"
)
```

### Setup your IDE

### VSCode

- Install [Official Python extension](https://github.com/microsoft/vscode-python)
- Install [mypy](https://github.com/python/mypy)
- Activate `mypy` checking in settings: `"python.linting.mypyEnabled": true`
- Install `boto3-stubs` with `boto3` services you use
- Use [explicit type annotations](#explicit-type-annotations) because
  function overload [is not fully supported](https://github.com/microsoft/python-language-server/issues/1648)
  in `Python` extension.

### PyCharm

- Install [mypy plugin](https://plugins.jetbrains.com/plugin/11086-mypy/)
- Install [mypy](https://github.com/python/mypy)
- Set path to `mypy` in `mypy plugin` settings
- Install `boto3-stubs` with `boto3` services you use
- Use [explicit type annotations](#explicit-type-annotations) for
  `session.client` and `session.resource` calls

Official `mypy` plugin does not work for some reason for me. If you know
how to setup it correctly, please hep me to update this section.

### Other IDEs

- Install [mypy](https://github.com/python/mypy)
- Set path to `mypy` in `mypy plugin` settings
- Install `boto3-stubs` with `boto3` services you use

You need [explicit type annotations](#explicit-type-annotations) for code
auto-complete, but `mypy` works even without them.

### Explicit type annotations

Automatic type discovery is too stressful for PyCharm and does not work in VSCode.
So implicit type annotations support has been removed as it is not useful.

To get full advantage of `boto3-stubs`, you can set types explicitly.

```python
import boto3

import mypy_boto3_ec2 as ec2

# covered by boto3-stubs, no explicit type required
session = boto3.session.Session(region_name="us-west-1")

# by default it is Any, but we explicitly set it to EC2Client
# to make method auto-complete work
ec2_client: ec2.EC2Client = boto3.client("ec2", region_name="us-west-1")

# same for resource
ec2_resource: ec2.EC2ServiceResource = session.resource("ec2")

# PyCharm does not need explicit type annotations here, but VSCode does
bundle_task_complete_waiter: ec2.BundleTaskCompleteWaiter = ec2_client.get_waiter("bundle_task_complete")
describe_volumes_paginator: ec2.DescribeVolumesPaginator = ec2_client.get_paginator("describe_volumes")

# ec2_client, ec2_resource, bundle_task_complete_waiter and describe_volumes_paginator
# now have correct type so IDE autocomplete for methods, arguments and return types
# works as expected. You do not need to specify types explicitly further
```

### Pylint compatibility

It is totally safe to use `TYPE_CHECKING` flag in order to avoid `boto3-stubs`
dependency in production.
However, there is an issue in `pylint` that it complains about undefined
variables. To fix it, set all types to `object` in non-`TYPE_CHECKING` mode.

```python
import boto3
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from mypy_boto3_ec2 import EC2Client, EC2ServiceResource
    from mypy_boto3_ec2.waiters import BundleTaskCompleteWaiter
    from mypy_boto3_ec2.paginators import DescribeVolumesPaginator
else:
    EC2Client = object
    EC2ServiceResource = object
    BundleTaskCompleteWaiter = object
    DescribeVolumesPaginator = object

...
```

## How it works

Fully automated [mypy-boto3-builder](https://github.com/vemel/mypy_boto3_builder) carefully generates
type annotations for each service, patiently waiting for `boto3` updates. It delivers
a drop-in type annotations for you and makes sure that:

- All available `boto3` services are covered.
- Each public class and method of every `boto3` service gets valid type annotations
  extracted from the documentation (blame `botocore` docs if types are incorrect).
- Type annotations include up-to-date documentation.
- Link to documentation is provided for every method.
- Code is processed by [black](https://github.com/psf/black) for readability.

## What's new

### Implemented features

- `mypy`, `VSCode` and `PyCharm` compatibility
- Fully type annotated `boto3` library
- `Client` type annotations for each service
- `ServiceResource` type annotations for each service
- `Resource` type annotations for each service
- `Waiter` type annotations for each service
- `Paginator` type annotations for each service
- Generated `TypeDefs` for each service
- Auto discovery of types for `boto3.client` and `boto3.session` calls
- Auto discovery of types for `session.client` and `session.session` calls
- Auto discovery of types for `client.get_waiter` and `client.get_paginator` calls
- Auto discovery of types for `ServiceResource` and `Resource` collections
- CLI for managing installed submodules

### Latest changes

Builder changelog can be found in [Releases](https://github.com/vemel/mypy_boto3_builder/releases).

### Versioning

`boto3-stubs` uses format `<boto3_version>.<build>`, e.g. for `boto3 1.10.40`,
`boto3-stubs` versions are is `1.10.40.0` and `1.10.40.1`.

## Thank you

- Guys behind [boto3-type-annotations](https://pypi.org/project/boto3-type-annotations/),
  this package is based on top of their work
- [black](https://github.com/psf/black) developers for an awesome formatting tool
- [mypy](https://github.com/python/mypy) for doing all dirty work for us

## Submodules

{{ "- `" -}}
{{ boto3_stubs_name -}}
{{ "[all]` - Type annotations for all services" -}}
{{ ".\n" -}}
{% if package.essential_service_names -%}
    {{ "- `" -}}
    {{ boto3_stubs_name -}}
    {{ "[essential]` - Type annotations for " -}}
    {% for service_name in package.essential_service_names -%}
        {% if not loop.first -%}
            {{ " and " if loop.last else ", " -}}
        {% endif -%}
        {{ "[" -}}
        {{ service_name.class_name -}}
        {{ "](" -}}
        {{ service_name.pypi_link -}}
        {{ ")" -}}
    {% endfor -%}
    {{ " services" if package.essential_service_names|length > 1 else " service" -}}
    {{ ".\n" -}}
{% endif -%}
{% for service_name in package.service_names -%}
    {{ "- `" -}}
    {{ boto3_stubs_name -}}
    {{ "[" -}}
    {{ service_name.boto3_name -}}
    {{ "]` - Type annotations for [" -}}
    {{ service_name.class_name -}}
    {{ "](" -}}
    {{ service_name.pypi_link -}}
    {{ ") service." -}}
    {{ "" if loop.last else "\n" -}}
{% endfor -%}
{{ '\n' -}}
