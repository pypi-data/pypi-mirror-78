# {{ service_name.pypi_name }}

[![PyPI - {{ package.pypi_name }}](https://img.shields.io/pypi/v/{{ package.pypi_name }}.svg?color=blue)](https://pypi.org/project/{{ package.pypi_name }})
[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/{{ package.pypi_name }}.svg?color=blue)](https://pypi.org/project/{{ package.pypi_name }})
[![Docs](https://img.shields.io/readthedocs/mypy-boto3-builder.svg?color=blue)](https://mypy-boto3-builder.readthedocs.io/)

Type annotations for
[boto3.{{ service_name.class_name }} {{ boto3_version }}]({{ service_name.doc_link }}) service
compatible with [mypy](https://github.com/python/mypy), [VSCode](https://code.visualstudio.com/),
[PyCharm](https://www.jetbrains.com/pycharm/) and other tools.

Generated by [mypy-boto3-buider {{ builder_version }}](https://github.com/vemel/mypy_boto3_builder).

More information can be found on [boto3-stubs](https://pypi.org/project/boto3-stubs/) page.

## How to install

Make sure you have [mypy](https://github.com/python/mypy) installed and activated in your IDE.

Install `boto3-stubs` for `{{ service_name.class_name }}` service.

```bash
python -m pip install boto3-stubs[{{service_name.extras_name}}]
```

## How to use

### Client annotations

`{{ package.client.name }}` provides annotations for `boto3.client("{{ service_name.boto3_name }}")`.

```python
import boto3

from {{ service_name.module_name }} import {{ package.client.name }}

client: {{ package.client.name }} = boto3.client("{{ service_name.boto3_name }}")

# now client usage is checked by mypy and IDE should provide code auto-complete

# works for session as well
session = boto3.session.Session(region="us-west-1")
session_client: {{ package.client.name }} = session.client("{{ service_name.boto3_name }}")
```

{% if package.paginators -%}
### Paginators annotations

`{{ service_name.module_name }}.paginator` module contains type annotations for all paginators.

```python
from {{ service_name.module_name }} import {{ package.client.name }}
from {{ service_name.module_name }}.paginator import (
{% for paginator in package.paginators %}    {{ paginator.name }},{{ '' if loop.last else '\n' }}{% endfor %}
)

client: {{ package.client.name }} = boto3.client("{{ service_name.boto3_name }}")

# Explicit type annotations are optional here
# Type should be correctly discovered by mypy and IDEs
# VSCode requires explicit type annotations
{% for paginator in package.paginators -%}
{{ paginator.operation_name }}_paginator: {{ paginator.name }} = client.get_paginator("{{ paginator.operation_name }}")
{% endfor -%}
```
{% endif %}

{% if package.waiters -%}
### Waiters annotations

`{{ service_name.module_name }}.waiter` module contains type annotations for all waiters.

```python
from {{ service_name.module_name }} import {{ package.client.name }}
from {{ service_name.module_name }}.waiter import (
{% for waiter in package.waiters %}    {{ waiter.name }},{{ '' if loop.last else '\n' }}{% endfor %}
)

client: {{ package.client.name }} = boto3.client("{{ service_name.boto3_name }}")

# Explicit type annotations are optional here
# Type should be correctly discovered by mypy and IDEs
# VSCode requires explicit type annotations
{% for waiter in package.waiters -%}
{{ waiter.waiter_name }}_waiter: {{ waiter.name }} = client.get_waiter("{{ waiter.waiter_name }}")
{% endfor -%}
```
{% endif %}

{% if package.service_resource -%}
### Service Resource annotations

`{{ package.service_resource.name }}` provides annotations for `boto3.resource("{{ service_name.boto3_name }}")`.

```python
from {{ service_name.module_name }} import {{ package.service_resource.name }}

resource: {{ package.service_resource.name }} = boto3.resource("{{ service_name.boto3_name }}")

# now resource usage is checked by mypy and IDE should provide code auto-complete

# works for session as well
session = boto3.session.Session(region="us-west-1")
session_resource: {{ package.service_resource.name }} = session.resource("{{ service_name.boto3_name }}")
```

{% if package.service_resource.sub_resources %}
### Other resources annotations

`{{ service_name.module_name }}.service_resource` module contains type annotations for all resources.

```python
from {{ service_name.module_name }} import {{ package.service_resource.name }}
from {{ service_name.module_name }}.service_resource import (
{% for sub_resource in package.service_resource.sub_resources %}    {{ sub_resource.name }},{{ '' if loop.last else '\n' }}{% endfor %}
)

resource: {{ package.service_resource.name }} = boto3.resource("{{ service_name.boto3_name }}")

# Explicit type annotations are optional here
# Type should be correctly discovered by mypy and IDEs
{% for sub_resource in package.service_resource.sub_resources -%}
my_{{ sub_resource.variable_name }}: {{ sub_resource.name }} = resource.{{ sub_resource.name }}(...)
{% endfor -%}
```
{% endif %}

{% if package.service_resource.collections %}
### Collections annotations

`{{ service_name.module_name }}.service_resource` module contains type annotations
for all `{{ package.service_resource.name }}` collections.

```python
from {{ service_name.module_name }} import {{ package.service_resource.name }}
from {{ service_name.module_name }}.service_resource import (
{% for collection in package.service_resource.collections %}    {{ collection.name }},{{ '' if loop.last else '\n' }}{% endfor %}
)

resource: {{ package.service_resource.name }} = boto3.resource("{{ service_name.boto3_name }}")

# Explicit type annotations are optional here
# Type should be correctly discovered by mypy and IDEs
{% for collection in package.service_resource.collections -%}
{{ collection.attribute_name }}: {{ service_name.underscore_name }}_resources.{{ collection.name }} = resource.{{ collection.attribute_name }}
{% endfor -%}
```
{% endif %}
{% endif %}

{% if package.typed_dicts %}
### Typed dictionations

`{{ service_name.module_name }}.type_defs` module contains structures and shapes assembled
to typed dictionaries for additional type checking.

```python
from {{ service_name.module_name }}.type_defs import {{ package.typed_dicts[0].name }}, ...

def get_structure() -> {{ package.typed_dicts[0].name }}:
    return {
      ...
    }
```
{% endif %}

## Dynamic type annotations

`mypy_boto3` command generates `boto3.client/resource` type annotations for
`{{ service_name.module_name }}` and other installed services.

```bash
# Run this command after you add or remove service packages
python -m mypy_boto3
```

Generated type annotations provide overloads for `boto3.client` and `boto3.resource`,
`boto3.Session.client` and `boto3.Session.resource` functions,
so explicit type annotations are not needed.

- `mypy` supports function overloads as expected
- `PyCharm` also supports function overloads, but consumes a lot of RAM, use carefully if you have many services installed
- `VSCode` does not currently support function overloads, use explicit type annotations

```python
import boto3

# Type is discovered correctly by mypy and PyCharm
# VSCode still needs explicit type annotations
client = boto3.client("{{ service_name.boto3_name }}"){% if package.service_resource %}
resource = boto3.resource("{{ service_name.boto3_name }}"){% endif %}

session_client = boto3.Session().client("{{ service_name.boto3_name }}"){% if package.service_resource %}
session_resource = boto3.Session().resource("{{ service_name.boto3_name }}"){% endif %}
```
