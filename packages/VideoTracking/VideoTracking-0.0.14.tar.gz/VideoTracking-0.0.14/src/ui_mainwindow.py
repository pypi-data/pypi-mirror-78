# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'src/mainwindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1444, 685)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_6 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_6.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_6.setObjectName("gridLayout_6")
        self.scroll = QtWidgets.QScrollArea(self.centralwidget)
        self.scroll.setWidgetResizable(True)
        self.scroll.setObjectName("scroll")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 1077, 478))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.scroll.setWidget(self.scrollAreaWidgetContents)
        self.gridLayout_6.addWidget(self.scroll, 0, 0, 1, 1)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.horizontalSlider_time = QtWidgets.QSlider(self.centralwidget)
        self.horizontalSlider_time.setTracking(True)
        self.horizontalSlider_time.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_time.setTickPosition(QtWidgets.QSlider.TicksBelow)
        self.horizontalSlider_time.setTickInterval(1)
        self.horizontalSlider_time.setObjectName("horizontalSlider_time")
        self.horizontalLayout_4.addWidget(self.horizontalSlider_time)
        self.label_Frame = QtWidgets.QLabel(self.centralwidget)
        self.label_Frame.setObjectName("label_Frame")
        self.horizontalLayout_4.addWidget(self.label_Frame)
        self.gridLayout_6.addLayout(self.horizontalLayout_4, 1, 0, 1, 1)
        self.gridLayout_4 = QtWidgets.QGridLayout()
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.pushButton_Prev = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_Prev.setObjectName("pushButton_Prev")
        self.gridLayout_4.addWidget(self.pushButton_Prev, 2, 1, 1, 1)
        self.gridLayout_5 = QtWidgets.QGridLayout()
        self.gridLayout_5.setObjectName("gridLayout_5")
        self.gridLayout_4.addLayout(self.gridLayout_5, 0, 1, 1, 1)
        self.spinBox_FPS = QtWidgets.QSpinBox(self.centralwidget)
        self.spinBox_FPS.setMinimum(1)
        self.spinBox_FPS.setMaximum(1000)
        self.spinBox_FPS.setObjectName("spinBox_FPS")
        self.gridLayout_4.addWidget(self.spinBox_FPS, 1, 2, 1, 1)
        self.pushButton_PlayPause = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_PlayPause.setObjectName("pushButton_PlayPause")
        self.gridLayout_4.addWidget(self.pushButton_PlayPause, 1, 1, 1, 1)
        self.pushButton_Next = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_Next.setObjectName("pushButton_Next")
        self.gridLayout_4.addWidget(self.pushButton_Next, 2, 2, 1, 1)
        self.pushButton_Rewind = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_Rewind.setObjectName("pushButton_Rewind")
        self.gridLayout_4.addWidget(self.pushButton_Rewind, 1, 3, 1, 1)
        self.checkBox_Tracking = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox_Tracking.setChecked(True)
        self.checkBox_Tracking.setObjectName("checkBox_Tracking")
        self.gridLayout_4.addWidget(self.checkBox_Tracking, 2, 3, 1, 1)
        self.gridLayout_6.addLayout(self.gridLayout_4, 2, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.dockLabel = QtWidgets.QDockWidget(MainWindow)
        self.dockLabel.setFeatures(QtWidgets.QDockWidget.NoDockWidgetFeatures)
        self.dockLabel.setObjectName("dockLabel")
        self.labelListContainer = QtWidgets.QWidget()
        self.labelListContainer.setObjectName("labelListContainer")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.labelListContainer)
        self.gridLayout_2.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.listLayout = QtWidgets.QVBoxLayout()
        self.listLayout.setObjectName("listLayout")
        self.labelList = QtWidgets.QListWidget(self.labelListContainer)
        self.labelList.setObjectName("labelList")
        self.listLayout.addWidget(self.labelList)
        self.deleteAllTracks = QtWidgets.QPushButton(self.labelListContainer)
        self.deleteAllTracks.setObjectName("deleteAllTracks")
        self.listLayout.addWidget(self.deleteAllTracks)
        self.gridLayout_2.addLayout(self.listLayout, 0, 0, 1, 1)
        self.dockLabel.setWidget(self.labelListContainer)
        MainWindow.addDockWidget(QtCore.Qt.DockWidgetArea(2), self.dockLabel)
        self.toolbar_open = QtWidgets.QToolBar(MainWindow)
        self.toolbar_open.setEnabled(True)
        self.toolbar_open.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
        self.toolbar_open.setObjectName("toolbar_open")
        MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.toolbar_open)
        self.toolbar_zoom = QtWidgets.QToolBar(MainWindow)
        self.toolbar_zoom.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
        self.toolbar_zoom.setObjectName("toolbar_zoom")
        MainWindow.addToolBar(QtCore.Qt.LeftToolBarArea, self.toolbar_zoom)
        self.menuBar = QtWidgets.QMenuBar(MainWindow)
        self.menuBar.setGeometry(QtCore.QRect(0, 0, 1444, 22))
        self.menuBar.setObjectName("menuBar")
        self.menu_file = QtWidgets.QMenu(self.menuBar)
        self.menu_file.setObjectName("menu_file")
        self.menu_Edit = QtWidgets.QMenu(self.menuBar)
        self.menu_Edit.setObjectName("menu_Edit")
        self.menu_View = QtWidgets.QMenu(self.menuBar)
        self.menu_View.setObjectName("menu_View")
        self.menu_Help = QtWidgets.QMenu(self.menuBar)
        self.menu_Help.setObjectName("menu_Help")
        MainWindow.setMenuBar(self.menuBar)
        self.quit = QtWidgets.QAction(MainWindow)
        icon = QtGui.QIcon.fromTheme(":/quit")
        self.quit.setIcon(icon)
        self.quit.setObjectName("quit")
        self.openVideoSignal = QtWidgets.QAction(MainWindow)
        self.openVideoSignal.setCheckable(False)
        self.openVideoSignal.setEnabled(True)
        icon = QtGui.QIcon.fromTheme(":/open")
        self.openVideoSignal.setIcon(icon)
        self.openVideoSignal.setObjectName("openVideoSignal")
        self.version = QtWidgets.QAction(MainWindow)
        self.version.setObjectName("version")
        self.update = QtWidgets.QAction(MainWindow)
        self.update.setObjectName("update")
        self.edit = QtWidgets.QAction(MainWindow)
        self.edit.setEnabled(False)
        icon = QtGui.QIcon.fromTheme(":/edit")
        self.edit.setIcon(icon)
        self.edit.setObjectName("edit")
        self.fitWidth = QtWidgets.QAction(MainWindow)
        self.fitWidth.setEnabled(False)
        icon = QtGui.QIcon.fromTheme(":/fit_width")
        self.fitWidth.setIcon(icon)
        self.fitWidth.setObjectName("fitWidth")
        self.fitWindow = QtWidgets.QAction(MainWindow)
        self.fitWindow.setEnabled(False)
        icon = QtGui.QIcon.fromTheme(":/fit")
        self.fitWindow.setIcon(icon)
        self.fitWindow.setShortcut("")
        self.fitWindow.setObjectName("fitWindow")
        self.zoomOrg = QtWidgets.QAction(MainWindow)
        self.zoomOrg.setEnabled(False)
        icon = QtGui.QIcon.fromTheme(":/original")
        self.zoomOrg.setIcon(icon)
        self.zoomOrg.setIconVisibleInMenu(True)
        self.zoomOrg.setProperty("shortcutVisibleInContextMenu", True)
        self.zoomOrg.setObjectName("zoomOrg")
        self.zoomOut = QtWidgets.QAction(MainWindow)
        self.zoomOut.setEnabled(False)
        icon = QtGui.QIcon.fromTheme(":/zoom_out")
        self.zoomOut.setIcon(icon)
        self.zoomOut.setObjectName("zoomOut")
        self.zoomIn = QtWidgets.QAction(MainWindow)
        self.zoomIn.setEnabled(False)
        icon = QtGui.QIcon.fromTheme(":/zoom_in")
        self.zoomIn.setIcon(icon)
        self.zoomIn.setObjectName("zoomIn")
        self.showInfo = QtWidgets.QAction(MainWindow)
        icon = QtGui.QIcon.fromTheme(":/help")
        self.showInfo.setIcon(icon)
        self.showInfo.setObjectName("showInfo")
        self.help = QtWidgets.QAction(MainWindow)
        icon = QtGui.QIcon.fromTheme(":/help")
        self.help.setIcon(icon)
        self.help.setObjectName("help")
        self.advancedMode = QtWidgets.QAction(MainWindow)
        self.advancedMode.setCheckable(True)
        icon = QtGui.QIcon.fromTheme(":/expert")
        self.advancedMode.setIcon(icon)
        self.advancedMode.setObjectName("advancedMode")
        self.deleteAction = QtWidgets.QAction(MainWindow)
        self.deleteAction.setEnabled(False)
        icon = QtGui.QIcon.fromTheme(":/remove_shape")
        self.deleteAction.setIcon(icon)
        self.deleteAction.setObjectName("deleteAction")
        self.create = QtWidgets.QAction(MainWindow)
        self.create.setEnabled(False)
        icon = QtGui.QIcon.fromTheme(":/new_shape")
        self.create.setIcon(icon)
        self.create.setObjectName("create")
        self.editMode = QtWidgets.QAction(MainWindow)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("src/../../../../../../../../.designer/backup/resources/icons/edit.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.editMode.setIcon(icon)
        self.editMode.setObjectName("editMode")
        self.createMode = QtWidgets.QAction(MainWindow)
        self.createMode.setEnabled(False)
        icon = QtGui.QIcon.fromTheme(":/new")
        self.createMode.setIcon(icon)
        self.createMode.setObjectName("createMode")
        self.closeAction = QtWidgets.QAction(MainWindow)
        icon = QtGui.QIcon.fromTheme(":/close")
        self.closeAction.setIcon(icon)
        self.closeAction.setObjectName("closeAction")
        self.saveAs = QtWidgets.QAction(MainWindow)
        self.saveAs.setEnabled(True)
        icon = QtGui.QIcon.fromTheme(":/save-as")
        self.saveAs.setIcon(icon)
        self.saveAs.setObjectName("saveAs")
        self.actionAdd_Track = QtWidgets.QAction(MainWindow)
        self.actionAdd_Track.setObjectName("actionAdd_Track")
        self.toolbar_open.addAction(self.openVideoSignal)
        self.toolbar_open.addAction(self.actionAdd_Track)
        self.toolbar_open.addAction(self.saveAs)
        self.toolbar_zoom.addAction(self.zoomOut)
        self.toolbar_zoom.addAction(self.zoomIn)
        self.toolbar_zoom.addAction(self.zoomOrg)
        self.toolbar_zoom.addAction(self.fitWindow)
        self.toolbar_zoom.addAction(self.fitWidth)
        self.menu_file.addAction(self.openVideoSignal)
        self.menu_file.addAction(self.saveAs)
        self.menu_file.addAction(self.closeAction)
        self.menu_Edit.addAction(self.create)
        self.menu_Edit.addAction(self.deleteAction)
        self.menu_Edit.addAction(self.edit)
        self.menu_View.addSeparator()
        self.menu_View.addSeparator()
        self.menu_View.addAction(self.zoomIn)
        self.menu_View.addAction(self.zoomOut)
        self.menu_View.addAction(self.zoomOrg)
        self.menu_View.addAction(self.fitWindow)
        self.menu_View.addAction(self.fitWidth)
        self.menu_View.addSeparator()
        self.menu_Help.addAction(self.help)
        self.menu_Help.addAction(self.showInfo)
        self.menu_Help.addAction(self.update)
        self.menuBar.addAction(self.menu_file.menuAction())
        self.menuBar.addAction(self.menu_Edit.menuAction())
        self.menuBar.addAction(self.menu_View.menuAction())
        self.menuBar.addAction(self.menu_Help.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Active Image Labeler"))
        self.label_Frame.setText(_translate("MainWindow", "TextLabel"))
        self.pushButton_Prev.setText(_translate("MainWindow", "Previous"))
        self.spinBox_FPS.setSuffix(_translate("MainWindow", " FPS"))
        self.pushButton_PlayPause.setText(_translate("MainWindow", "Play"))
        self.pushButton_Next.setText(_translate("MainWindow", "Next"))
        self.pushButton_Rewind.setText(_translate("MainWindow", "Rewind"))
        self.checkBox_Tracking.setText(_translate("MainWindow", "Track Previous Boxes?"))
        self.dockLabel.setWindowTitle(_translate("MainWindow", "List Track"))
        self.deleteAllTracks.setText(_translate("MainWindow", "Remove All Tracks"))
        self.toolbar_open.setWindowTitle(_translate("MainWindow", "Handle Image"))
        self.toolbar_zoom.setWindowTitle(_translate("MainWindow", "Zoom"))
        self.menu_file.setTitle(_translate("MainWindow", "File"))
        self.menu_Edit.setTitle(_translate("MainWindow", "Edit"))
        self.menu_View.setTitle(_translate("MainWindow", "View"))
        self.menu_Help.setTitle(_translate("MainWindow", "Help"))
        self.quit.setText(_translate("MainWindow", "Quit"))
        self.quit.setToolTip(_translate("MainWindow", "Quit application"))
        self.quit.setStatusTip(_translate("MainWindow", "Quit application"))
        self.quit.setWhatsThis(_translate("MainWindow", "Quit application"))
        self.quit.setShortcut(_translate("MainWindow", "Ctrl+Q"))
        self.openVideoSignal.setText(_translate("MainWindow", "Open Video"))
        self.openVideoSignal.setToolTip(_translate("MainWindow", "Open image or label file"))
        self.openVideoSignal.setStatusTip(_translate("MainWindow", "Open image or label file"))
        self.openVideoSignal.setWhatsThis(_translate("MainWindow", "Open image or label file"))
        self.openVideoSignal.setShortcut(_translate("MainWindow", "Ctrl+O"))
        self.version.setText(_translate("MainWindow", "Version"))
        self.update.setText(_translate("MainWindow", "Update"))
        self.edit.setText(_translate("MainWindow", "Edit RectBox"))
        self.edit.setToolTip(_translate("MainWindow", "Modify the label of the selected Box"))
        self.edit.setStatusTip(_translate("MainWindow", "Modify the label of the selected Box"))
        self.edit.setWhatsThis(_translate("MainWindow", "Modify the label of the selected Box"))
        self.edit.setShortcut(_translate("MainWindow", "Ctrl+E"))
        self.fitWidth.setText(_translate("MainWindow", "Fit Width"))
        self.fitWidth.setToolTip(_translate("MainWindow", "Zoom follows window width"))
        self.fitWidth.setStatusTip(_translate("MainWindow", "Zoom follows window width"))
        self.fitWidth.setWhatsThis(_translate("MainWindow", "Zoom follows window width"))
        self.fitWidth.setShortcut(_translate("MainWindow", "Ctrl+Shift+F"))
        self.fitWindow.setText(_translate("MainWindow", "Fit Window"))
        self.fitWindow.setToolTip(_translate("MainWindow", "Zoom follows window size"))
        self.fitWindow.setStatusTip(_translate("MainWindow", "Zoom follows window size"))
        self.fitWindow.setWhatsThis(_translate("MainWindow", "Zoom follows window size"))
        self.zoomOrg.setText(_translate("MainWindow", "Original size"))
        self.zoomOrg.setToolTip(_translate("MainWindow", "Zoom to original size"))
        self.zoomOrg.setStatusTip(_translate("MainWindow", "Zoom to original size"))
        self.zoomOrg.setWhatsThis(_translate("MainWindow", "Zoom to original size"))
        self.zoomOrg.setShortcut(_translate("MainWindow", "Ctrl+*"))
        self.zoomOut.setText(_translate("MainWindow", "Zoom Out"))
        self.zoomOut.setToolTip(_translate("MainWindow", "Decrease zoom level"))
        self.zoomOut.setStatusTip(_translate("MainWindow", "Decrease zoom level"))
        self.zoomOut.setWhatsThis(_translate("MainWindow", "Decrease zoom level"))
        self.zoomOut.setShortcut(_translate("MainWindow", "Ctrl+-"))
        self.zoomIn.setText(_translate("MainWindow", "Zoom In"))
        self.zoomIn.setToolTip(_translate("MainWindow", "Increase zoom level"))
        self.zoomIn.setStatusTip(_translate("MainWindow", "Increase zoom level"))
        self.zoomIn.setWhatsThis(_translate("MainWindow", "Increase zoom level"))
        self.zoomIn.setShortcut(_translate("MainWindow", "Ctrl++"))
        self.showInfo.setText(_translate("MainWindow", "Information"))
        self.showInfo.setStatusTip(_translate("MainWindow", "Information"))
        self.showInfo.setWhatsThis(_translate("MainWindow", "Information"))
        self.help.setText(_translate("MainWindow", "List Shortcuts"))
        self.help.setToolTip(_translate("MainWindow", "Show demo"))
        self.help.setStatusTip(_translate("MainWindow", "Show demo"))
        self.help.setWhatsThis(_translate("MainWindow", "Show demo"))
        self.advancedMode.setText(_translate("MainWindow", "Advanced Mode"))
        self.advancedMode.setIconText(_translate("MainWindow", "Advanced Mode"))
        self.advancedMode.setToolTip(_translate("MainWindow", "Swtich to advanced mode"))
        self.advancedMode.setStatusTip(_translate("MainWindow", "Swtich to advanced mode"))
        self.advancedMode.setWhatsThis(_translate("MainWindow", "Swtich to advanced mode"))
        self.advancedMode.setShortcut(_translate("MainWindow", "Ctrl+Shift+A"))
        self.deleteAction.setText(_translate("MainWindow", "Delete RectBox"))
        self.deleteAction.setToolTip(_translate("MainWindow", "Remove the box"))
        self.deleteAction.setStatusTip(_translate("MainWindow", "Remove the box"))
        self.deleteAction.setWhatsThis(_translate("MainWindow", "Remove the box"))
        self.deleteAction.setShortcut(_translate("MainWindow", "Del"))
        self.create.setText(_translate("MainWindow", "Create RectBox"))
        self.create.setToolTip(_translate("MainWindow", "Draw a new box"))
        self.create.setStatusTip(_translate("MainWindow", "Draw a new box"))
        self.create.setWhatsThis(_translate("MainWindow", "Draw a new box"))
        self.create.setShortcut(_translate("MainWindow", "W"))
        self.editMode.setText(_translate("MainWindow", "Edit Label"))
        self.editMode.setToolTip(_translate("MainWindow", "Modify the label of the selected Box"))
        self.editMode.setStatusTip(_translate("MainWindow", "Modify the label of the selected Box"))
        self.editMode.setWhatsThis(_translate("MainWindow", "Modify the label of the selected Box"))
        self.editMode.setShortcut(_translate("MainWindow", "Ctrl+J"))
        self.createMode.setText(_translate("MainWindow", "Create\\nRectBox"))
        self.createMode.setIconText(_translate("MainWindow", "Create\n"
"RectBox"))
        self.createMode.setToolTip(_translate("MainWindow", "Draw a new box"))
        self.createMode.setStatusTip(_translate("MainWindow", "Draw a new box"))
        self.createMode.setWhatsThis(_translate("MainWindow", "Draw a new box"))
        self.createMode.setShortcut(_translate("MainWindow", "W"))
        self.closeAction.setText(_translate("MainWindow", "Close"))
        self.closeAction.setToolTip(_translate("MainWindow", "Close the current file"))
        self.closeAction.setStatusTip(_translate("MainWindow", "Close the current file"))
        self.closeAction.setWhatsThis(_translate("MainWindow", "Close the current file"))
        self.closeAction.setShortcut(_translate("MainWindow", "Ctrl+W"))
        self.saveAs.setText(_translate("MainWindow", "Save As"))
        self.saveAs.setToolTip(_translate("MainWindow", "Save the labels to a different file"))
        self.saveAs.setStatusTip(_translate("MainWindow", "Save the labels to a different file"))
        self.saveAs.setWhatsThis(_translate("MainWindow", "Save the labels to a different file"))
        self.saveAs.setShortcut(_translate("MainWindow", "Ctrl+Shift+S"))
        self.actionAdd_Track.setText(_translate("MainWindow", "Add Track"))
        self.actionAdd_Track.setToolTip(_translate("MainWindow", "Add Track"))
        self.actionAdd_Track.setShortcut(_translate("MainWindow", "Ctrl+T"))
