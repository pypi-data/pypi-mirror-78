# coding: utf-8

"""
    Aliro Quantum App

    This is an api for the Aliro Quantum App  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: nick@aliroquantum.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from aliro_quantum.configuration import Configuration


class CircuitInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'matrix': 'list[list[float]]',
        'num_nodes': 'int',
        'prob_edge': 'float',
        'num_iterations': 'int',
        'starting_vectors': 'list[list[float]]'
    }

    attribute_map = {
        'matrix': 'matrix',
        'num_nodes': 'numNodes',
        'prob_edge': 'probEdge',
        'num_iterations': 'numIterations',
        'starting_vectors': 'startingVectors'
    }

    def __init__(self, matrix=None, num_nodes=None, prob_edge=None, num_iterations=None, starting_vectors=None, local_vars_configuration=None):  # noqa: E501
        """CircuitInput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._matrix = None
        self._num_nodes = None
        self._prob_edge = None
        self._num_iterations = None
        self._starting_vectors = None
        self.discriminator = None

        if matrix is not None:
            self.matrix = matrix
        if num_nodes is not None:
            self.num_nodes = num_nodes
        if prob_edge is not None:
            self.prob_edge = prob_edge
        if num_iterations is not None:
            self.num_iterations = num_iterations
        if starting_vectors is not None:
            self.starting_vectors = starting_vectors

    @property
    def matrix(self):
        """Gets the matrix of this CircuitInput.  # noqa: E501


        :return: The matrix of this CircuitInput.  # noqa: E501
        :rtype: list[list[float]]
        """
        return self._matrix

    @matrix.setter
    def matrix(self, matrix):
        """Sets the matrix of this CircuitInput.


        :param matrix: The matrix of this CircuitInput.  # noqa: E501
        :type: list[list[float]]
        """

        self._matrix = matrix

    @property
    def num_nodes(self):
        """Gets the num_nodes of this CircuitInput.  # noqa: E501


        :return: The num_nodes of this CircuitInput.  # noqa: E501
        :rtype: int
        """
        return self._num_nodes

    @num_nodes.setter
    def num_nodes(self, num_nodes):
        """Sets the num_nodes of this CircuitInput.


        :param num_nodes: The num_nodes of this CircuitInput.  # noqa: E501
        :type: int
        """

        self._num_nodes = num_nodes

    @property
    def prob_edge(self):
        """Gets the prob_edge of this CircuitInput.  # noqa: E501


        :return: The prob_edge of this CircuitInput.  # noqa: E501
        :rtype: float
        """
        return self._prob_edge

    @prob_edge.setter
    def prob_edge(self, prob_edge):
        """Sets the prob_edge of this CircuitInput.


        :param prob_edge: The prob_edge of this CircuitInput.  # noqa: E501
        :type: float
        """

        self._prob_edge = prob_edge

    @property
    def num_iterations(self):
        """Gets the num_iterations of this CircuitInput.  # noqa: E501


        :return: The num_iterations of this CircuitInput.  # noqa: E501
        :rtype: int
        """
        return self._num_iterations

    @num_iterations.setter
    def num_iterations(self, num_iterations):
        """Sets the num_iterations of this CircuitInput.


        :param num_iterations: The num_iterations of this CircuitInput.  # noqa: E501
        :type: int
        """

        self._num_iterations = num_iterations

    @property
    def starting_vectors(self):
        """Gets the starting_vectors of this CircuitInput.  # noqa: E501


        :return: The starting_vectors of this CircuitInput.  # noqa: E501
        :rtype: list[list[float]]
        """
        return self._starting_vectors

    @starting_vectors.setter
    def starting_vectors(self, starting_vectors):
        """Sets the starting_vectors of this CircuitInput.


        :param starting_vectors: The starting_vectors of this CircuitInput.  # noqa: E501
        :type: list[list[float]]
        """

        self._starting_vectors = starting_vectors

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CircuitInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CircuitInput):
            return True

        return self.to_dict() != other.to_dict()
