# coding: utf-8

"""
    Aliro Quantum App

    This is an api for the Aliro Quantum App  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: nick@aliroquantum.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import openapi_client
from openapi_client.models.device_ranking import DeviceRanking  # noqa: E501
from openapi_client.rest import ApiException

class TestDeviceRanking(unittest.TestCase):
    """DeviceRanking unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test DeviceRanking
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = openapi_client.models.device_ranking.DeviceRanking()  # noqa: E501
        if include_optional :
            return DeviceRanking(
                device = openapi_client.models.device_details.DeviceDetails(
                    device_id = '0', 
                    display_name = '0', 
                    gates = [
                        openapi_client.models.gate.Gate(
                            fidelity = 1.337, 
                            qubit_from = openapi_client.models.qubit.Qubit(
                                fidelity_rotation = 1.337, 
                                last_reported_fidelity_rotation_datetime = '0', 
                                name = 56, 
                                pos_x = 1.337, 
                                pos_y = 1.337, 
                                real_qubit = 56, ), 
                            qubit_to = openapi_client.models.qubit.Qubit(
                                fidelity_rotation = 1.337, 
                                last_reported_fidelity_rotation_datetime = '0', 
                                name = 56, 
                                pos_x = 1.337, 
                                pos_y = 1.337, 
                                real_qubit = 56, ), 
                            gate_type = '0', )
                        ], 
                    is_simulator = True, 
                    last_calibration = '0', 
                    max_shots = 56, 
                    next_available_time = '0', 
                    price = 1.337, 
                    t1 = 1.337, 
                    t2 = 1.337, ), 
                score = 1.337
            )
        else :
            return DeviceRanking(
        )

    def testDeviceRanking(self):
        """Test DeviceRanking"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
