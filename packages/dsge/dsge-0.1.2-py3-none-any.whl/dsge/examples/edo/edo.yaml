# edo.yaml --- 
# 
# Description: This is a replication of the EDO model.
# 
# Author: Ed Herbst [edward.p.herbst@frb.gov]
# Last-Updated: 06/05/14
# 
declarations:
  name: 'edo'
  type: 'sticky-information'
  #index: j
  variables: 
    [RC, RK, WC, WK, YC, YK, MCC, MCK, KC, KK, PKB, R, L, QK, 
    HC, HSC, HK, HSK, UHC, UHSC, UHK, UHSK, empC, HrC, empK, HrK, empSC, HrSC, 
    empSK, HrSK, unemp, EIK, EC, INFWC, INFWK, INFC, INFK, DIFFNORMGDP, NORMINFGDP, 
    DIFFREALGDP, DIFFREALEC, DIFFREALEIK, DIFFREALW, AH, INFGDP, INFCNA, 
    INFCOR, GAP, PFGAP, INFC10, ECD, KD, RCD, QCD, KCH, RCH, ECH, 
    QCH, LAGKD, LAGKCH, UK, UC, DIFFREALECH, DIFFREALECD, betas, XiL, Lpref, 
    EFFK, MUZK, MUZM, HG, MUC, MUK, EFFECD, EFFECH, STAR, 
    RL1, RL2, RL3, RL4, RL5, RL6, RL7, RT2]

  shocks: [eHG, eXiL, eLpref, eR, eMUZK, eMUZM, ePMKC, ePMKK, eEFFECH, eEFFECD, eEFFK, eB, eSTAR]

  observables : [DIFFREALGDP,DIFFREALEC,DIFFREALEIK,DIFFREALECD,DIFFREALECH,DIFFREALW,AH,INFCNA,INFCOR,INFK,R,RT2,unemp]

  measurement_errors : 
    [meas_DIFFREALGDP, meas_DIFFREALEC, meas_DIFFREALEIK,meas_DIFFREALECD, meas_DIFFREALECH, meas_DIFFREALW, 
    meas_AH, meas_INFCNA, meas_INFCOR, meas_INFK, #
    meas_R, meas_RT2, meas_unemp]

  parameters: 
    [h, r_inf, r_y, phi_pc, phi_H, phi_wc, phi_ic, phi_cd, phi_ech, #
    gam_pc, gam_wc, rho_R, rho_B, rho_STAR, rho_EFFK, rho_EFFECD, rho_HG,       #
    rho_EFFECH, rho_XiL, rho_lpref, tp2, sigman, sigmah,                        #
    sig_HG,sig_XiL,sig_lpref,sig_R,sig_MUZK,sig_MUZM,sig_PMKC,#
    sig_PMKK,sig_EFFECH,sig_EFFECD,sig_EFFK,sig_B,sig_STAR]#

  para_func:      
    [r_dy, ONE, MUZKSS, MUZMSS, gam_ic, gam_icd, r_dinf, rpr, phi_u, 
    rho_MUZK, rho_MUZM, pbeta, delta_, h_cd, h_ch, delta_cd, delta_ch, 
    alpha_, theta_c, theta_k, g_y, a_ks, s_AS, gam_h, gam_ech, 
    icoef, betarl, beta_0, beta_2, beta_, MUZCSS, ONE, USS, MUKSS, MUCSS, 
    MUKSShabit, MUCSShabit, PKBSS, PYSS, MCCSS, MCKSS, RKSS, RCSS, RCHSS, 
    RCDSS, USS, mu_, unempSS,AA, eta_cnn, eta_cd_eta_cnn, eta_ch_eta_cnn, 
    eta_ch, eta_cd, DDpara, RRpara, Rnr, ycbi_ykb, hc_hk, HSS, AHSS, HKSS, HCSS, 
    HrCSS, HrKSS, empCSS, empKSS, ycbi, ykb, YCSS, YKSS, KCSS, KKSS, ECHSS, 
    ECSS, ECDSS, EIKSS, KCDSS, KCHSS, YYSS, s_k_ecd, s_c_ech, s_k_eik, 
    s_yc, s_ecdc, INFCNASS, INFCSS, INFCORSS, INFKSS, INFWCSS, INFWKSS, 
    RSS, RT2SS, INFC10SS, IMPHSSS, s_k, INFGDPSS, LSS, WCSS, WKSS, markup_w, theta_wc, theta_wk,  
    xsiN_xsiH_C, xsiN_xsiH_K, A_HC, A_HK, xsi_NC, xsi_NK, xsi_HrC, xsi_HrK, 
    HSCSS, HSKSS,empSCSS, empSKSS, 
    gC, markup_xsiN_C, gK, markup_xsiN_K,     
    UHCSS, UHKSS, HrSCSS, HrSKSS, 
    UHSCSS, UHSKSS, QKSS, QCDSS, QCHSS, UCSS, UKSS, XiBSS, XiDSS, 
    XiHSS, RL1SS, RL2SS, RL3SS, RL4SS, RL5SS, RL6SS, RL7SS, DIFFREALECSS, 
    DIFFREALEIKSS, DIFFREALECDSS, DIFFREALECHSS, DIFFREALWSS, DIFFREALGDPSS]

equations:
  model:
    - (RCSS*exp(RC))-(MCCSS*exp(MCC))*(YCSS*exp(YC))/(USS*exp(UC))/(KCSS*exp(KC(-1)))*alpha_*(MUKSS*exp(MUK))=0;
    - (RKSS*exp(RK))-(MCKSS*exp(MCK))*(YKSS*exp(YK))/(USS*exp(UK))/(KKSS*exp(KK(-1)))*alpha_*(MUKSS*exp(MUK))=0;
    - (WCSS*exp(WC))-(MCCSS*exp(MCC))*(YCSS*exp(YC))/(HCSS*exp(HC))*(1-alpha_)=0;
    - (WKSS*exp(WK))-(MCKSS*exp(MCK))*(YKSS*exp(YK))/(HKSS*exp(HK))*(1-alpha_)=0;
    - (YCSS*exp(YC))-((USS*exp(UC))*(KCSS*exp(KC(-1)))/(MUKSS*exp(MUK)))^alpha_*((HCSS*exp(HC)))^(1-alpha_)=0;
    - (YKSS*exp(YK))-((USS*exp(UK))*(KKSS*exp(KK(-1)))/(MUKSS*exp(MUK)))^alpha_*((HKSS*exp(HK)))^(1-alpha_)=0;

    #------------------------------------------------------------
    # Sticky Information Phillips Curve
    #------------------------------------------------------------
    #- INFC = LAMPC/(1-LAMPC) * MCC + LAMPC * SUM( (1-LAMPC)^j*EXP(-j-1) ( MCC - MCC(-1) + INFC), (j, 0, inf)) + ePMKC
    #- INFK = LAMPK/(1-LAMPK) * MCK + LAMPK * SUM( (1-LAMPK)^j*EXP(-j-1) ( MCK - MCK(-1) + INFK), (j, 0, inf)) + ePMKK

    - (MCCSS*exp(MCC))*(YCSS*exp(YC))*theta_c-(theta_c-1)*(YCSS*exp(YC))-100*phi_pc*((INFCSS*exp(INFC))-gam_pc*(INFCSS*exp(INFC(-1)))-(1-gam_pc)*INFCSS)*(INFCSS*exp(INFC))*(YCSS*exp(YC))+beta_*100*phi_pc*((INFCSS*exp(INFC(+1)))-gam_pc*(INFCSS*exp(INFC))-(1-gam_pc)*INFCSS)*(LSS*exp(L(+1)))/(LSS*exp(L))*(INFCSS*exp(INFC(+1)))*(YCSS*exp(YC(+1)))+100*YCSS*ePMKC=0;
    - (MCKSS*exp(MCK))*(YKSS*exp(YK))*theta_k/(PKBSS*exp(PKB))-(theta_k-1)*(YKSS*exp(YK))-100*phi_pc*((INFKSS*exp(INFK))-gam_pc*(INFKSS*exp(INFK(-1)))-(1-gam_pc)*INFKSS)*(INFKSS*exp(INFK))*(YKSS*exp(YK))+beta_*100*phi_pc*((INFKSS*exp(INFK(+1)))-gam_pc*(INFKSS*exp(INFK))-(1-gam_pc)*INFKSS)*(LSS*exp(L(+1)))/(LSS*exp(L))*(YKSS*exp(YK(+1)))*(INFKSS*exp(INFK(+1)))+100*YKSS*ePMKK=0;
    - (QKSS*exp(QK))-beta_*(1/(ONE*exp(EFFK)))*(((1-delta_)*(QKSS*exp(QK(+1)))+(RCSS*exp(RC(+1)))*(USS*exp(UC(+1))))*(LSS*exp(L(+1)))/(MUKSS*exp(MUK(+1)))/(LSS*exp(L)))=0;
    - (QKSS*exp(QK))-beta_*(1/(ONE*exp(EFFK)))*(((1-delta_)*(QKSS*exp(QK(+1)))+(RKSS*exp(RK(+1)))*(USS*exp(UK(+1))))*(LSS*exp(L(+1)))/(MUKSS*exp(MUK(+1)))/(LSS*exp(L)))=0;
    - (LSS*exp(L))-(beta_*exp(betas))*(RSS*exp(R))/rpr/(INFCSS*exp(INFC(+1)))/(MUCSS*exp(MUC(+1)))*(LSS*exp(L(+1)))=0;
    - log((RSS*exp(R))/RSS)-rho_R*log((RSS*exp(R(-1)))/RSS)-(1-rho_R)*(r_inf*log((INFCNASS*exp(INFCNA))/INFCNASS)+r_dinf*(log((INFCNASS*exp(INFCNA)))-log((INFCNASS*exp(INFCNA(-1)))))+r_y*(log((ONE*exp(PFGAP)))))-eR=0;
    - (LSS*exp(L))-eta_cnn/((ECSS*exp(EC))-h*(ECSS*exp(EC(-1)))/(MUCSS*exp(MUC)))+eta_cnn*beta_*h/((MUCSS*exp(MUC(+1)))*(ECSS*exp(EC(+1)))-h*(ECSS*exp(EC)))=0;
    - (KKSS*exp(KK))-(1-delta_)*(KKSS*exp(KK(-1)))/(MUKSS*exp(MUK))+(KCSS*exp(KC))-(1-delta_)*(KCSS*exp(KC(-1)))/(MUKSS*exp(MUK))-1*(EIKSS*exp(EIK))+mu_*(((USS*exp(UK))^(1+1/phi_u)-1)/(1+1/phi_u))*KKSS+mu_*(((USS*exp(UC))^(1+1/phi_u)-1)/(1+1/phi_u))*KCSS=0;

    # XXXXXXXXXXXXXXXXXXXXXXXXXXXX
    # labor block
    # TOTAL LABOR INPUT (called "(LSS*exp(L))" in the paper, I kept the "H" notation of the original EDO prg)
    - -100+(UHCSS*exp(UHC))*theta_wc-(theta_wc-1)*(WCSS*exp(WC))-100*phi_wc*((INFWCSS*exp(INFWC))-gam_wc*(INFWCSS*exp(INFWC(-1)))-(1-gam_wc)*INFWCSS)*(INFWCSS*exp(INFWC))*(WCSS*exp(WC))+beta_*100*phi_wc*((INFWCSS*exp(INFWC(+1)))-(gam_wc*(INFWCSS*exp(INFWC))+(1-gam_wc)*INFWCSS))*(LSS*exp(L(+1)))/(LSS*exp(L))*(INFWCSS*exp(INFWC(+1)))*(WCSS*exp(WC(+1)))+theta_wc*phi_H/10*((HCSS*exp(HC))/(HKSS*exp(HK))-gam_h*(HCSS*exp(HC(-1)))/(HKSS*exp(HK(-1)))-(1-gam_h)*HCSS/HKSS)+100*(ONE*exp(XiL))=0;
    - (UHSCSS*exp(UHSC))-(WCSS*exp(WC))+phi_H/10*((HSCSS*exp(HSC))/(HSKSS*exp(HSK))-gam_h*(HSCSS*exp(HSC(-1)))/(HSKSS*exp(HSK(-1)))-(1-gam_h)*HSCSS/HSKSS);#+100*eXiL=0;
    - -100+(UHKSS*exp(UHK))*theta_wk-(theta_wk-1)*(WKSS*exp(WK))-100*phi_wc*((INFWKSS*exp(INFWK))-gam_wc*(INFWKSS*exp(INFWK(-1)))-(1-gam_wc)*INFWKSS)*(INFWKSS*exp(INFWK))*(WKSS*exp(WK))+beta_*100*phi_wc*((INFWKSS*exp(INFWK(+1)))-(gam_wc*(INFWKSS*exp(INFWK))+(1-gam_wc)*INFWKSS))*(LSS*exp(L(+1)))/(LSS*exp(L))*(INFWKSS*exp(INFWK(+1)))*(WKSS*exp(WK(+1)))-theta_wc*phi_H/10*((HCSS*exp(HC))/(HKSS*exp(HK))-gam_h*(HCSS*exp(HC(-1)))/(HKSS*exp(HK(-1)))-(1-gam_h)*HCSS/HKSS)+100*(ONE*exp(XiL))=0;
    - (UHSKSS*exp(UHSK))-(WKSS*exp(WK))-phi_H/10*((HSCSS*exp(HSC))/(HSKSS*exp(HSK))-gam_h*(HSCSS*exp(HSC(-1)))/(HSKSS*exp(HSK(-1)))-(1-gam_h)*HSCSS/HSKSS);#+100*eXiL=0;
    - (UHCSS*exp(UHC))*(LSS*exp(L))*(ONE*exp(Lpref))-A_HC*((1+sigman)/(1+sigman/(1+sigmah)))*((HCSS*exp(HC)))^(-1+(1+sigman)/(1+sigman/(1+sigmah)))=0;
    - (UHSCSS*exp(UHSC))*(LSS*exp(L))*(ONE*exp(Lpref))-A_HC*((1+sigman)/(1+sigman/(1+sigmah)))*((HSCSS*exp(HSC)))^(-1+(1+sigman)/(1+sigman/(1+sigmah)))=0;
    - (UHKSS*exp(UHK))*(LSS*exp(L))*(ONE*exp(Lpref))-A_HK*((1+sigman)/(1+sigman/(1+sigmah)))*((HKSS*exp(HK)))^(-1+(1+sigman)/(1+sigman/(1+sigmah)))=0;
    - (UHSKSS*exp(UHSK))*(LSS*exp(L))*(ONE*exp(Lpref))-A_HK*((1+sigman)/(1+sigman/(1+sigmah)))*((HSKSS*exp(HSK)))^(-1+(1+sigman)/(1+sigman/(1+sigmah)))=0;
    - (empCSS*exp(empC))-((1+sigmah)/sigmah*xsi_NC/xsi_HrC)^(-1/(1+sigmah+sigman))*(HCSS*exp(HC))^(1/(1+sigman/(1+sigmah)))=0;
    - (HrCSS*exp(HrC))-((1+sigmah)/sigmah*xsi_NC/xsi_HrC)^(1/(1+sigmah))*(empCSS*exp(empC))^(sigman/(1+sigmah))=0;
    - (empKSS*exp(empK))-((1+sigmah)/sigmah*xsi_NK/xsi_HrK)^(-1/(1+sigmah+sigman))*(HKSS*exp(HK))^(1/(1+sigman/(1+sigmah)))=0;
    - (HrKSS*exp(HrK))-((1+sigmah)/sigmah*xsi_NK/xsi_HrK)^(1/(1+sigmah))*(empKSS*exp(empK))^(sigman/(1+sigmah))=0;
    - (empSCSS*exp(empSC))-((1+sigmah)/sigmah*xsi_NC/xsi_HrC)^(-1/(1+sigmah+sigman))*(HSCSS*exp(HSC))^(1/(1+sigman/(1+sigmah)))=0;
    - (HrSCSS*exp(HrSC))-((1+sigmah)/sigmah*xsi_NC/xsi_HrC)^(1/(1+sigmah))*(empSCSS*exp(empSC))^(sigman/(1+sigmah))=0;
    - (empSKSS*exp(empSK))-((1+sigmah)/sigmah*xsi_NK/xsi_HrK)^(-1/(1+sigmah+sigman))*(HSKSS*exp(HSK))^(1/(1+sigman/(1+sigmah)))=0;
    - (HrSKSS*exp(HrSK))-((1+sigmah)/sigmah*xsi_NK/xsi_HrK)^(1/(1+sigmah))*(empSKSS*exp(empSK))^(sigman/(1+sigmah))=0;
    - (unempSS*exp(unemp))-((empSCSS*exp(empSC))+(empSKSS*exp(empSK))-((empCSS*exp(empC))+(empKSS*exp(empK))))/((empSCSS*exp(empSC))+(empSKSS*exp(empSK)))=0;
    - (PKBSS*exp(PKB))-(1-100*phi_ic*((EIKSS*exp(EIK))-gam_ic*(EIKSS*exp(EIK(-1)))-(1-gam_ic)*EIKSS)/((KCSS*exp(KC(-1)))+(KKSS*exp(KK(-1))))*(MUKSS*exp(MUK)))*(QKSS*exp(QK))-beta_*(1/(ONE*exp(EFFK)))*100*phi_ic*gam_ic*((EIKSS*exp(EIK(+1)))-(gam_ic*(EIKSS*exp(EIK))+(1-gam_ic)*EIKSS))/((KCSS*exp(KC))+(KKSS*exp(KK)))*(MUKSS*exp(MUK(+1)))*(QKSS*exp(QK(+1)))*(LSS*exp(L(+1)))/(LSS*exp(L))=0;
    - (YCSS*exp(YC))-(ECSS*exp(EC))-(ECHSS*exp(ECH))-0.2*YCSS*(ONE*exp(HG))=0;
    - log((INFWCSS*exp(INFWC)))-log((WCSS*exp(WC)))+log((WCSS*exp(WC(-1))))-log((MUCSS*exp(MUC)))-log((INFCSS*exp(INFC)))=0;
    - log((INFWKSS*exp(INFWK)))-log((WKSS*exp(WK)))+log((WKSS*exp(WK(-1))))-log((MUCSS*exp(MUC)))-log((INFCSS*exp(INFC)))=0;
    - log((INFKSS*exp(INFK)))-log((INFCSS*exp(INFC)))-log((PKBSS*exp(PKB)))+log((PKBSS*exp(PKB(-1))))+log((MUKSS*exp(MUK)))-log((MUCSS*exp(MUC)))=0;
    - (YKSS*exp(YK))-(EIKSS*exp(EIK))-(ECDSS*exp(ECD))-0.2*YKSS*(ONE*exp(HG))=0;
    - log((ONE*exp(DIFFNORMGDP)))-(1-s_k)*(log((YCSS*exp(YC)))-log((YCSS*exp(YC(-1)))))-s_k*(log((YKSS*exp(YK)))-log((YKSS*exp(YK(-1)))))=0;
    - log((ONE*exp(NORMINFGDP)))-s_k*(log((PKBSS*exp(PKB)))-log((PKBSS*exp(PKB(-1)))))=0;
    - log((DIFFREALGDPSS*exp(DIFFREALGDP)))-log((ONE*exp(DIFFNORMGDP)))-(1-s_k)*log((MUCSS*exp(MUC)))-s_k*log((MUKSS*exp(MUK)))=0;
    - log((DIFFREALECSS*exp(DIFFREALEC)))-log((ECSS*exp(EC)))+log((ECSS*exp(EC(-1))))-log((MUCSS*exp(MUC)))=0;
    - log((DIFFREALEIKSS*exp(DIFFREALEIK)))-log((EIKSS*exp(EIK)))+log((EIKSS*exp(EIK(-1))))-log((MUKSS*exp(MUK)))=0;

    # Identities
    - log((DIFFREALWSS*exp(DIFFREALW)))-HCSS/AHSS*(log((INFWCSS*exp(INFWC))))-HKSS/AHSS*(log((INFWKSS*exp(INFWK))))+log((INFCSS*exp(INFC)))=0;


    # XXXXXXXXXXXXXXXXXXXXX
    # Aggregate hours equals agg hours in each sector
    - (AHSS*exp(AH))-(HCSS*exp(HC))-(HKSS*exp(HK))=0;
    - log((INFGDPSS*exp(INFGDP)))-log((INFCSS*exp(INFC)))-log((YCSS*exp(YC))*(MUCSS*exp(MUC))/(YCSS*exp(YC(-1))))+log((DIFFREALGDPSS*exp(DIFFREALGDP)))-log((1+(PKBSS*exp(PKB))*(YKSS*exp(YK))/(YCSS*exp(YC)))/(1+(PKBSS*exp(PKB(-1)))*(YKSS*exp(YK(-1)))/(YCSS*exp(YC(-1)))))=0;
    - log((INFCNASS*exp(INFCNA)))-(1-s_ecdc)*log((INFCSS*exp(INFC)))-s_ecdc*log((INFKSS*exp(INFK)))=0;
    - log((INFCORSS*exp(INFCOR)))-(1-s_ecdc)*log((INFCSS*exp(INFC)))-s_ecdc*log((INFKSS*exp(INFK)))=0;
    - log((ONE*exp(GAP)))-(1-s_k)*log((YCSS*exp(YC))/YCSS)-s_k*log((YKSS*exp(YK))/YKSS)=0;
    - log((ONE*exp(PFGAP)))-(1-alpha_)*((1-s_k)*log((HCSS*exp(HC))/HCSS)+s_k*log((HKSS*exp(HK))/HKSS))-alpha_*((1-s_k)*log((USS*exp(UC))/USS)+s_k*log((USS*exp(UK))/USS))=0;
    - log((INFC10SS*exp(INFC10)))-betarl*log((INFC10SS*exp(INFC10(+1))))-(1-betarl)*log((INFCORSS*exp(INFCOR)))=0;

    # See Section 8: Data Identities

    # new equations
    # Durable Block

    - (KCDSS*exp(KD))-(1-delta_cd)*(KCDSS*exp(KD(-1)))/(MUKSS*exp(MUK))-(ECDSS*exp(ECD))=0;
    - (LSS*exp(L))*(RCDSS*exp(RCD))-eta_cd/((KCDSS*exp(KD(-1)))/(MUKSS*exp(MUK))-h_cd*(KCDSS*exp(LAGKD(-1)))/((MUKSS*exp(MUK(-1)))*(MUKSS*exp(MUK))))+beta_*eta_cd*h_cd/((KCDSS*exp(KD))-h_cd*(KCDSS*exp(KD(-1)))/(MUKSS*exp(MUK)))=0;
    - (QCDSS*exp(QCD))-beta_*(1/(ONE*exp(EFFECD)))*(LSS*exp(L(+1)))/(LSS*exp(L))/(MUKSS*exp(MUK(+1)))*((RCDSS*exp(RCD(+1)))+(1-delta_cd)*(QCDSS*exp(QCD(+1))))=0;
    - (PKBSS*exp(PKB))-(QCDSS*exp(QCD))*(1-100*phi_cd*((ECDSS*exp(ECD))-gam_icd*(ECDSS*exp(ECD(-1)))-(1-gam_icd)*ECDSS)/(KCDSS*exp(KD(-1)))*(MUKSS*exp(MUK))) - beta_*(1/(ONE*exp(EFFECD)))*100*gam_icd*phi_cd*((ECDSS*exp(ECD(+1)))-(gam_icd*(ECDSS*exp(ECD))+(1-gam_icd)*ECDSS))/(KCDSS*exp(KD))*(QCDSS*exp(QCD(+1)))*(LSS*exp(L(+1)))/(LSS*exp(L))*(MUKSS*exp(MUK(+1)))=0;

    # Housing Block
    - (LSS*exp(L))*(RCHSS*exp(RCH))-eta_ch/((KCHSS*exp(KCH(-1)))/(MUCSS*exp(MUC))-h_ch*(KCHSS*exp(LAGKCH(-1)))/((MUCSS*exp(MUC))*(MUCSS*exp(MUC(-1)))))+beta_*eta_ch*h_ch/((KCHSS*exp(KCH))-h_ch*(KCHSS*exp(KCH(-1)))/(MUCSS*exp(MUC)))=0;
    - (QCHSS*exp(QCH))-beta_*(1/(ONE*exp(EFFECH)))*(LSS*exp(L(+1)))/(LSS*exp(L))/(MUCSS*exp(MUC(+1)))*((RCHSS*exp(RCH(+1)))+(1-delta_ch)*(QCHSS*exp(QCH(+1))))=0;
    - 1*(ECHSS*exp(ECH))+(1-delta_ch)*(KCHSS*exp(KCH(-1)))/(MUCSS*exp(MUC))-(KCHSS*exp(KCH))=0;
    - 1-(QCHSS*exp(QCH))*(1-100*phi_ech*((ECHSS*exp(ECH))-gam_ech*(ECHSS*exp(ECH(-1)))-(1-gam_ech)*ECHSS)/(KCHSS*exp(KCH(-1)))*(MUCSS*exp(MUC))) - beta_*(1/(ONE*exp(EFFECH)))*100*gam_ech*phi_ech*((ECHSS*exp(ECH(+1)))-(gam_ech*(ECHSS*exp(ECH))+(1-gam_ech)*ECHSS))/(KCHSS*exp(KCH))*(QCHSS*exp(QCH(+1)))*(LSS*exp(L(+1)))/(LSS*exp(L))*(MUCSS*exp(MUC(+1)))=0;
    - log((KCDSS*exp(KD(-1))))-log((KCDSS*exp(LAGKD)))=0;
    - log((KCHSS*exp(KCH(-1))))-log((KCHSS*exp(LAGKCH)))=0;
    - (RKSS*exp(RK))-(QKSS*exp(QK))*mu_*(USS*exp(UK))^(1/phi_u)=0;
    - (RCSS*exp(RC))-(QKSS*exp(QK))*mu_*(USS*exp(UC))^(1/phi_u)=0;
    - log((DIFFREALECHSS*exp(DIFFREALECH)))-log((MUCSS*exp(MUC)))-log((ECHSS*exp(ECH)))+log((ECHSS*exp(ECH(-1))))=0;
    - log((DIFFREALECDSS*exp(DIFFREALECD)))-log((MUKSS*exp(MUK)))-log((ECDSS*exp(ECD)))+log((ECDSS*exp(ECD(-1))))=0;
    - log((beta_*exp(betas))/beta_)-rho_B*log((beta_*exp(betas(-1)))/beta_)-eB=0;
    - log((ONE*exp(XiL)))-rho_XiL*log((ONE*exp(XiL(-1))))-eXiL=0;
    - log((ONE*exp(Lpref)))-rho_lpref*log((ONE*exp(Lpref(-1))))-eLpref=0;
    - log((ONE*exp(EFFK)))-rho_EFFK*log((ONE*exp(EFFK(-1))))-eEFFK=0;
    - log((MUZKSS*exp(MUZK))/MUZKSS)-eMUZK=0;
    - log((MUZMSS*exp(MUZM))/MUZMSS)-eMUZM=0;
    - log((ONE*exp(HG)))-rho_HG*log((ONE*exp(HG(-1))))-eHG=0;
    - log((MUCSS*exp(MUC)))-log((MUZMSS*exp(MUZM)))-alpha_*log((MUZKSS*exp(MUZK)))=0;
    - log((MUKSS*exp(MUK)))-log((MUZMSS*exp(MUZM)))-log((MUZKSS*exp(MUZK)))=0;
    - log((ONE*exp(EFFECD)))-rho_EFFECD*log((ONE*exp(EFFECD(-1))))-eEFFECD=0;
    - log((ONE*exp(EFFECH)))-rho_EFFECH*log((ONE*exp(EFFECH(-1))))-eEFFECH=0;
    - log((ONE*exp(STAR)))-rho_STAR*log((ONE*exp(STAR(-1))))-eSTAR=0;
    - log((RL1SS*exp(RL1))) - log((RSS*exp(R(+1))))=0;
    - log((RL2SS*exp(RL2))) - log((RL1SS*exp(RL1(+1))))=0;
    - log((RL3SS*exp(RL3))) - log((RL2SS*exp(RL2(+1))))=0;
    - log((RL4SS*exp(RL4))) - log((RL3SS*exp(RL3(+1))))=0;
    - log((RL5SS*exp(RL5))) - log((RL4SS*exp(RL4(+1))))=0;
    - log((RL6SS*exp(RL6))) - log((RL5SS*exp(RL5(+1))))=0;
    - log((RL7SS*exp(RL7))) - log((RL6SS*exp(RL6(+1))))=0;
    - log((RT2SS*exp(RT2))) - tp2 - 0.125*(log((RSS*exp(R))) + log((RL1SS*exp(RL1))) + log((RL2SS*exp(RL2))) + log((RL3SS*exp(RL3))) + log((RL4SS*exp(RL4))) + log((RL5SS*exp(RL5))) + log((RL6SS*exp(RL6))) + log((RL7SS*exp(RL7)))) - log((ONE*exp(STAR)))=0;

  observables:
    DIFFREALGDP : (1-s_k)*log(MUCSS)*100 + s_k*log(MUKSS)*100 + DIFFREALGDP# + meas_DIFFREALGDP
    DIFFREALEC : log(MUCSS)*100.0 + DIFFREALEC# + meas_DIFFREALEC                                                  
    DIFFREALEIK : log(MUKSS)*100.0 + DIFFREALEIK# + meas_DIFFREALEIK                                   
    DIFFREALECD : log(MUKSS)*100.0 + DIFFREALECD# + meas_DIFFREALECD                  
    DIFFREALECH : log(MUCSS)*100.0 + DIFFREALECH# + meas_DIFFREALECH                                    
    DIFFREALW : log(MUCSS)*100.0 + DIFFREALW# + meas_DIFFREALW                                    
    AH : 0.0 + AH  # + meas_AH                                                             
    INFCNA : (1.0-s_ecdc)*log(INFCSS)*100.0+s_ecdc*log(INFKSS)*100.0 + INFCNA# + meas_INFCNA
    INFCOR : (1.0-s_ecdc)*log(INFCSS)*100.0+s_ecdc*log(INFKSS)*100.0 + INFCOR# + meas_INFCOR
    INFK : log(INFCSS)*100-log(MUKSS)*100.0+log(MUCSS)*100.0 + INFK# + meas_INFK
    R : log(RSS)*100.0 + R# + meas_R                                                  
    RT2 : log(RT2SS)*100.0 + RT2# + meas_RT2                                            
    unemp : 100.0*log(unempSS) + unemp# + meas_unemp                                        


calibration:

  parafunc:
    r_dy     : 0;
    ONE      : 1;
    MUZKSS   : 1.009250;
    MUZMSS   : 1.001000;
    gam_ic   : 1.0;
    gam_icd  : 1.0;
    r_dinf   : 0;
    rpr      : 0.965
    phi_u    : 1
    rho_MUZK : 0;
    rho_MUZM : 0;
    pbeta    : 0.99862;
    delta_   : 0.03;
    h_cd     : 0.0;
    h_ch     : 0.0;
    delta_cd : 0.055;
    delta_ch : 0.0035;
    alpha_   : 0.26;
    theta_c  : 7;
    theta_k  : 7;
    unempSS  : .06;
    g_y      : 0.0;
    a_ks     : 0.2;
    s_AS     : 0.2;
    gam_h    : 1;
    gam_ech  : 1;
    icoef    : 3;
    betarl   : 0.958;
    beta_0  :  pbeta;
    beta_2  :  pbeta*rpr; 
    beta_  :  beta_2;
    MUZCSS : 1;
    ONE : 1;
    USS : 1;
    MUKSS : MUZKSS*MUZMSS;
    MUCSS : MUZKSS^alpha_*MUZMSS;
    MUKSShabit : MUKSS;
    MUCSShabit : MUCSS;
    PKBSS : theta_k/(theta_k-1)*(theta_c-1)/theta_c;
    PYSS : 1;
    MCCSS : (theta_c-1)/theta_c;
    MCKSS : (theta_k-1)/theta_k;
    RKSS : MUKSS/beta_2-(1-delta_);
    RCSS : MUKSS/beta_2-(1-delta_);
    RCHSS : MUCSS/beta_2-(1-delta_ch); #% Housing sector
    RCDSS : MUKSS/beta_2-(1-delta_cd); #% Durable sector
    USS : 1;
    mu_ : RCSS;
    AA : alpha_/RKSS*MCKSS;
    #DD  :  0.135;
    #RR  :  0.075;
    eta_cnn : 1;
    eta_cd_eta_cnn : 0.135/((MUKSShabit-beta_2*h_cd)/(1-beta_2*h/MUCSShabit)*(1-h/MUCSShabit)/(1-h_cd/MUKSShabit)*(1-(1-delta_cd)/MUKSS)/RCDSS);
    eta_ch_eta_cnn : 0.075/((MUCSShabit-beta_2*h_ch)/(1-beta_2*h/MUCSShabit)*(1-h/MUCSShabit)/(1-h_ch/MUCSShabit)*(1-(1-delta_ch)/MUCSS)/RCHSS);
    eta_ch : eta_ch_eta_cnn;
    eta_cd : eta_cd_eta_cnn;
    DDpara : eta_cd_eta_cnn*(MUKSShabit-beta_2*h_cd)/(1-beta_2*h/MUCSShabit)*(1-h/MUCSShabit)/(1-h_cd/MUKSShabit)*(1-(1-delta_cd)/MUKSS)/RCDSS;
    RRpara : eta_ch_eta_cnn*(MUCSShabit-beta_2*h_ch)/(1-beta_2*h/MUCSShabit)*(1-h/MUCSShabit)/(1-h_ch/MUCSShabit)*(1-(1-delta_ch)/MUCSS)/RCHSS;
    Rnr : (1-(1-delta_)/MUKSS)*AA*MUKSS;
    ycbi_ykb : ((1-s_AS)-Rnr)/((DDpara*(1-s_AS)/(1+RRpara))+Rnr);
    hc_hk : ycbi_ykb*(RCSS*MCKSS/(RKSS*MCCSS))^(alpha_/(1-alpha_));
    HSS : 0.25;
    AHSS : HSS;
    HKSS : HSS/(1+hc_hk);
    HCSS : HSS-HKSS;
    HrCSS : 1/3;
    HrKSS : 1/3;
    empCSS : HCSS/HrCSS;
    empKSS : HKSS/HrKSS;
    ycbi : HCSS*(AA)^(alpha_/(1-alpha_));
    ykb : HKSS*(AA)^(alpha_/(1-alpha_));
    YCSS : ycbi;
    YKSS : ykb;
    KCSS : AA*ycbi*MUKSS;
    KKSS : AA*ykb*MUKSS;
    ECHSS : RRpara/(1+RRpara)*ycbi*(1-s_AS);
    ECSS : 1/(1+RRpara)*ycbi*(1-s_AS);
    ECDSS : DDpara*PKBSS*ECSS;
    EIKSS : (1-(1-delta_)/MUKSS)*(KCSS+KKSS);
    KCDSS : ECDSS/(1-(1-delta_cd)/MUKSS);
    KCHSS : ECHSS/(1-(1-delta_ch)/MUCSS);
    YYSS : (YCSS+YKSS*PKBSS)/PYSS;
    s_k_ecd : ECDSS/YKSS;
    s_c_ech : ECHSS/YCSS;
    s_k_eik : EIKSS/YKSS;
    s_yc  :  (YCSS/YYSS);
    s_ecdc : PKBSS*ECDSS/(ECSS+PKBSS*ECDSS+(MUCSS/beta_2-1+delta_ch)*KCHSS);
    INFCNASS : exp(.02/4);
    INFCSS  :  INFCNASS*((MUZCSS/MUZKSS)^(1-alpha_))^(-s_ecdc);
    INFCORSS : INFCNASS;
    INFKSS : INFCSS*(MUZCSS/MUZKSS)^(1-alpha_);
    INFWCSS : INFCSS*MUZKSS^alpha_*MUZMSS;
    INFWKSS : INFWCSS;
    RSS : INFCSS/beta_0*MUCSS;
    RT2SS : exp(tp2)*RSS;
    INFC10SS  :  INFCNASS;
    IMPHSSS  :  RCHSS*KCHSS;
    s_k : PKBSS*YKSS/YYSS;
    INFGDPSS : INFCSS^(YCSS/YYSS)*INFKSS^(YKSS*PKBSS/(YYSS));
    LSS : eta_cnn/(ECSS*(1-h/MUCSShabit))-eta_cnn*beta_2*h/(ECSS*(MUCSShabit-h));
    WCSS : MCCSS*(1-alpha_)*YCSS/HCSS;
    WKSS : MCKSS*(1-alpha_)*YKSS/HKSS;
    xsiN_xsiH_C  :  ((HrCSS/empCSS)^(1+sigmah))/(1+1/sigmah);
    xsiN_xsiH_K  :  ((HrKSS/empKSS)^(1+sigmah))/(1+1/sigmah);
    gC  :  (1/(1+sigman) + 1/sigmah)*(xsiN_xsiH_C*(1+sigmah)/sigmah)^(-(1+sigman)/(1+sigman+sigmah));
    markup_xsiN_C  :  (HCSS^((1+sigmah)*(1+sigman)/(1+sigmah+sigman)-1))*gC/(LSS*WCSS);
    gK  :  (1/(1+sigman) + 1/sigmah)*(xsiN_xsiH_K*(1+sigmah)/sigmah)^(-(1+sigman)/(1+sigman+sigmah));
    markup_xsiN_K  :  (HKSS^((1+sigmah)*(1+sigman)/(1+sigmah+sigman)-1))*gK/(LSS*WKSS);
    empSCSS : ((1+sigmah)/sigmah*xsi_NC/xsi_HrC)^(-1/(1+sigmah+sigman))*HSCSS^(1/(1+sigman/(1+sigmah))); 
    empSKSS : ((1+sigmah)/sigmah*xsi_NK/xsi_HrK)^(-1/(1+sigmah+sigman))*HSKSS^(1/(1+sigman/(1+sigmah))); 
    #unempSS : (empSCSS+empSKSS-(empCSS+empKSS))/(empSCSS+empSKSS);
    markup_w  :  (1-unempSS)^((1+sigmah+sigman)/(1+sigmah) - 1 - sigman);
    theta_wc  :  markup_w/(markup_w -1); 
    theta_wk  :  theta_wc;
    A_HC : LSS*(theta_wc-1)/theta_wc*WCSS/(((1+sigman)/(1+sigman/(1+sigmah)))*HCSS^(-1+(1+sigman)/(1+sigman/(1+sigmah))));
    A_HK : LSS*(theta_wk-1)/theta_wk*WKSS/(((1+sigman)/(1+sigman/(1+sigmah)))*HKSS^(-1+(1+sigman)/(1+sigman/(1+sigmah))));
    xsi_NC : A_HC/((1/(1+sigman)+1/sigmah)*(HCSS^sigman/HrCSS^(1+sigman+sigmah))^((1+sigman)/(1+sigman+sigmah)));
    xsi_NK : A_HK/((1/(1+sigman)+1/sigmah)*(HKSS^sigman/HrKSS^(1+sigman+sigmah))^((1+sigman)/(1+sigman+sigmah)));
    xsi_HrC : xsi_NC*(1+sigmah)/sigmah*(HCSS^sigman/HrCSS^(1+sigman+sigmah));
    xsi_HrK : xsi_NK*(1+sigmah)/sigmah*(HKSS^sigman/HrKSS^(1+sigman+sigmah));
    UHCSS : A_HC*((1+sigman)/(1+sigman/(1+sigmah)))*HCSS^(-1+(1+sigman)/(1+sigman/(1+sigmah)))/LSS;
    UHKSS : A_HK*((1+sigman)/(1+sigman/(1+sigmah)))*HKSS^(-1+(1+sigman)/(1+sigman/(1+sigmah)))/LSS;
    HSCSS : (WCSS*LSS/(A_HC*((1+sigman)/(1+sigman/(1+sigmah)))))^(1/(-1+(1+sigman)/(1+sigman/(1+sigmah))));
    HSKSS : (WKSS*LSS/(A_HK*((1+sigman)/(1+sigman/(1+sigmah)))))^(1/(-1+(1+sigman)/(1+sigman/(1+sigmah))));

    HrSCSS : HSCSS/empSCSS;
    HrSKSS : HSKSS/empSKSS;
    UHSCSS : A_HC*((1+sigman)/(1+sigman/(1+sigmah)))*HSCSS^(-1+(1+sigman)/(1+sigman/(1+sigmah)))/LSS;
    UHSKSS : A_HK*((1+sigman)/(1+sigman/(1+sigmah)))*HSKSS^(-1+(1+sigman)/(1+sigman/(1+sigmah)))/LSS;

    QKSS : 1;
    QCDSS : 1;
    QCHSS : 1;
    UCSS : 1;
    UKSS : 1;
    XiBSS : 1;
    XiDSS : 1;
    XiHSS : 1;
    RL1SS : RSS;
    RL2SS : RSS;
    RL3SS : RSS;
    RL4SS : RSS;
    RL5SS : RSS;
    RL6SS : RSS;
    RL7SS : RSS;
    DIFFREALECSS :  exp( log(MUCSS));
    DIFFREALEIKSS : exp( log(MUKSS));
    DIFFREALECDSS : exp( log(MUKSS));
    DIFFREALECHSS : exp( log(MUCSS));
    DIFFREALWSS : exp( log(MUCSS) );
    DIFFREALGDPSS : exp( (1-s_k)*log(MUCSS)+(s_k)*log(MUKSS));

  parameters:
    h          :  0.715162417869797
    r_inf      :  1.463441639690350
    r_y        :  0.263123294207851
    phi_pc     :  3.544714532954500
    phi_H      :  3.228940791065600
    phi_wc     :  5.493957555147230
    phi_ic     :  0.253308786976374
    phi_cd     :  0.470089385005009
    phi_ech    :  9.139868865461630
    gam_pc     :  0.314488926051065
    gam_wc     : -0.230018833252054
    sigman     :  39.40752606187890
    sigmah     :  21.88598034026920
    rho_R      :  0.833200065745674
    rho_XiL    :  0.263567746111198
    rho_lpref  :  0.979092048897712
    rho_B      :  0.895267027146152
    rho_STAR   :  0.909187927454138
    rho_EFFK   :  0.937829274540004
    rho_EFFECD : -0.240286975088701
    rho_HG     :  0.582395471123139
    rho_EFFECH :  0.877235725078934
    tp2        :  0.000307314910763
    sig_HG     :  0.579315931803017
    sig_XiL    :  2.493138739167510
    sig_lpref  :  5.664767481142410
    sig_R      :  0.124100461010359
    sig_MUZK   :  0.936167718269030
    sig_MUZM   :  0.597390920898135
    sig_PMKC   :  0.451830653200989
    sig_PMKK   :  0.685376191952156
    sig_EFFECH :  0.514704527091087
    sig_EFFECD :  9.111995859739900
    sig_EFFK   :  0.402779878811407
    sig_B      :  0.295232712196573
    sig_STAR   :  0.104877885500673

  covariances:
    eHG        : sig_HG^2          
    eXiL       : sig_XiL^2    
    eLpref     : sig_lpref^2  
    eR         : sig_R^2           
    eMUZK      : sig_MUZK^2   
    eMUZM      : sig_MUZM^2   
    ePMKC      : sig_PMKC^2   
    ePMKK      : sig_PMKK^2   
    eEFFECH    : sig_EFFECH^2 
    eEFFECD    : sig_EFFECD^2 
    eEFFK      : sig_EFFK^2
    eB         : sig_B^2           
    eSTAR      : sig_STAR^2   

  measurement_errors:
    meas_DIFFREALGDP : 0.300000^2
    meas_DIFFREALEC  : 0.100000^2                 
    meas_DIFFREALEIK : 1.500000^2 
    meas_DIFFREALECD : 1.500000^2
    meas_DIFFREALECH : 1.500000^2  
    meas_DIFFREALW   : 0.300000^2
    meas_AH          : 0.300000^2
    meas_INFCNA      : 0.500000^2
    meas_INFCOR      : 0.050000^2
    meas_INFK        : 0.200000^2
    meas_R           : 0.000000^2
    meas_RT2         : 0.100000^2
    meas_unemp       : 4.000000^2


estimation:
  data:
    '/mq/home/m1eph00/code/fortran/models/edo/yy.txt'

  prior:
    h          : [uniform,-1.000, 1.00]
    r_inf      : [normal, 1.500, 0.0625]
    r_y        : [normal, 0.125, 0.125]
    phi_pc     : [gamma, 4.000, 2.0]
    phi_H      : [gamma, 4.000, 2.0]
    phi_wc     : [gamma, 4.000, 2.0]
    phi_ic     : [gamma, 4.000, 2.0]
    phi_cd     : [gamma, 4.000, 2.0]
    phi_ech    : [gamma, 4.000, 2.0]
    gam_pc     : [normal, 0.000, 0.250]
    gam_wc     : [normal, 0.000, 0.250]
    sigman     : [gamma, 5.0,  5.0]
    sigmah     : [gamma, 10.000,10.0]
    rho_R      : [normal, 0.500, 0.250]
    rho_XiL    : [normal, 0.500, 0.250]
    rho_lpref  : [normal, 0.500, 0.250]
    rho_B      : [normal, 0.000, 0.500]
    rho_STAR   : [normal, 0.000, 0.500]
    rho_EFFK   : [normal, 0.000, 0.500]
    rho_EFFECD : [normal, 0.000, 0.500]
    rho_HG     : [beta, 0.500, 0.1222474]
    rho_EFFECH : [normal, 0.000, 0.500]
    tp2        : [normal, 0.000, 0.0005]
    sig_HG     : [inv_gamma, 1.000, 2.0000]
    sig_XiL    : [inv_gamma, 1.000, 2.0000]
    sig_lpref  : [inv_gamma, 1.000, 2.0000]
    sig_R      : [inv_gamma, 0.200, 2.0000]
    sig_MUZK   : [inv_gamma, 0.250, 2.0000]
    sig_MUZM   : [inv_gamma, 0.250, 2.0000]
    sig_PMKC   : [inv_gamma, 0.200, 2.0000]
    sig_PMKK   : [inv_gamma, 0.200, 2.0000]
    sig_EFFECH : [inv_gamma, 1.000, 2.0000]
    sig_EFFECD : [inv_gamma, 1.000, 2.0000]
    sig_EFFK   : [inv_gamma, 1.000, 2.0000]
    sig_B      : [inv_gamma, 1.000, 2.0000]
    sig_STAR   : [inv_gamma, 0.200, 2.0000]

    
