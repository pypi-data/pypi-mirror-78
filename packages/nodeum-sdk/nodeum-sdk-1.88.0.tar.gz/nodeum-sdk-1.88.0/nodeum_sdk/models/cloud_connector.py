# coding: utf-8

"""
    Nodeum API

    The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)  **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)    # noqa: E501

    The version of the OpenAPI document: 2.1.0
    Contact: info@nodeum.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from nodeum_sdk.configuration import Configuration


class CloudConnector(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'name': 'str',
        'url': 'str',
        'url_proxy': 'str',
        'provider': 'str',
        'region': 'str',
        'access_key': 'str',
        'secret_key': 'str',
        'options': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'url': 'url',
        'url_proxy': 'url_proxy',
        'provider': 'provider',
        'region': 'region',
        'access_key': 'access_key',
        'secret_key': 'secret_key',
        'options': 'options'
    }

    def __init__(self, id=None, name=None, url=None, url_proxy=None, provider=None, region=None, access_key=None, secret_key=None, options=None, local_vars_configuration=None):  # noqa: E501
        """CloudConnector - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._url = None
        self._url_proxy = None
        self._provider = None
        self._region = None
        self._access_key = None
        self._secret_key = None
        self._options = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if url is not None:
            self.url = url
        if url_proxy is not None:
            self.url_proxy = url_proxy
        if provider is not None:
            self.provider = provider
        if region is not None:
            self.region = region
        if access_key is not None:
            self.access_key = access_key
        if secret_key is not None:
            self.secret_key = secret_key
        if options is not None:
            self.options = options

    @property
    def id(self):
        """Gets the id of this CloudConnector.  # noqa: E501


        :return: The id of this CloudConnector.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CloudConnector.


        :param id: The id of this CloudConnector.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this CloudConnector.  # noqa: E501


        :return: The name of this CloudConnector.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CloudConnector.


        :param name: The name of this CloudConnector.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def url(self):
        """Gets the url of this CloudConnector.  # noqa: E501


        :return: The url of this CloudConnector.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CloudConnector.


        :param url: The url of this CloudConnector.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def url_proxy(self):
        """Gets the url_proxy of this CloudConnector.  # noqa: E501


        :return: The url_proxy of this CloudConnector.  # noqa: E501
        :rtype: str
        """
        return self._url_proxy

    @url_proxy.setter
    def url_proxy(self, url_proxy):
        """Sets the url_proxy of this CloudConnector.


        :param url_proxy: The url_proxy of this CloudConnector.  # noqa: E501
        :type: str
        """

        self._url_proxy = url_proxy

    @property
    def provider(self):
        """Gets the provider of this CloudConnector.  # noqa: E501


        :return: The provider of this CloudConnector.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this CloudConnector.


        :param provider: The provider of this CloudConnector.  # noqa: E501
        :type: str
        """
        allowed_values = ["generic_s3", "amazon_aws_s3", "cloudian_hyperstore", "scality_ring", "dell_emc_ecs", "azure", "google_cloud_storage", "openstack_swift", "wasabi"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and provider not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `provider` ({0}), must be one of {1}"  # noqa: E501
                .format(provider, allowed_values)
            )

        self._provider = provider

    @property
    def region(self):
        """Gets the region of this CloudConnector.  # noqa: E501


        :return: The region of this CloudConnector.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this CloudConnector.


        :param region: The region of this CloudConnector.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def access_key(self):
        """Gets the access_key of this CloudConnector.  # noqa: E501


        :return: The access_key of this CloudConnector.  # noqa: E501
        :rtype: str
        """
        return self._access_key

    @access_key.setter
    def access_key(self, access_key):
        """Sets the access_key of this CloudConnector.


        :param access_key: The access_key of this CloudConnector.  # noqa: E501
        :type: str
        """

        self._access_key = access_key

    @property
    def secret_key(self):
        """Gets the secret_key of this CloudConnector.  # noqa: E501


        :return: The secret_key of this CloudConnector.  # noqa: E501
        :rtype: str
        """
        return self._secret_key

    @secret_key.setter
    def secret_key(self, secret_key):
        """Sets the secret_key of this CloudConnector.


        :param secret_key: The secret_key of this CloudConnector.  # noqa: E501
        :type: str
        """

        self._secret_key = secret_key

    @property
    def options(self):
        """Gets the options of this CloudConnector.  # noqa: E501

        S3FS mounting options, separated by comma  # noqa: E501

        :return: The options of this CloudConnector.  # noqa: E501
        :rtype: str
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this CloudConnector.

        S3FS mounting options, separated by comma  # noqa: E501

        :param options: The options of this CloudConnector.  # noqa: E501
        :type: str
        """

        self._options = options

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CloudConnector):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CloudConnector):
            return True

        return self.to_dict() != other.to_dict()
