# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import _utilities, _tables


class GtmResource(pulumi.CustomResource):
    aggregation_type: pulumi.Output[str]
    constrained_property: pulumi.Output[str]
    decay_rate: pulumi.Output[float]
    description: pulumi.Output[str]
    domain: pulumi.Output[str]
    """
    — Domain name
    """
    host_header: pulumi.Output[str]
    leader_string: pulumi.Output[str]
    least_squares_decay: pulumi.Output[float]
    load_imbalance_percentage: pulumi.Output[float]
    max_u_multiplicative_increment: pulumi.Output[float]
    name: pulumi.Output[str]
    """
    — Resource name
    * `aggregation_type`
    """
    resource_instances: pulumi.Output[list]
    """
    — (multiple allowed) 
    * `datacenter_id`
    * `load_object`
    * `load_object_port`

      * `datacenter_id` (`float`)
      * `loadObject` (`str`)
      * `loadObjectPort` (`float`)
      * `loadServers` (`list`) - — (List)
      * `useDefaultLoadObject` (`bool`) - — (Boolean)
        * `host_header`
        * `least_squares_decay`
        * `upper_bound`
        * `description`
        * `leader_string`
        * `constrained_property`
        * `load_imbalance_percent`
        * `max_u_multiplicative_increment`
        * `decay_rate`
    """
    type: pulumi.Output[str]
    """
    — Resource type
    """
    upper_bound: pulumi.Output[float]
    wait_on_complete: pulumi.Output[bool]
    """
    — (Boolean, Default: true) Wait for transaction to complete
    """
    def __init__(__self__, resource_name, opts=None, aggregation_type=None, constrained_property=None, decay_rate=None, description=None, domain=None, host_header=None, leader_string=None, least_squares_decay=None, load_imbalance_percentage=None, max_u_multiplicative_increment=None, name=None, resource_instances=None, type=None, upper_bound=None, wait_on_complete=None, __props__=None, __name__=None, __opts__=None):
        """
        `trafficmanagement.GtmResource` provides the resource for creating, configuring and importing a gtm resource to integrate easily with your existing GTM infrastructure to provide a secure, high performance, highly available and scalable solution for Global Traffic Management. Note: Import requires an ID of the format: `existing_domain_name`:`existing_resource_name`

        ## Example Usage
        ### Basic usage:

        ```python
        import pulumi
        import pulumi_akamai as akamai

        demo_resource = akamai.trafficmanagement.GtmResource("demoResource",
            aggregation_type="latest",
            domain="demo_domain.akadns.net",
            type="XML load object via HTTP")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] domain: — Domain name
        :param pulumi.Input[str] name: — Resource name
               * `aggregation_type`
        :param pulumi.Input[list] resource_instances: — (multiple allowed) 
               * `datacenter_id`
               * `load_object`
               * `load_object_port`
        :param pulumi.Input[str] type: — Resource type
        :param pulumi.Input[bool] wait_on_complete: — (Boolean, Default: true) Wait for transaction to complete

        The **resource_instances** object supports the following:

          * `datacenter_id` (`pulumi.Input[float]`)
          * `loadObject` (`pulumi.Input[str]`)
          * `loadObjectPort` (`pulumi.Input[float]`)
          * `loadServers` (`pulumi.Input[list]`) - — (List)
          * `useDefaultLoadObject` (`pulumi.Input[bool]`) - — (Boolean)
            * `host_header`
            * `least_squares_decay`
            * `upper_bound`
            * `description`
            * `leader_string`
            * `constrained_property`
            * `load_imbalance_percent`
            * `max_u_multiplicative_increment`
            * `decay_rate`
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if aggregation_type is None:
                raise TypeError("Missing required property 'aggregation_type'")
            __props__['aggregation_type'] = aggregation_type
            __props__['constrained_property'] = constrained_property
            __props__['decay_rate'] = decay_rate
            __props__['description'] = description
            if domain is None:
                raise TypeError("Missing required property 'domain'")
            __props__['domain'] = domain
            __props__['host_header'] = host_header
            __props__['leader_string'] = leader_string
            __props__['least_squares_decay'] = least_squares_decay
            __props__['load_imbalance_percentage'] = load_imbalance_percentage
            __props__['max_u_multiplicative_increment'] = max_u_multiplicative_increment
            __props__['name'] = name
            __props__['resource_instances'] = resource_instances
            if type is None:
                raise TypeError("Missing required property 'type'")
            __props__['type'] = type
            __props__['upper_bound'] = upper_bound
            __props__['wait_on_complete'] = wait_on_complete
        super(GtmResource, __self__).__init__(
            'akamai:trafficmanagement/gtmResource:GtmResource',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, aggregation_type=None, constrained_property=None, decay_rate=None, description=None, domain=None, host_header=None, leader_string=None, least_squares_decay=None, load_imbalance_percentage=None, max_u_multiplicative_increment=None, name=None, resource_instances=None, type=None, upper_bound=None, wait_on_complete=None):
        """
        Get an existing GtmResource resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] domain: — Domain name
        :param pulumi.Input[str] name: — Resource name
               * `aggregation_type`
        :param pulumi.Input[list] resource_instances: — (multiple allowed) 
               * `datacenter_id`
               * `load_object`
               * `load_object_port`
        :param pulumi.Input[str] type: — Resource type
        :param pulumi.Input[bool] wait_on_complete: — (Boolean, Default: true) Wait for transaction to complete

        The **resource_instances** object supports the following:

          * `datacenter_id` (`pulumi.Input[float]`)
          * `loadObject` (`pulumi.Input[str]`)
          * `loadObjectPort` (`pulumi.Input[float]`)
          * `loadServers` (`pulumi.Input[list]`) - — (List)
          * `useDefaultLoadObject` (`pulumi.Input[bool]`) - — (Boolean)
            * `host_header`
            * `least_squares_decay`
            * `upper_bound`
            * `description`
            * `leader_string`
            * `constrained_property`
            * `load_imbalance_percent`
            * `max_u_multiplicative_increment`
            * `decay_rate`
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["aggregation_type"] = aggregation_type
        __props__["constrained_property"] = constrained_property
        __props__["decay_rate"] = decay_rate
        __props__["description"] = description
        __props__["domain"] = domain
        __props__["host_header"] = host_header
        __props__["leader_string"] = leader_string
        __props__["least_squares_decay"] = least_squares_decay
        __props__["load_imbalance_percentage"] = load_imbalance_percentage
        __props__["max_u_multiplicative_increment"] = max_u_multiplicative_increment
        __props__["name"] = name
        __props__["resource_instances"] = resource_instances
        __props__["type"] = type
        __props__["upper_bound"] = upper_bound
        __props__["wait_on_complete"] = wait_on_complete
        return GtmResource(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
