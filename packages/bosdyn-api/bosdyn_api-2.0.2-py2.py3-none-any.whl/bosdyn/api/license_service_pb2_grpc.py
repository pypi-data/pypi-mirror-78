# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from bosdyn.api import license_pb2 as bosdyn_dot_api_dot_license__pb2


class LicenseServiceStub(object):
  """The LicenseService allows clients to query the currently installed license on robot.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetLicenseInfo = channel.unary_unary(
        '/bosdyn.api.LicenseService/GetLicenseInfo',
        request_serializer=bosdyn_dot_api_dot_license__pb2.GetLicenseInfoRequest.SerializeToString,
        response_deserializer=bosdyn_dot_api_dot_license__pb2.GetLicenseInfoResponse.FromString,
        )


class LicenseServiceServicer(object):
  """The LicenseService allows clients to query the currently installed license on robot.
  """

  def GetLicenseInfo(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_LicenseServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetLicenseInfo': grpc.unary_unary_rpc_method_handler(
          servicer.GetLicenseInfo,
          request_deserializer=bosdyn_dot_api_dot_license__pb2.GetLicenseInfoRequest.FromString,
          response_serializer=bosdyn_dot_api_dot_license__pb2.GetLicenseInfoResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'bosdyn.api.LicenseService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
