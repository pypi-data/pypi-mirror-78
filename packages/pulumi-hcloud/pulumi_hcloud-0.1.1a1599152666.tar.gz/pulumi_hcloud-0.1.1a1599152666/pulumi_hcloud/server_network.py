# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from . import _utilities, _tables

__all__ = ['ServerNetwork']


class ServerNetwork(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alias_ips: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 network_id: Optional[pulumi.Input[float]] = None,
                 server_id: Optional[pulumi.Input[float]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Provides a Hetzner Cloud Server Network to represent a private network on a server in the Hetzner Cloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_hcloud as hcloud

        node1 = hcloud.Server("node1",
            image="debian-9",
            server_type="cx11")
        mynet = hcloud.Network("mynet", ip_range="10.0.0.0/8")
        foonet = hcloud.NetworkSubnet("foonet",
            ip_range="10.0.1.0/24",
            network_id=mynet.id,
            network_zone="eu-central",
            type="cloud")
        srvnetwork = hcloud.ServerNetwork("srvnetwork",
            ip="10.0.1.5",
            network_id=mynet.id,
            server_id=node1.id)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[List[pulumi.Input[str]]] alias_ips: Additional IPs to be assigned to this server.
        :param pulumi.Input[str] ip: IP to request to be assigned to this server. If you do not provide this then you will be auto assigned an IP address.
        :param pulumi.Input[float] network_id: ID of the network which should be added to the server.
        :param pulumi.Input[float] server_id: ID of the server.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['alias_ips'] = alias_ips
            __props__['ip'] = ip
            if network_id is None:
                raise TypeError("Missing required property 'network_id'")
            __props__['network_id'] = network_id
            if server_id is None:
                raise TypeError("Missing required property 'server_id'")
            __props__['server_id'] = server_id
            __props__['mac_address'] = None
        super(ServerNetwork, __self__).__init__(
            'hcloud:index/serverNetwork:ServerNetwork',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            alias_ips: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
            ip: Optional[pulumi.Input[str]] = None,
            mac_address: Optional[pulumi.Input[str]] = None,
            network_id: Optional[pulumi.Input[float]] = None,
            server_id: Optional[pulumi.Input[float]] = None) -> 'ServerNetwork':
        """
        Get an existing ServerNetwork resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[List[pulumi.Input[str]]] alias_ips: Additional IPs to be assigned to this server.
        :param pulumi.Input[str] ip: IP to request to be assigned to this server. If you do not provide this then you will be auto assigned an IP address.
        :param pulumi.Input[float] network_id: ID of the network which should be added to the server.
        :param pulumi.Input[float] server_id: ID of the server.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["alias_ips"] = alias_ips
        __props__["ip"] = ip
        __props__["mac_address"] = mac_address
        __props__["network_id"] = network_id
        __props__["server_id"] = server_id
        return ServerNetwork(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="aliasIps")
    def alias_ips(self) -> pulumi.Output[Optional[List[str]]]:
        """
        Additional IPs to be assigned to this server.
        """
        return pulumi.get(self, "alias_ips")

    @property
    @pulumi.getter
    def ip(self) -> pulumi.Output[str]:
        """
        IP to request to be assigned to this server. If you do not provide this then you will be auto assigned an IP address.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> pulumi.Output[str]:
        return pulumi.get(self, "mac_address")

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> pulumi.Output[float]:
        """
        ID of the network which should be added to the server.
        """
        return pulumi.get(self, "network_id")

    @property
    @pulumi.getter(name="serverId")
    def server_id(self) -> pulumi.Output[float]:
        """
        ID of the server.
        """
        return pulumi.get(self, "server_id")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

