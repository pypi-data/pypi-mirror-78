      subroutine TSSetCostGradients(a,b,c,d,z)
      use petsctsdef
       TS a ! TS
       PetscInt b ! PetscInt
       Vec c ! Vec
       Vec d ! Vec
        PetscErrorCode z
       end subroutine
      subroutine TSGetCostGradients(a,b,c,d,z)
      use petsctsdef
       TS a ! TS
       PetscInt b ! PetscInt
       Vec c ! Vec
       Vec d ! Vec
        PetscErrorCode z
       end subroutine
      subroutine TSSetCostHessianProducts(a,b,c,d,e,z)
      use petsctsdef
       TS a ! TS
       PetscInt b ! PetscInt
       Vec c ! Vec
       Vec d ! Vec
       Vec e ! Vec
        PetscErrorCode z
       end subroutine
      subroutine TSGetCostHessianProducts(a,b,c,d,e,z)
      use petsctsdef
       TS a ! TS
       PetscInt b ! PetscInt
       Vec c ! Vec
       Vec d ! Vec
       Vec e ! Vec
        PetscErrorCode z
       end subroutine
      subroutine TSAdjointSetForward(a,b,z)
      use petsctsdef
       TS a ! TS
       Mat b ! Mat
        PetscErrorCode z
       end subroutine
      subroutine TSAdjointResetForward(a,z)
      use petsctsdef
       TS a ! TS
        PetscErrorCode z
       end subroutine
      subroutine TSAdjointSetUp(a,z)
      use petsctsdef
       TS a ! TS
        PetscErrorCode z
       end subroutine
      subroutine TSAdjointReset(a,z)
      use petsctsdef
       TS a ! TS
        PetscErrorCode z
       end subroutine
      subroutine TSAdjointSetSteps(a,b,z)
      use petsctsdef
       TS a ! TS
       PetscInt b ! PetscInt
        PetscErrorCode z
       end subroutine
      subroutine TSAdjointComputeDRDYFunction(a,b,c,d,z)
      use petsctsdef
       TS a ! TS
       PetscReal b ! PetscReal
       Vec c ! Vec
       Vec d ! Vec
        PetscErrorCode z
       end subroutine
      subroutine TSAdjointComputeDRDPFunction(a,b,c,d,z)
      use petsctsdef
       TS a ! TS
       PetscReal b ! PetscReal
       Vec c ! Vec
       Vec d ! Vec
        PetscErrorCode z
       end subroutine
      subroutine TSAdjointStep(a,z)
      use petsctsdef
       TS a ! TS
        PetscErrorCode z
       end subroutine
      subroutine TSAdjointSolve(a,z)
      use petsctsdef
       TS a ! TS
        PetscErrorCode z
       end subroutine
      subroutine TSAdjointCostIntegral(a,z)
      use petsctsdef
       TS a ! TS
        PetscErrorCode z
       end subroutine
      subroutine TSForwardSetUp(a,z)
      use petsctsdef
       TS a ! TS
        PetscErrorCode z
       end subroutine
      subroutine TSForwardReset(a,z)
      use petsctsdef
       TS a ! TS
        PetscErrorCode z
       end subroutine
      subroutine TSForwardSetIntegralGradients(a,b,c,z)
      use petsctsdef
       TS a ! TS
       PetscInt b ! PetscInt
       Vec c ! Vec
        PetscErrorCode z
       end subroutine
      subroutine TSForwardGetIntegralGradients(a,b,c,z)
      use petsctsdef
       TS a ! TS
       PetscInt b ! PetscInt
       Vec c ! Vec
        PetscErrorCode z
       end subroutine
      subroutine TSForwardStep(a,z)
      use petsctsdef
       TS a ! TS
        PetscErrorCode z
       end subroutine
      subroutine TSForwardSetSensitivities(a,b,c,z)
      use petsctsdef
       TS a ! TS
       PetscInt b ! PetscInt
       Mat c ! Mat
        PetscErrorCode z
       end subroutine
      subroutine TSForwardGetSensitivities(a,b,c,z)
      use petsctsdef
       TS a ! TS
       PetscInt b ! PetscInt
       Mat c ! Mat
        PetscErrorCode z
       end subroutine
      subroutine TSForwardCostIntegral(a,z)
      use petsctsdef
       TS a ! TS
        PetscErrorCode z
       end subroutine
      subroutine TSForwardSetInitialSensitivities(a,b,z)
      use petsctsdef
       TS a ! TS
       Mat b ! Mat
        PetscErrorCode z
       end subroutine
      subroutine TSForwardGetStages(a,b,c,z)
      use petsctsdef
       TS a ! TS
       PetscInt b ! PetscInt
       Mat c ! Mat
        PetscErrorCode z
       end subroutine
      subroutine TSCreateQuadratureTS(a,b,c,z)
      use petsctsdef
       TS a ! TS
       PetscBool b ! PetscBool
       TS c ! TS
        PetscErrorCode z
       end subroutine
      subroutine TSGetQuadratureTS(a,b,c,z)
      use petsctsdef
       TS a ! TS
       PetscBool b ! PetscBool
       TS c ! TS
        PetscErrorCode z
       end subroutine
      subroutine TSComputeSNESJacobian(a,b,c,d,z)
      use petsctsdef
       TS a ! TS
       Vec b ! Vec
       Mat c ! Mat
       Mat d ! Mat
        PetscErrorCode z
       end subroutine
