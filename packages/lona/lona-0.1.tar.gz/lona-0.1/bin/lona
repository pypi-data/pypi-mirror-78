#!/usr/bin/env python
# -*- coding: utf-8 -*-

from concurrent.futures import ThreadPoolExecutor
from argparse import ArgumentParser
import asyncio
import logging
import signal
import os

from aiohttp.web import Application, run_app

from lona.server import LonaServer
from lona.utils import LogFormatter

# parse command line
parser = ArgumentParser()

parser.add_argument('--host', type=str, default='localhost')
parser.add_argument('--port', type=int, default=8080)
parser.add_argument('--max-workers', type=int, default=6)
parser.add_argument('-s', '--settings', nargs='+')
parser.add_argument('--project-root', type=str, default=os.getcwd())
parser.add_argument('--shell', action='store_true')
parser.add_argument('--loggers', type=str, nargs='+')

parser.add_argument(
    '-l', '--log-level',
    choices=['debug', 'info', 'warn', 'error', 'critical'],
    default='warn',
)

cli_args = parser.parse_args()

# setup logging
logging.basicConfig(level={
    'debug': logging.DEBUG,
    'info': logging.INFO,
    'warn': logging.WARN,
    'error': logging.ERROR,
    'critical': logging.CRITICAL,
}[cli_args.log_level.lower()])

log = LogFormatter()

for handler in logging.getLogger().root.handlers:
    handler.setFormatter(log)

if cli_args.loggers:
    for logger_name in cli_args.loggers:
        if logger_name.startswith('_'):
            log.exclude(logger_name[1:])

        else:
            if logger_name.startswith('+'):
                logger_name = logger_name[1:]

            log.include(logger_name)

# setup lona server
if cli_args.shell:
    cli_args.max_workers += 1

loop = asyncio.get_event_loop()
app = Application()
executor = ThreadPoolExecutor(max_workers=cli_args.max_workers)

server = LonaServer(
    app=app,
    loop=loop,
    project_root=cli_args.project_root,
    settings_paths=list(cli_args.settings or []),
    executor=executor,
)

app.on_shutdown.append(server.shutdown)

# run server
if cli_args.shell:
    async def start_shell(server):
        def _start_shell():
            import IPython
            IPython.embed()

            os.kill(os.getpid(), signal.SIGTERM)

        loop.run_in_executor(executor, _start_shell)

    loop.create_task(start_shell(server))

run_app(app=app, host=cli_args.host, port=cli_args.port)
