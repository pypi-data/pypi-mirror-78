# -*- coding: utf-8 -*-
#
# Copyright (c) 2018..2020 Bobby Noelte.
# SPDX-License-Identifier: Apache-2.0

# Configuration file for the Sphinx documentation builder.
#
# This file does only contain a selection of the most common options. For a
# full list see the documentation:
# http://www.sphinx-doc.org/en/master/config

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#

import os, sys
from pathlib import Path
import subprocess
import sphinx_rtd_theme


# -- Project information -----------------------------------------------------

project = 'Cogeno'
copyright = '2018..2020, Bobby Noelte'
author = 'Bobby Noelte'

# The short X.Y version
version = '0.2'
# The full version, including alpha/beta/rc tags
release = '0.2.2'


# -- General configuration ---------------------------------------------------

# Add the 'extensions' directory to sys.path, to enable finding Sphinx
# extensions within.
sys.path.insert(0, os.path.join(os.path.abspath('.'), 'extensions'))

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.doctest',
    'sphinx.ext.ifconfig',
    'sphinx.ext.viewcode',
    'sphinx.ext.imgmath',
    'sphinx.ext.todo',
    'sphinx_rtd_theme',
    'breathe'
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = ['.rst']

# The master toctree document.
master_doc = 'index'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path .
exclude_patterns = ['_build', 'build', 'templates', 'Thumbs.db', '.DS_Store']

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# Additional lexer for Pygments (syntax highlighting)
from lexer.DtsLexer import DtsLexer
from sphinx.highlighting import lexers
lexers['DTS'] = DtsLexer()

# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = 'sphinx_rtd_theme'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
# html_static_path = ['_static']

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
# html_sidebars = {}


# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'cogenodoc'


# -- Options for LaTeX output ------------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'cogeno.tex', 'cogeno Documentation',
     'Bobby Noelte', 'manual'),
]


# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'cogeno', 'cogeno Documentation',
     [author], 1)
]


# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'cogeno', 'cogeno Documentation',
     author, 'cogeno', 'One line description of project.',
     'Miscellaneous'),
]


# -- Options for Epub output -------------------------------------------------

# Bibliographic Dublin Core info.
epub_title = project
epub_author = author
epub_publisher = author
epub_copyright = copyright

# The unique identifier of the text. This can be a ISBN number
# or the project homepage.
#
# epub_identifier = ''

# A unique identification for the text.
#
# epub_uid = ''

# A list of files that should not be packed into the epub file.
epub_exclude_files = ['search.html']


# -- Extension configuration -------------------------------------------------

breathe_projects = {}
breathe_default_project = "cogeno"
breathe_show_define_initializer = True

def run_doxygen(folder, doxyfile):
    """Run the doxygen make command in the designated folder"""

    try:
        retcode = subprocess.call("cd {}; doxygen {}".format(folder, doxyfile), shell=True)
        if retcode < 0:
            sys.stderr.write("doxygen terminated by signal %s" % (-retcode))
    except OSError as e:
        sys.stderr.write("doxygen execution failed: %s" % e)


def generate_doxygen_xml(app):
    """Run the doxygen commands"""

    read_the_docs_build = os.environ.get('READTHEDOCS', None) == 'True'

    if read_the_docs_build:
        # We are on the ReadTheDocs build server.
        doxyfile_dir = str(Path(__file__).parent.resolve())
        run_doxygen(doxyfile_dir, 'Doxyfile')
        doxygen_xml = str(Path(__file__).parent.joinpath("_build/doxy/xml").resolve())
    else:
        doxyfile_dir = str(Path(__file__).parent.resolve())
        run_doxygen(doxyfile_dir, 'Doxyfile')
        doxygen_xml = str(Path(__file__).parent.joinpath("_build/doxy/xml").resolve())

    breathe_projects['cogeno'] = doxygen_xml

def generate_cogeno_rst(app):
    """Run cogeno to create documents"""

    read_the_docs_build = os.environ.get('READTHEDOCS', None) == 'True'

    generated_index_template_name = 'generated_index.in.rst'

    if read_the_docs_build:
        # We are on the ReadTheDocs build server.
        cogeno_path = str(Path(__file__).parent.parent.joinpath('cogeno'))
        sys.path.insert(0, cogeno_path)
    else:
        # Get Cogeno
        cogeno_path = str(Path(__file__).parent.parent.joinpath('cogeno'))
        sys.path.insert(0, cogeno_path)

    try:
        from cogeno import Cogeno
    except:
        print("--------- Can not import cogeno")
        return

    # Get template files
    template_files = []
    generated_index_template = None
    for template_dir in templates_path:
        template_dir = Path(__file__).parent.joinpath(template_dir)
        if not template_dir.is_dir():
            continue
        templates = template_dir.glob('**/*')
        for template in templates:
            if not template.suffix in source_suffix:
                continue
            if template.name == generated_index_template_name:
                # This has to be the last file to be generated
                generated_index_template = template
            else:
                template_files.append(template)
    if not generated_index_template is None:
        template_files.append(generated_index_template)

    # Generate files with Cogeno
    generated_dir = Path(__file__).parent.joinpath('generated')
    for template in template_files:
        output_name = template.name
        output = generated_dir.joinpath(output_name)
        argv = ['cogeno',
            '--delete-code',
            '--input', str(template),
            '--output', str(output),
            '--output-sanitize-suffix',
            ]
        Cogeno().callable_main(argv)



def setup(app):

    # Add hook for building doxygen xml when needed
    app.connect("builder-inited", generate_doxygen_xml)
    app.connect("builder-inited", generate_cogeno_rst)
