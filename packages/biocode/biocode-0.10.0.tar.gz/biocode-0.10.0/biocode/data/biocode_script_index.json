{"blast": [{"name": "calculate_query_coverage_by_blast.py", "desc": "Parse BLAST output and report coverage of queries"}, {"name": "convert_blast_btab_to_bed.py", "desc": "Converts BLAST and RAPSearch2 tabular output to BED"}, {"name": "convert_blast_btab_to_gff3.py", "desc": "NCBI-BLAST (btab) converter to GFF3 format"}, {"name": "create_taxonomic_profile_from_blast.py", "desc": "Reads a BLAST m8 file and taxonomy DB to produce a taxonomic profile at any user-specified ranking level."}, {"name": "detect_inverted_repeats.py", "desc": "Use BLAST to identify internal inverted repeats"}, {"name": "eggnog_to_sqlite3.py", "desc": "Reads eggNOG release files and creates a SQLite3 database of commonly-accessed attributes for each accession."}, {"name": "uniprot_sprot_to_sqlite3.py", "desc": "Reads a uniprot_sprot.dat file and creates a SQLite3 database of commonly-accessed attributes for each accession."}, {"name": "uniref_to_sqlite3.py", "desc": "Reads a uniprot_trembl.dat file and creates a SQLite3 database of commonly-accessed attributes for each accession."}], "chado": [], "data": [], "fasta": [{"name": "append_to_fasta_header.py", "desc": "Append strings to the end of FASTA read headers"}, {"name": "check_for_embedded_fasta_headers.py", "desc": "Looks for FASTA entries which seem to have been embedded within another"}, {"name": "convert_fasta_contigs_to_gff3.py", "desc": "Creates a GFF3 file from a genomic FASTA"}, {"name": "convert_fastq_to_fasta.py", "desc": "Convert FASTQ to FASTA format"}, {"name": "extract_fasta_regions.py", "desc": "Extract regions from a multi-FASTA file"}, {"name": "fasta_base_content.py", "desc": "Reports base/residue composition of a FASTA file"}, {"name": "fasta_simple_stats.py", "desc": "Provides simple quantitative statistics for one or more FASTA files"}, {"name": "fasta_size_distribution_plot.py", "desc": "Generate FASTA file(s) size distribution plot"}, {"name": "filter_fasta_by_abundance.py", "desc": "Filter FASTA file using abundance estimation output"}, {"name": "filter_fasta_by_header_regex.py", "desc": "Split multi-FASTA file into separate protein and nucleotide files"}, {"name": "filter_fasta_by_type.py", "desc": "Split multi-FASTA file into separate protein and nucleotide files"}, {"name": "interleave_fasta.py", "desc": null}, {"name": "merge_fasta_files_and_uniquify_ids.py", "desc": "Looks for FASTA entries which seem to have been embedded within another"}, {"name": "merge_masked_fasta_files.py", "desc": "Merge masked FASTA files"}, {"name": "prepend_to_fasta_header.py", "desc": "Prepend strings to the beginning of FASTA read headers"}, {"name": "reformat_fasta_residue_lengths.py", "desc": "Reformats a FASTA file such that there are no more than -w characters of sequence residues per line."}, {"name": "remove_duplicate_sequences.py", "desc": "Read a multi-FASTA file sequence and remove duplicates (by MD5 hash)"}, {"name": "reorient_sequences_by_id.py", "desc": "Reverse or reverse-complement selected sequences within a multi-FASTA"}, {"name": "replace_homopolymeric_repeats_with_Ns.py", "desc": "Replaces long homopolymeric stretches with N characters"}, {"name": "report_or_replace_nonstandard_residues.py", "desc": "Reports on non-standard characters in multifasta files and can optionally replace residues"}, {"name": "split_fasta_into_even_files.py", "desc": "Split a large FASTA file into new evenly sized files"}, {"name": "split_interleaved_sequence_file.py", "desc": "Script to split output of Diginorm."}, {"name": "subsample_fasta.py", "desc": "Randomly extract/subsample a specified number of sequences from a FASTA file."}, {"name": "validate_fasta.py", "desc": "Performs selected validation of a FASTA file"}], "fastq": [{"name": "append_to_fastq_read_header.py", "desc": "Append strings to the end of FASTQ read headers"}, {"name": "convert_fastq_to_fasta.py", "desc": "Convert FASTQ to FASTA format"}, {"name": "fastq_simple_stats.py", "desc": "Provides simple quantitative statistics for a given FASTQ file"}, {"name": "filter_fastq_by_N_content.py", "desc": "Filter FASTQ file by N content"}, {"name": "interleave_fastq.py", "desc": null}, {"name": "randomly_subsample_fastq.py", "desc": "Randomized subsampling of single or paired-end FASTQ files"}, {"name": "split_interleaved_sequence_file.py", "desc": "Script to split output of Diginorm."}], "genbank": [{"name": "convert_gff3_to_gbk.py", "desc": "Converts GFF3 into a GenBank flat file"}, {"name": "convert_gff_to_ncbi_gff3.py", "desc": "Converts biocode GFF3 into NCBI-spec GFF3"}, {"name": "download_assemblies_from_genbank.py", "desc": "Download one or more genomic assemblies from Genbank"}], "general": [{"name": "calculate_gene_coverage_from_assembly.py", "desc": "Gene coverage calculator"}, {"name": "create_rsem_html_table.py", "desc": "Creates an HTML page of RSEM output"}, {"name": "filter_uniref_by_repid.py", "desc": "Filter a Uniref FASTA file by taxonomy"}, {"name": "filter_uniref_by_taxonomy.py", "desc": "Filter a Uniref FASTA file by taxonomy"}, {"name": "join_columnar_files.py", "desc": "Hash-based implementation (limited) of linux join"}, {"name": "list_biocode.py", "desc": "Prints a list of the scripts which are part of the Biocode install"}, {"name": "make_go_index.py", "desc": "Creates a quick-lookup index of source terms to their slim counterparts"}, {"name": "make_go_slim.py", "desc": "Creates a slim version of a set of ontology terms."}, {"name": "make_go_slim_index.py", "desc": "Creates a quick-lookup index of source terms to their slim counterparts"}], "gff": [{"name": "add_gff3_locus_tags.py", "desc": "Adds locus tag identifiers to GFF3 features"}, {"name": "add_polypeptide_to_gff3_gene_models.py", "desc": "Adds polypeptide rows in GFF3 for gene models which are missing them"}, {"name": "append_to_column_9_value.py", "desc": "Append a string to the end of existing key values in column 9 of GFF3 files"}, {"name": "check_gff_for_internal_stops.py", "desc": "Checks the CDS features against a genome sequence report non-terminal internal stops."}, {"name": "compare_gene_structures.py", "desc": "Compare two GFF3 files and generate PPV and SN"}, {"name": "convert_aat_btab_to_gff3.py", "desc": "AAT (nap/gap2) converter to GFF3 format"}, {"name": "convert_augustus_to_gff3.py", "desc": "Convert native (GTF) or GFF output from Augustus into GFF3 format"}, {"name": "convert_blast_btab_to_gff3.py", "desc": "NCBI-BLAST (btab) converter to GFF3 format"}, {"name": "convert_cegma_gff_to_gff3.py", "desc": "Converts CEGMA GFF output to spec-legal GFF3"}, {"name": "convert_cufflinks_gtf_to_gff3.py", "desc": "A GTF -> GFF3 conversion script for Cufflinks output"}, {"name": "convert_fasta_contigs_to_gff3.py", "desc": "Creates a GFF3 file from a genomic FASTA"}, {"name": "convert_genbank_to_gff3.py", "desc": "Convert GenBank flat files to GFF3 format"}, {"name": "convert_gff3_to_bed.py", "desc": "Create a BED file from GFF3"}, {"name": "convert_gff3_to_gbk.py", "desc": "Converts GFF3 into a GenBank flat file"}, {"name": "convert_gff3_to_gene_association_format.py", "desc": "Converts GFF3 files to GO Gene Association Format (GAF)"}, {"name": "convert_gff3_to_ncbi_tbl.py", "desc": "Create a TBL file for submission to NCBI from GFF3"}, {"name": "convert_glimmerHMM_gff_to_gff3.py", "desc": "Converts glimmerHMM GFF output to GFF3"}, {"name": "convert_metagenemark_gff_to_gff3.py", "desc": "Metagenemark GFF -> GFF3 conversion script"}, {"name": "convert_pasa_gff_to_models.py", "desc": "Convert PASA GFF file to canonical gene models"}, {"name": "convert_prodigal_to_gff3.py", "desc": "Converts prodigal GFF to canonical GFF3"}, {"name": "convert_scipio_gff_to_gff3.py", "desc": "Converts Scipio GFF output to GFF3 with grouped match_parts"}, {"name": "correct_gff3_CDS_phase_column.py", "desc": "Checks the CDS features against a genome sequence to report/correct phase columns."}, {"name": "extend_genes_to_stops.py", "desc": "Extends GFF gene models to the first in-frame stop"}, {"name": "filter_gff3_by_id_list.py", "desc": "Filters the features of a GFF3 file by IDs while keeping related features."}, {"name": "mark_partial_genes.py", "desc": "Extends GFF gene models to the first in-frame stop"}, {"name": "merge_predicted_gff3.py", "desc": "Creates a single GFF from the output of a few different model prediction tools (coding and non-coding)"}, {"name": "remove_duplicate_features.py", "desc": "Removes duplicate features in a GFF3 file"}, {"name": "remove_masked_gene_models.py", "desc": "Removes gene models whose sequence has been masked."}, {"name": "remove_orphaned_features.py", "desc": "Removes orphaned features in a GFF3 file"}, {"name": "replace_gff_type_column_value.py", "desc": "Adds gene features for RNAs which lack them"}, {"name": "report_basic_gff_model_agreement.py", "desc": "Basic comparison of two GFF3 files"}, {"name": "report_gff3_statistics.py", "desc": "Checks the CDS features against a genome sequence to report/correct phase columns."}, {"name": "report_gff_intron_and_intergenic_stats.py", "desc": "Reports statistics of reference gene coverage and extension by aligned RNA-seq transcript data."}, {"name": "report_go_slim_counts.py", "desc": "Reporter of GO slim counts from annotated GFF3 file"}, {"name": "reverse_misordered_cds_coords.py", "desc": "Reverses CDS coodinates where stop < start"}, {"name": "select_training_and_evaluation_transcripts.py", "desc": "Split an annotation GFF3 into training and evaluation sets"}, {"name": "set_source_column.py", "desc": "Overwrite source (2nd) column in GFF3 file"}, {"name": "split_isoforms_into_individual_genes.py", "desc": "Checks for genes with multiple mRNA children and creates new genes for each."}, {"name": "update_selected_column9_values.py", "desc": "Updates 9th-column key/value pairs in GFF file using a batch-update file"}, {"name": "validate_feature_boundaries_on_molecules.py", "desc": "Checks the CDS features against a genome sequence to report/correct phase columns."}, {"name": "write_fasta_from_gff.py", "desc": "Extracts the protein or CDS seqeunces from a GFF3 file"}], "gtf": [{"name": "convert_cufflinks_gtf_to_gff3.py", "desc": "A GTF -> GFF3 conversion script for Cufflinks output"}, {"name": "make_cufflinks_ids_unique.py", "desc": "Uniquifies IDs within a GTF file by prepending molecule identifiers"}], "hmm": [{"name": "convert_htab_to_bed.py", "desc": "Converts HMMer tabular output to BED"}, {"name": "hmmlib_to_sqlite3.py", "desc": "Reads an HMM file and creates a SQLite3 database of commonly-accessed attributes for each HMM."}, {"name": "tigrfam_info_to_sqlite3.py", "desc": "Reads supplemental TIGRFAM info and updates an annotation source db file."}], "lib": [], "sam_bam": [{"name": "get_mpilup_from_id_list.py", "desc": "Generates an mpileup file for a subset of molecules in a large BAM file"}, {"name": "merge_bam_files.py", "desc": "Merge multiple BAM files, retaining headers"}, {"name": "report_coverage_gaps.py", "desc": "Report coverage gaps/dips from a samtools mpileup file"}, {"name": "split_molecules_on_gaps.py", "desc": "Splits FASTA file based on reported coverage gaps"}], "sysadmin": [], "taxonomy": [{"name": "create_taxonomic_profile_from_blast.py", "desc": "Reads a BLAST m8 file and taxonomy DB to produce a taxonomic profile at any user-specified ranking level."}, {"name": "create_taxonomy_db.py", "desc": "Transforms NCBI taxonomy flat-files into a SQLite3 DB."}]}