Metadata-Version: 2.1
Name: mypy-boto3-ssm
Version: 1.14.51.1
Summary: Type annotations for boto3.SSM 1.14.51 service, generated by mypy-boto3-buider 2.3.1
Home-page: https://github.com/vemel/mypy_boto3_builder
Author: Vlad Emelianov
Author-email: vlad.emelianov.nz@gmail.com
License: MIT License
Project-URL: Documentation, https://mypy-boto3-builder.readthedocs.io/en/latest/
Project-URL: Source, https://github.com/vemel/mypy_boto3_builder
Project-URL: Tracker, https://github.com/vemel/mypy_boto3_builder/issues
Description: # mypy-boto3-ssm
        
        [![PyPI - mypy-boto3-ssm](https://img.shields.io/pypi/v/mypy-boto3-ssm.svg?color=blue)](https://pypi.org/project/mypy-boto3-ssm)
        [![PyPI - Python Version](https://img.shields.io/pypi/pyversions/mypy-boto3-ssm.svg?color=blue)](https://pypi.org/project/mypy-boto3-ssm)
        [![Docs](https://img.shields.io/readthedocs/mypy-boto3-builder.svg?color=blue)](https://mypy-boto3-builder.readthedocs.io/)
        
        Type annotations for
        [boto3.SSM 1.14.51](https://boto3.amazonaws.com/v1/documentation/api/1.14.51/reference/services/ssm.html#SSM) service
        compatible with [mypy](https://github.com/python/mypy), [VSCode](https://code.visualstudio.com/),
        [PyCharm](https://www.jetbrains.com/pycharm/) and other tools.
        
        Generated by [mypy-boto3-buider 2.3.1](https://github.com/vemel/mypy_boto3_builder).
        
        More information can be found on [boto3-stubs](https://pypi.org/project/boto3-stubs/) page.
        
        ## How to install
        
        Make sure you have [mypy](https://github.com/python/mypy) installed and activated in your IDE.
        
        Install `boto3-stubs` for `SSM` service.
        
        ```bash
        python -m pip install boto3-stubs[ssm]
        ```
        
        ## How to use
        
        ### Client annotations
        
        `SSMClient` provides annotations for `boto3.client("ssm")`.
        
        ```python
        import boto3
        
        from mypy_boto3_ssm import SSMClient
        from mypy_boto3_ssm.paginator import (
            DescribeActivationsPaginator,
            DescribeAssociationExecutionsPaginator,
            DescribeAssociationExecutionTargetsPaginator,
            DescribeAutomationExecutionsPaginator,
            DescribeAutomationStepExecutionsPaginator,
            DescribeAvailablePatchesPaginator,
            DescribeEffectiveInstanceAssociationsPaginator,
            DescribeEffectivePatchesForPatchBaselinePaginator,
            DescribeInstanceAssociationsStatusPaginator,
            DescribeInstanceInformationPaginator,
            DescribeInstancePatchesPaginator,
            DescribeInstancePatchStatesForPatchGroupPaginator,
            DescribeInstancePatchStatesPaginator,
            DescribeInventoryDeletionsPaginator,
            DescribeMaintenanceWindowExecutionsPaginator,
            DescribeMaintenanceWindowExecutionTaskInvocationsPaginator,
            DescribeMaintenanceWindowExecutionTasksPaginator,
            DescribeMaintenanceWindowSchedulePaginator,
            DescribeMaintenanceWindowsForTargetPaginator,
            DescribeMaintenanceWindowsPaginator,
            DescribeMaintenanceWindowTargetsPaginator,
            DescribeMaintenanceWindowTasksPaginator,
            DescribeOpsItemsPaginator,
            DescribeParametersPaginator,
            DescribePatchBaselinesPaginator,
            DescribePatchGroupsPaginator,
            DescribePatchPropertiesPaginator,
            DescribeSessionsPaginator,
            GetInventoryPaginator,
            GetInventorySchemaPaginator,
            GetOpsSummaryPaginator,
            GetParameterHistoryPaginator,
            GetParametersByPathPaginator,
            ListAssociationsPaginator,
            ListAssociationVersionsPaginator,
            ListCommandInvocationsPaginator,
            ListCommandsPaginator,
            ListComplianceItemsPaginator,
            ListComplianceSummariesPaginator,
            ListDocumentsPaginator,
            ListDocumentVersionsPaginator,
            ListResourceComplianceSummariesPaginator,
            ListResourceDataSyncPaginator,
        )
        from mypy_boto3_ssm.type_defs import AccountSharingInfoTypeDef, ...
        from mypy_boto3_ssm.waiter import CommandExecutedWaiter
        
        client: SSMClient = boto3.client("ssm")
        
        # now client usage is checked by mypy and IDE should provide code auto-complete
        
        # works for session as well
        session = boto3.session.Session(region="us-west-1")
        session_client: SSMClient = session.client("ssm")
        ```
        
        ### Paginators annotations
        
        `mypy_boto3_ssm.paginator` module contains type annotations for all paginators.
        
        ```python
        
        client: SSMClient = boto3.client("ssm")
        
        # Explicit type annotations are optional here
        # Type should be correctly discovered by mypy and IDEs
        # VSCode requires explicit type annotations
        describe_activations_paginator: DescribeActivationsPaginator = client.get_paginator("describe_activations")
        describe_association_execution_targets_paginator: DescribeAssociationExecutionTargetsPaginator = client.get_paginator("describe_association_execution_targets")
        describe_association_executions_paginator: DescribeAssociationExecutionsPaginator = client.get_paginator("describe_association_executions")
        describe_automation_executions_paginator: DescribeAutomationExecutionsPaginator = client.get_paginator("describe_automation_executions")
        describe_automation_step_executions_paginator: DescribeAutomationStepExecutionsPaginator = client.get_paginator("describe_automation_step_executions")
        describe_available_patches_paginator: DescribeAvailablePatchesPaginator = client.get_paginator("describe_available_patches")
        describe_effective_instance_associations_paginator: DescribeEffectiveInstanceAssociationsPaginator = client.get_paginator("describe_effective_instance_associations")
        describe_effective_patches_for_patch_baseline_paginator: DescribeEffectivePatchesForPatchBaselinePaginator = client.get_paginator("describe_effective_patches_for_patch_baseline")
        describe_instance_associations_status_paginator: DescribeInstanceAssociationsStatusPaginator = client.get_paginator("describe_instance_associations_status")
        describe_instance_information_paginator: DescribeInstanceInformationPaginator = client.get_paginator("describe_instance_information")
        describe_instance_patch_states_paginator: DescribeInstancePatchStatesPaginator = client.get_paginator("describe_instance_patch_states")
        describe_instance_patch_states_for_patch_group_paginator: DescribeInstancePatchStatesForPatchGroupPaginator = client.get_paginator("describe_instance_patch_states_for_patch_group")
        describe_instance_patches_paginator: DescribeInstancePatchesPaginator = client.get_paginator("describe_instance_patches")
        describe_inventory_deletions_paginator: DescribeInventoryDeletionsPaginator = client.get_paginator("describe_inventory_deletions")
        describe_maintenance_window_execution_task_invocations_paginator: DescribeMaintenanceWindowExecutionTaskInvocationsPaginator = client.get_paginator("describe_maintenance_window_execution_task_invocations")
        describe_maintenance_window_execution_tasks_paginator: DescribeMaintenanceWindowExecutionTasksPaginator = client.get_paginator("describe_maintenance_window_execution_tasks")
        describe_maintenance_window_executions_paginator: DescribeMaintenanceWindowExecutionsPaginator = client.get_paginator("describe_maintenance_window_executions")
        describe_maintenance_window_schedule_paginator: DescribeMaintenanceWindowSchedulePaginator = client.get_paginator("describe_maintenance_window_schedule")
        describe_maintenance_window_targets_paginator: DescribeMaintenanceWindowTargetsPaginator = client.get_paginator("describe_maintenance_window_targets")
        describe_maintenance_window_tasks_paginator: DescribeMaintenanceWindowTasksPaginator = client.get_paginator("describe_maintenance_window_tasks")
        describe_maintenance_windows_paginator: DescribeMaintenanceWindowsPaginator = client.get_paginator("describe_maintenance_windows")
        describe_maintenance_windows_for_target_paginator: DescribeMaintenanceWindowsForTargetPaginator = client.get_paginator("describe_maintenance_windows_for_target")
        describe_ops_items_paginator: DescribeOpsItemsPaginator = client.get_paginator("describe_ops_items")
        describe_parameters_paginator: DescribeParametersPaginator = client.get_paginator("describe_parameters")
        describe_patch_baselines_paginator: DescribePatchBaselinesPaginator = client.get_paginator("describe_patch_baselines")
        describe_patch_groups_paginator: DescribePatchGroupsPaginator = client.get_paginator("describe_patch_groups")
        describe_patch_properties_paginator: DescribePatchPropertiesPaginator = client.get_paginator("describe_patch_properties")
        describe_sessions_paginator: DescribeSessionsPaginator = client.get_paginator("describe_sessions")
        get_inventory_paginator: GetInventoryPaginator = client.get_paginator("get_inventory")
        get_inventory_schema_paginator: GetInventorySchemaPaginator = client.get_paginator("get_inventory_schema")
        get_ops_summary_paginator: GetOpsSummaryPaginator = client.get_paginator("get_ops_summary")
        get_parameter_history_paginator: GetParameterHistoryPaginator = client.get_paginator("get_parameter_history")
        get_parameters_by_path_paginator: GetParametersByPathPaginator = client.get_paginator("get_parameters_by_path")
        list_association_versions_paginator: ListAssociationVersionsPaginator = client.get_paginator("list_association_versions")
        list_associations_paginator: ListAssociationsPaginator = client.get_paginator("list_associations")
        list_command_invocations_paginator: ListCommandInvocationsPaginator = client.get_paginator("list_command_invocations")
        list_commands_paginator: ListCommandsPaginator = client.get_paginator("list_commands")
        list_compliance_items_paginator: ListComplianceItemsPaginator = client.get_paginator("list_compliance_items")
        list_compliance_summaries_paginator: ListComplianceSummariesPaginator = client.get_paginator("list_compliance_summaries")
        list_document_versions_paginator: ListDocumentVersionsPaginator = client.get_paginator("list_document_versions")
        list_documents_paginator: ListDocumentsPaginator = client.get_paginator("list_documents")
        list_resource_compliance_summaries_paginator: ListResourceComplianceSummariesPaginator = client.get_paginator("list_resource_compliance_summaries")
        list_resource_data_sync_paginator: ListResourceDataSyncPaginator = client.get_paginator("list_resource_data_sync")
        ```
        
        
        ### Waiters annotations
        
        `mypy_boto3_ssm.waiter` module contains type annotations for all waiters.
        
        ```python
        
        client: SSMClient = boto3.client("ssm")
        
        # Explicit type annotations are optional here
        # Type should be correctly discovered by mypy and IDEs
        # VSCode requires explicit type annotations
        command_executed_waiter: CommandExecutedWaiter = client.get_waiter("command_executed")
        ```
        
        
        
        
        
        ### Typed dictionations
        
        `mypy_boto3_ssm.type_defs` module contains structures and shapes assembled
        to typed dictionaries for additional type checking.
        
        ```python
        
        def get_structure() -> AccountSharingInfoTypeDef:
            return {
              ...
            }
        ```
        
        
        ## Dynamic type annotations
        
        `mypy_boto3` command generates `boto3.client/resource` type annotations for
        `mypy_boto3_ssm` and other installed services.
        
        ```bash
        # Run this command after you add or remove service packages
        python -m mypy_boto3
        ```
        
        Generated type annotations provide overloads for `boto3.client` and `boto3.resource`,
        `boto3.Session.client` and `boto3.Session.resource` functions,
        so explicit type annotations are not needed.
        
        - `mypy` supports function overloads as expected
        - `PyCharm` also supports function overloads, but consumes a lot of RAM, use carefully if you have many services installed
        - `VSCode` does not currently support function overloads, use explicit type annotations
        
        ```python
        
        # Type is discovered correctly by mypy and PyCharm
        # VSCode still needs explicit type annotations
        client = boto3.client("ssm")
        
        session_client = boto3.Session().client("ssm")
        ```
        
Keywords: boto3 ssm type-annotations boto3-stubs mypy typeshed autocomplete auto-generated
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Environment :: Console
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Typing :: Typed
Requires-Python: >=3.6
Description-Content-Type: text/markdown
